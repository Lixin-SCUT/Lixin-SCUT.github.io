<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lixin-ee.github.io/</id>
    <title>Lixin-ee</title>
    <updated>2019-10-23T12:15:27.808Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lixin-ee.github.io/"/>
    <link rel="self" href="https://lixin-ee.github.io//atom.xml"/>
    <subtitle>好景在望。</subtitle>
    <logo>https://lixin-ee.github.io//images/avatar.png</logo>
    <icon>https://lixin-ee.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Lixin-ee</rights>
    <entry>
        <title type="html"><![CDATA[Math 50. Pow(x, n) 难度：中等]]></title>
        <id>https://lixin-ee.github.io//post/math-50-powx-n-nan-du-zhong-deng</id>
        <link href="https://lixin-ee.github.io//post/math-50-powx-n-nan-du-zhong-deng">
        </link>
        <updated>2019-10-23T02:48:00.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>实现 pow(x, n) ，即计算 x 的 n 次幂函数。</p>
<p>示例 1:<br>
输入: 2.00000, 10<br>
输出: 1024.00000<br>
示例 2:<br>
输入: 2.10000, 3<br>
输出: 9.26100<br>
示例 3:<br>
输入: 2.00000, -2<br>
输出: 0.25000<br>
解释: 2-2 = 1/22 = 1/4 = 0.25<br>
说明:<br>
-100.0 &lt; x &lt; 100.0<br>
n 是 32 位有符号整数，其数值范围是 [−2^31, 2^31 − 1] 。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/powx-n<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>要点难点：<br>
1.如果逐个相乘的暴力法肯定会超时<br>
2.n取INT_MIN的时候需要额外的处理<br>
3.需要将负号转化为导数<br>
我的思路<br>
1.既然不能逐个相乘，就利用这几题中都利用到的（逆向）二分法，每次递增一倍，比如 1 2 4 8...如果下一步翻倍的时候会大于n的话，就从1开始重新翻倍<br>
2.针对x为0，1的特例进行优化，同时在对n的负值进行处理的时候单独对INT_MIN进行预处理（先乘一次）<br>
3.优化点：如果有空间的话，可以用一个vector把之前计算的值存起来<br>
最后代码如下：</p>
<pre><code>class Solution {
public:
    double myPow(double x, int n) {
        if(x==0||x==1)
            return x;
        if(n==0)
            return 1;
        if(n&lt;0){
            x=1/x;
            if(n==INT_MIN)
                n=-(n+1),x*=x;
            else
                n=-n;
        }

        int i=1,j=1;
        double res=x,temp=x;
        while(j!=n){
        do{
            res*=temp;
            temp*=temp;
            j+=i;
            i=2*i;  
            }while(j&lt;=n-i);          
        i=1;
        temp=x;
        }
        cout&lt;&lt;res&lt;&lt;endl;
        return res;    
    }
};
</code></pre>
<p>最后来看官方题解和网友题解：</p>
<blockquote>
<p>方法：快速幂算法（递归）<br>
直观想法<br>
假定我们已经得到了 x ^ n的结果，我们如何得到 x ^ {2 * n}的结果？很明显，我们不需要将 x 再乘 n 次。使用公式 (x ^ n) ^ 2 = x ^ {2 * n}，我们可以在一次计算内得到 x ^ {2 * n} 的值。使用该优化方法，我们可以降低算法的时间复杂度。<br>
算法假定我们已经得到了 x ^ {n / 2}的结果，并且我们现在想得到 x ^ n的结果。我们令 A 是 x ^ {n / 2}的结果，我们可以根据 n 的奇偶性来分别讨论 x ^ n的值。如果 n 为偶数，我们可以用公式 (x ^ n) ^ 2 = x ^ {2 * n}来得到 x ^ n = A * A。如果 n 为奇数，那么 A * A = x ^ {n - 1} 。直观上看，我们需要再乘一次 xx ，即 x ^ n = A * A * x。该方法可以很方便的使用递归实现。我们称这种方法为 &quot;快速幂&quot;，因为我们只需最多 O(\log n)O(logn) 次运算来得到 x ^ n 。</p>
</blockquote>
<pre><code>class Solution {
public:
    double fastPow(double x, long long n) {
        if (n == 0) {
            return 1.0;
        }
        double half = fastPow(x, n / 2);
        if (n % 2 == 0) {
            return half * half;
        } else {
            return half * half * x;
        }
    }
    double myPow(double x, int n) {
        long long N = n;
        if (N &lt; 0) {
            x = 1 / x;
            N = -N;
        }
        return fastPow(x, N);
    }
};
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(logn). 每一次我们使用公式 (x ^ n) ^ 2 = x ^ {2 * n}<br>
, n 都变为原来的一半。因此我们需要至多 O(logn) 次操作来得到结果。<br>
空间复杂度：O(logn). 每一次计算，我们需要存储 x ^ {n / 2} 的结果。 我们需要计算O(logn) 次，所以空间复杂度为 O(logn) 。</p>
<p>同时网友提供的另一种二分思想递归：</p>
</blockquote>
<pre><code>class Solution {
public:
    double myPow(double x, int n) {
        if (n == 0) { return 1; }
        if (n == 1) { return x; }
        if (n == -1) { return 1 / x; }
        double half = myPow(x, n / 2);
        double rest = myPow(x, n % 2);
        double total = rest * half * half;
        return total;
    }
};
</code></pre>
<blockquote>
<p>另外一种移位的解法：<br>
先介绍快速幂：<br>
众所周知，如果我们要求a的n次方，最朴素的想法一定是把它们乘起来，这样的复杂度是O(n),显然太差了。<br>
然后我们想到一种优化，如果我们能求得 2的k次方=n的话，我们只需要将a的平方相乘k次，这样的复杂度是O(log2n)，但是我们很难找到这样的k。<br>
于是我们将这一想法再一次优化，我们只要能找到 2的k1次方+2的k2次方+...=n就好了，这样的复杂度还是O(log2n)<br>
这一想法可以通过数的二进制位运算轻易解决，比如9的二进制是1001，也就是从右往左数第i位，我们的答案就乘上a的2的i次方<br>
于是就有了一下算法</p>
</blockquote>
<pre><code>class Solution {
public:
    
    double qpow(double a, long long b){
        double res = 1;
        while(b){
            if(b&amp;1) res = res*a;
            b &gt;&gt;= 1;
            a *= a;
        }
        return res;
    }
    
  
    double myPow(double x, long long n) {
        if(n == 0) return 1;
        if(n &gt; 0) return qpow(x,n);
        if(n &lt; 0) return 1/qpow(x,-n);
        return 1.0;
    }
};
</code></pre>
<p>另一种不需要移位的方法：</p>
<pre><code>class Solution {
public:
    double myPow(double x, int n) {
        long long N = n;
        if (N &lt; 0) {
            x = 1 / x;
            N = -N;
        }
        double ans = 1;
        double current_product = x;
        for (long long i = N; i ; i /= 2) {
            if ((i % 2) == 1) {
                ans = ans * current_product;
            }
            current_product = current_product * current_product;
        }
        return ans;
    }
};
</code></pre>
<p>复杂度分析<br>
时间复杂度：O(logn). 对每一个 n 的二进制位表示，我们都至多需要累乘 1 次，所以总的时间复杂度为 O(logn) 。<br>
空间复杂的：O(1). 我们只需要用到 2 个变量来保存当前的乘积和最终的结果 x 。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ C++ primer 第十三章 笔记+习题 13.3-13.5]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-shi-san-zhang-bi-ji-xi-ti-133-135</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-shi-san-zhang-bi-ji-xi-ti-133-135">
        </link>
        <updated>2019-10-23T01:00:08.000Z</updated>
        <content type="html"><![CDATA[<p>13.3交换操作<br>
为了<strong>交换两个对象我们需要进行一次拷贝和两次赋值</strong>，但理论上这些内存分配都是不必要的，我们更希望使用swap交换指针，而不是分配对象的新副本<br>
与拷贝控制成员不同，<strong>swap不是必要的</strong>，但是对于分配了资源的类，定义swap可能是一种很重要的优化手段<br>
swap有其内置版本，标准库的std::swap，但是如果一个类的成员有自己类型特定的swap函数，调用std::swap就是错误的了。<br>
所以应该使用swap而不是std::swap，swap函数会自动匹配最优版本，如果不存在类型特定的版本，程序也会自动使用std中的版本<br>
<strong>定义了swap的类通常会使用swap来定义它们的赋值运算符</strong>，称为拷贝并交换技术，这种技术将左侧运算对象和右侧对象的一个副本进行交换<strong>注意此时形参必须是值传递，但是swap依然是引用传递</strong><br>
在上述版本的赋值运算符中，参数并不是一个引用，所以右<strong>侧运算对象是以传值方式传递</strong>给了赋值运算符。因此rhs是右侧运算对象的一个副本<br>
在函数体中，rhs获得了*this原来保存的指针，并将rhs 的指针存入了*this。但结束时析构函数会被执行，rhs会被销毁，delete了rhs现在指向的内存，即左侧对象原来指向的内存</p>
<p>习题13.29<br>
因为在函数内部声明了std名字域的swap，所以调用的是标准库的swap而不是递归调用自身<br>
习题13.30<br>
void swap(HasPtr &amp;lhs, HasPtr &amp;rhs) {<br>
std::swap(lhs.ps, rhs.ps);<br>
std::swap(lhs.i, rhs.i);<br>
cout &lt;&lt; &quot;now we swap!&quot; &lt;&lt; endl;<br>
}<br>
习题13.31</p>
<pre><code>class HasPtr
{
	friend void swap(HasPtr &amp;lhs, HasPtr &amp;rhs);
public:
	HasPtr(const HasPtr &amp;hs) : ps(new string(*hs.ps)), i(hs.i) {};
	~HasPtr() { delete ps; }
	HasPtr(const string &amp;s = string(), int si = 0) :ps(new string(s)), i(si) {}
	HasPtr &amp;operator=(const HasPtr &amp;hp) {
		string *s = new string(*hp.ps);
		delete ps;
		*ps = *s;
		delete s;
		i = hp.i;
		return *this;
	}
	bool operator&lt;(const HasPtr &amp;rhs) const{ return i &lt; rhs.i; };
private:
	string *ps;
	int i;
};

void swap(HasPtr &amp;lhs, HasPtr &amp;rhs) {
	std::swap(lhs.ps, rhs.ps);
	std::swap(lhs.i, rhs.i);
	cout &lt;&lt; &quot;now we swap!&quot; &lt;&lt; endl;
}


int main()
{
	vector&lt;HasPtr&gt; hp;
	for (int i = 5; i &gt; 0; --i)
		hp.push_back(HasPtr(&quot;123&quot;, i));
//	for (auto h : hp)
//		cout &lt;&lt; h.i &lt;&lt; endl;
//	sort(hp.begin(), hp.end());
	swap(hp[0], hp[1]);
}
</code></pre>
<p>这题离奇地报错，似乎是sort内部无法调用自定义的swap<br>
习题13.32<br>
不需要，因为类指针的时候需要对左侧计数进行递增，交换的话两边的计数值应该都是不变的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 69. x 的平方根 难度：简单]]></title>
        <id>https://lixin-ee.github.io//post/math-69-x-de-ping-fang-gen</id>
        <link href="https://lixin-ee.github.io//post/math-69-x-de-ping-fang-gen">
        </link>
        <updated>2019-10-22T09:04:02.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>实现 int sqrt(int x) 函数。<br>
计算并返回 x 的平方根，其中 x 是非负整数。<br>
由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p>
<p>示例 1:<br>
输入: 4<br>
输出: 2<br>
示例 2:<br>
输入: 8<br>
输出: 2<br>
说明: 8 的平方根是 2.82842...,<br>
     由于返回类型是整数，小数部分将被舍去。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/sqrtx<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>要点：<br>
1.如果确定平方根的范围<br>
这道题还是比较有趣的，因为仅凭一个数字，基本没有办法去推测它的开方会落在哪里，越大的数值和其自身的平方根距离反而越大，所以我一开始使用的暴力解法</p>
<pre><code>class Solution {
public:
    int mySqrt(int x) {
        int i=0;
        while(i&lt;46341&amp;&amp;x&gt;=i*i)
            ++i;
        return i-1;
    }
};
</code></pre>
<p>需要注意的点是<code>i&lt;46341&amp;&amp;x&gt;=i*i</code>判断条件中，范围判断必须先于平方运算，否则会溢出</p>
<p>然后来看一下网友题解吧：<br>
方法一：二分法<br>
思路分析：使用二分法搜索平方根的思想很简单，就类似于小时候我们看的电视节目中的“猜价格”游戏，高了就往低了猜，低了就往高了猜，范围越来越小。因此，使用二分法猜算术平方根就很自然。</p>
<p>一个数的平方根肯定不会超过它自己，不过直觉还告诉我们，一个数的平方根最多不会超过它的一半，例如 8 的平方根，8 的一半是 4，4^2=16&gt;8，如果这个数越大越是如此，因此我们要计算一下，这个边界是多少。为此，解如下不等式：<br>
(a/2)^2&gt;a<br>
意即：如果一个数的一半的平方大于它自己，那么这个数的取值范围。解以上不等式得 a≥4 或者 a≤0。<br>
于是边界值就是 4，那么对 0、1、2、3 分别计算结果，很容易知道，这 4 个数的平方根依次是 0、1、1、1。</p>
<p>注意：这 4 个特值如果没有考虑到，有可能导致你设置的搜索边界不正确。在使用二分法寻找平方根的时候，要特别注意边界值的选择，以下给出两个参考代码。<br>
参考代码 1：所有的数都放在一起考虑，为了照顾到 0 把左边界设置为 0，为了照顾到 1 把右边界设置为 x // 2 + 1。</p>
<pre><code>public class Solution {

    public int mySqrt(int x) {
        // 注意：针对特殊测试用例，例如 2147395599
        // 要把搜索的范围设置成长整型
        // 为了照顾到 0 把左边界设置为 0
        long left = 0;
        // # 为了照顾到 1 把右边界设置为 x // 2 + 1
        long right = x / 2 + 1;
        while (left &lt; right) {
            // 注意：这里一定取右中位数，如果取左中位数，代码会进入死循环
            // long mid = left + (right - left + 1) / 2;
            long mid = (left + right + 1) &gt;&gt;&gt; 1;
            long square = mid * mid;
            if (square &gt; x) {
                right = mid - 1;
            } else {
                left = mid;
            }
        }
        // 因为一定存在，因此无需后处理
        return (int) left;
    }

}
</code></pre>
<p>要注意到：如果中点 mid 声明为 int 类型，针对大整型测试用例通不过，因此变量需要声明为 long 类型，下同。<br>
参考代码 2：事实上，只要单独照顾一下 00 这个特例就可以了。</p>
<pre><code>public class Solution {

    public int mySqrt(int x) {
        if (x == 0) {
            return 0;
        }
        // 注意：针对特殊测试用例，例如 2147395599
        // 要把搜索的范围设置成长整型
        long left = 1;
        long right = x / 2;
        while (left &lt; right) {
            // 注意：这里一定取右中位数，如果取左中位数，代码会进入死循环
            // long mid = left + (right - left + 1) / 2;
            long mid = (left + right + 1) &gt;&gt;&gt; 1;
            long square = mid * mid;
            if (square &gt; x) {
                right = mid - 1;
            } else {
                left = mid;
            }
        }
        // 因为一定存在，因此无需后处理
        return (int) left;
    }

}
</code></pre>
<p>注意： 这里二分法的使用是有技巧的（如果你没有意识到，这里很可能是个“坑”），下面我就上面注释中提到的：<br>
注意：这里一定取右中位数，如果取左中位数，代码可能会进入死循环。<br>
做一些解释。当 x = 9 的时候，如果取中点为左中位数，你看到死循环发生在 left = 3， right = 4 的时候，此时区间只有 2 个元素。这是为什么呢？<br>
此时索引区间 [3, 4] 的中位数为左中位数，即 mid = 3 ，此时 square = 9 &lt; 9 不成立，进入 left = mid 这个分支，你发现问题了吗，区间不发生收缩，即下一轮循环的索引区间还是 [3, 4]，此时中位数还取左中位数，即 mid = 3 ，square = 9 &lt; 9 不成立，又进入 left = mid 这个分支，死循环就是这样产生的。<br>
接着，请你把 mid = left + (right - left) // 2 改成 mid = left + (right - left + 1) // 2 ，即选择右中位数，再观察一下控制台输出，就知道此时为什么要选右中位数了。<br>
这个二分法模板我用了很久，感觉非常好用。于是我专门把这个二分法模板好用的地方、使用它的技巧和注意事项整理在了「力扣 」第 35 题：搜索插入位置的题解《特别好用的二分查找法模板（Python 代码、Java 代码）》，希望能对大家有所帮助。</p>
<p>复杂度分析：<br>
时间复杂度：O(logN)，二分法的时间复杂度是对数级别的。<br>
空间复杂度：O(1)，使用了常数个数的辅助空间用于存储和比较。<br>
总结： 使用二分查找法搜索，注意特值对搜索边界的影响。</p>
<p>以下这部分内容是根据与用户 @lukas 在本题解下的讨论而添加的。<br>
在这里补充一下，如果你实在不太想分析 a 的平方根可能的上界，之前说了，它肯定不会超过 a 自己，即使你把上界写成一个很大的数，例如 999999，这个数必须得是力扣的测试用例都达不到的数，在二分查找的过程中，不符合要求的数每次会被很快砍掉一半。<br>
参考代码 3：干脆我不讨论 a 的边界，让二分法去排除不符合的区间吧，对数级别的时间复杂度对性能不会有很大影响。</p>
<pre><code>public class Solution {

    public int mySqrt(int x) {
        long left = 0;
        long right = Integer.MAX_VALUE;
        while (left &lt; right) {
            // 这种取中位数的方法又快又好，是我刚学会的，原因在下面这篇文章的评论区
            // https://www.liwei.party/2019/06/17/leetcode-solution-new/search-insert-position/
            // 注意：这里得用无符号右移
            long mid = (left + right + 1) &gt;&gt;&gt; 1;
            long square = mid * mid;
            if (square &gt; x) {
                right = mid - 1;
            } else {
                left = mid;
            }
        }
        return (int) left;
    }
}

作者：liweiwei1419
链接：https://leetcode-cn.com/problems/sqrtx/solution/er-fen-cha-zhao-niu-dun-fa-python-dai-ma-by-liweiw/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
</code></pre>
<p>方法二：牛顿迭代法<br>
下面这种方法可以很有效地求出根号 a 的近似值：首先随便猜一个近似值 x，然后不断令 x 等于 x 和 a/x 的平均数，迭代个六七次后 x 的值就已经相当精确了。</p>
<p>例如，我想求根号 2 等于多少。假如我猜测的结果为 4，虽然错的离谱，但你可以看到使用牛顿迭代法后这个值很快就趋近于根号 2 了：<br>
( 4 + 2/ 4 ) / 2 = 2.25<br>
( 2.25 + 2/ 2.25 ) / 2 = 1.56944..<br>
( 1.56944..+ 2/1.56944..) / 2 = 1.42189..<br>
( 1.42189..+ 2/1.42189..) / 2 = 1.41423..<br>
….<br>
<img src="https://lixin-ee.github.io//post-images/1571745994223.png" alt=""><br>
这种算法的原理很简单，我们仅仅是不断用 (x, f(x))(x,f(x)) 的切线来逼近方程 x^2-a=0 的根。根号 aa 实际上就是 x^2-a=0 的一个正实根，这个函数的导数是 2x2x。也就是说，函数上任一点 (x,f(x)) 处的切线斜率是 2x2x。那么，x-f(x)/(2x) 就是一个比 x 更接近的近似值。代入 f(x)=x^2-a得到 x-(x^2-a)/(2x)，也就是 (x+a/x)/2。<br>
同样的方法可以用在其它的近似值计算中。Quake III 的源码中有一段非常牛B的开方取倒函数。<br>
知道方程实现就非常简单了。<br>
我用了递归</p>
<pre><code>class Solution {
    int s;
    
 public int mySqrt(int x) {
     s=x;
     if(x==0) return 0;
    return ((int)(sqrts(x)));
  }
    
    public double sqrts(double x){
      double res = (x + s / x) / 2;
    if (res == x) {
      return x;
    } else {
      return sqrts(res);
    }
    } 
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 29. 两数相除 难度：中等]]></title>
        <id>https://lixin-ee.github.io//post/math-29-liang-shu-xiang-chu-nan-du-zhong-deng</id>
        <link href="https://lixin-ee.github.io//post/math-29-liang-shu-xiang-chu-nan-du-zhong-deng">
        </link>
        <updated>2019-10-21T12:13:15.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。<br>
返回被除数 dividend 除以除数 divisor 得到的商。</p>
<p>示例 1:<br>
输入: dividend = 10, divisor = 3<br>
输出: 3<br>
示例 2:<br>
输入: dividend = 7, divisor = -3<br>
输出: -2<br>
说明:</p>
<p>被除数和除数均为 32 位有符号整数。<br>
除数不为 0。<br>
假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。本题中，如果除法结果溢出，则返回 2^31 − 1。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/divide-two-integers<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>难点和要点：<br>
1.如何实现除法并且不超时<br>
2.溢出的处理，主要在于-2^31除以-1的问题<br>
我的思路<br>
1.暴力法 或者 模仿传统的竖式除法，但是后者我没有想到应该如何进行从左往右提取数字（不能使用除法）<br>
2.关于溢出的处理，我的想法是设置int标志位，将被除数和除数都化为负数，此时只需要对-2^31除以-1进行特殊判断，然后最后根据int标志位来对结果取负。</p>
<p>暴力法代码：</p>
<pre><code>class Solution {
public:
    int divide(int dividend, int divisor) {
        int flag=0;
        if(dividend&gt;0){
            dividend=-dividend;
            ++flag;
        }
        if(divisor&gt;0){ divisor=-divisor; ++flag; }
        int res=0;
        while(dividend&lt;=divisor){
            dividend-=divisor;
            if(res==INT_MAX){
                if(flag==0)
                    return INT_MAX;
                else
                    return INT_MIN;
            }
            ++res;
        }
        if(flag==1)
            return -res;
        return res;
    }
};
</code></pre>
<p>最后暴力法还是白给了，2^32除以1超时了</p>
<p>所以直接看下网友题解：<br>
<img src="https://lixin-ee.github.io//post-images/1571663112931.png" alt=""><br>
代码：</p>
<pre><code>def divide(self, dividend: int, divisor: int) -&gt; int:
    sign = (dividend &gt; 0) ^ (divisor &gt; 0)
    dividend = abs(dividend)
    divisor = abs(divisor)
    count = 0
    #把除数不断左移，直到它大于被除数
    while dividend &gt;= divisor:
        count += 1
        divisor &lt;&lt;= 1
    result = 0
    while count &gt; 0:
        count -= 1
        divisor &gt;&gt;= 1
        if divisor &lt;= dividend:
            result += 1 &lt;&lt; count #这里的移位运算是把二进制（第count+1位上的1）转换为十进制
            dividend -= divisor
    if sign: result = -result
    return result if -(1&lt;&lt;31) &lt;= result &lt;= (1&lt;&lt;31)-1 else (1&lt;&lt;31)-1 
</code></pre>
<blockquote>
<p>题解二：<br>
直接举个例子如果被除数 15，除数 3，用我们上面的方法要遍历 5 次。<br>
接下来，我们使用不断 增倍除数<br>
比如：<br>
被除数 除数<br>
15 3<br>
12 6<br>
6 12<br>
发现除数 大于 被除数大，再重现开始<br>
6 3<br>
...<br>
3 3<br>
虽然这个例子遍历次数相等，对于较大的数，可以减少时间复杂度。</p>
</blockquote>
<pre><code>class Solution {
    public int divide(int dividend, int divisor) {
        int sign = (dividend ^ divisor) &gt;&gt; 31;
        long lDividend = Math.abs((long) dividend);
        long lDivisor = Math.abs((long) divisor);
        long res = 0;
        while (lDividend &gt;= lDivisor){
            long tmp = lDivisor;
            long i = 1;
            while (lDividend &gt;= tmp){
                lDividend -= tmp;
                res += i;
                i &lt;&lt;= 1;
                tmp &lt;&lt;= 1;
            }
        }
        if (sign == -1) res *= -1;
        if (res &lt; Integer.MIN_VALUE) return Integer.MIN_VALUE;
        else if (res &gt; Integer.MAX_VALUE) return Integer.MAX_VALUE;
        return (int)res;
        
    }
}
</code></pre>
<p>注意本题被系统归纳为二分查找类别，其实题解二算是一个二分查找法的逆向思维，二分查找法是从大值不断划分到1，逆向则是不断递增到大值。</p>
<pre><code>class Solution {
    public int divide(int dividend, int divisor) {
        /** 除数为零就返回-1 按照测试样例的要求写的*/
        if (divisor==0)
            return -1;
        if (dividend==0)
            return 0;
        /** -2147483648, -1 这个测试样例的确没想到，结果翻车了*/
        if (dividend==Integer.MIN_VALUE &amp;&amp; divisor==-1)
            return Integer.MAX_VALUE;
        /** 符号位的处理参考了大佬的异或处理方法*/
        boolean negetive= (dividend^ divisor)&lt;0;
        /** div_count 是当前divisor_tmp相对于divisor的倍数 */
        int res=0, div_count=1;
        /** 因为值溢出之后边界问题处理太繁琐了，直接将数值转为long省去麻烦 */
        long dividend_tmp= Math.abs((long)dividend);
        long divisor_tmp= Math.abs((long)divisor);
        
        /** 按标准的二分查找代码模板写的 */
        while (dividend_tmp&gt;= divisor_tmp) {
            dividend_tmp-= divisor_tmp;
            res+= div_count;
            
            if (dividend_tmp&lt; Math.abs(divisor))
                break;
            
            /** divisor_tmp无法倍增时，就将其初始化为divisor绝对值，重新开始下一轮倍增*/
            if (dividend_tmp- divisor_tmp&lt; divisor_tmp) {
                divisor_tmp= Math.abs(divisor);
                div_count=1;
                continue;
            } 
            
            /** 不断倍增divisor_tmp直到和dividend_tmp一样大*/
            divisor_tmp+= divisor_tmp;
            div_count+= div_count;
        }
        return negetive? 0-res: res;
    }
}
</code></pre>
<p>然后上述题解都是受边界问题影响，用long之类的其实是不合理的，我的改用负数计算反而还不错，题解中也有类似的</p>
<pre><code>class Solution {
    public int divide(int dividend, int divisor) {
        boolean sign = (dividend &gt; 0) ^ (divisor &gt; 0);
        int result = 0;
        if(dividend&gt;0) {
            dividend = -dividend;
        }
        if(divisor&gt;0) divisor = -divisor;
        while(dividend &lt;= divisor) {
            int temp_result = -1;
            int temp_divisor = divisor;
            while(dividend &lt;= (temp_divisor &lt;&lt; 1)) {
                if(temp_divisor &lt;= (Integer.MIN_VALUE &gt;&gt; 1))break;
                temp_result = temp_result &lt;&lt; 1;
                temp_divisor = temp_divisor &lt;&lt; 1;
            }
            dividend = dividend - temp_divisor;
            result += temp_result;
        }
        if(!sign) {
            if(result &lt;= Integer.MIN_VALUE) return Integer.MAX_VALUE;
            result = - result;
        }
        return result;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ primer 第十三章 笔记+习题 13.1-13.2]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-shi-san-zhang-bi-ji-xi-ti-131-132</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-shi-san-zhang-bi-ji-xi-ti-131-132">
        </link>
        <updated>2019-10-20T11:27:11.000Z</updated>
        <content type="html"><![CDATA[<p>13拷贝控制<br>
一个类包含几个基本操作：拷贝、移动、赋值和销毁，类定义了五个特殊的成员函数来控制这些操作：拷贝构造函数、拷贝赋值运算符、移动构造函数、移动赋值运算符和析构函数。其中构造函数定义了当用同类型的另一个对象初始化本对象时做什么，赋值运算符定义了将一个对象赋予同类型的另一个对象时做什么。析构函数定义了当此类型对象销毁时做什么。我们称这些操作为拷贝控制操作<br>
如果没有主动定义所有这些拷贝控制成员，编译器会自动为它定义缺失的操作</p>
<p>13.1拷贝、赋值与销毁<br>
13.1.1拷贝构造函数<br>
如果一个构造函数的第一个参数是自身类类型的引用，且<strong>任何额外参数都有默认值</strong>，则此构造函数是拷贝构造函数<br>
拷贝构造函数的<strong>第一个参数必须是一个引用类型</strong>，并且此参数几乎总是一个<strong>const的引用</strong><br>
拷贝构造函数在几种情况下都会被隐式地使用，因此拷贝构造函数通常<strong>不是explicit的</strong>（形参不可进行类型转换）<br>
一般情况下，合成的拷贝构造函数会将其参数的成员逐个拷贝到正在创建的对象中。对于某些类来说，合成拷贝构造函数用来<strong>阻止拷贝</strong>该类类型的对象<br>
每个成员的类型决定了它如何拷贝：类类型用自身的拷贝构造函数，内置类型的成员直接拷贝，<strong>数组无法直接拷贝</strong>，需要通过合成的拷贝构造函数逐个元素地拷贝<br>
当使用<strong>直接初始化</strong>时，我们实际上是要求编译器使用普通的函数匹配来选择与我们提供的参数<strong>最匹配的构造函数</strong>。<br>
而当我们使用<strong>拷贝初始化</strong>时，我们要求编译器将右侧运算对象拷贝到正在创建的对象中，如果需要的话还要进行类型转换<br>
<strong>拷贝初始化通常使用拷贝构造函数来完成</strong>，如果一个类有一个移动构造函数，则拷贝初始化有时会使用移动构造函数而非拷贝构造函数来完成<br>
部分类类型还会对它们所分配的对象使用拷贝初始化。比如标准库容器的初始化会调用<strong>insert或push成员</strong>，此时会使用<strong>拷贝初始化</strong>，与之相对的是<strong>emplace会使用直接初始化</strong><br>
在函数调用过程中，具有<strong>非引用类型的参数要进行拷贝初始化</strong><br>
拷贝构造函数被用来初始化非引用类类型参数，这一特性<strong>解释了为什么拷贝构造函数自己的参数必须是引用类型</strong>，如果参数不是引用类型，则调用永远也不会成功：因为如果参数不是引用类型的话，为了调用拷贝构造函数，我们必须拷贝它的实参，为了拷贝实参又需要调用拷贝构造函数，导致<strong>进入无限调用自身的死循环</strong><br>
当传递一个实参或从函数返回一个值时，我们不能隐式使用一个explicit构造函数（比如shared_ptr）<br>
在拷贝初始化过程中，编译器可以跳过拷贝/移动构造函数，直接创建对象</p>
<p>习题13.1<br>
如果一个构造函数的第一个参数时自身类类型的引用，且任何额外的参数都有默认值，则为拷贝构造函数。拷贝构造函数用于拷贝初始化。<br>
习题13.2<br>
拷贝构造函数的第一个参数不是引用类型，如果参数不是引用类型，则调用永远也不会成功：因为如果参数不是引用类型的话，为了调用拷贝构造函数，我们必须拷贝它的实参，为了拷贝实参又需要调用拷贝构造函数，导致<strong>进入无限调用自身的死循环</strong><br>
习题13.3<br>
StrBlob 需要拷贝 data这个智能指针，将会使引用计数+1，<br>
StrBlobPtr 需要拷贝1.wptr 弱指针复制不影响计数器 2.curr<br>
习题13.4<br>
1 point形参的拷贝<br>
2 local的初始化 和heap的初始化都用了拷贝构造函数<br>
3 point类型数组的花括号列表初始化<br>
4.返回类型的拷贝<br>
要点：heap的初始化虽然是直接初始化，当使用<strong>直接初始化</strong>时，我们实际上是要求编译器使用普通的函数匹配来选择与我们提供的参数<strong>最匹配的构造函数</strong>。<br>
习题13.5<br>
<code>HasPtr(const HasPtr &amp;hp) :ps(new string(*hp.ps))，i(hp.i){}</code></p>
<p>13.1.2拷贝赋值运算符<br>
与拷贝构造函数一样，如果拷贝赋值运算符<strong>未定义</strong>的话，编译器会为该类<strong>生成一个合成拷贝赋值运算符</strong><br>
<strong>重载运算符</strong>本质上是一个<strong>函数</strong>，其名字由operator关键字后接表示要定义的运算符的符号组成，比如赋值运算符就是一个名为operator=的函数<br>
重载运算符的参数表示运算符的运算对象，某些运算符包括赋值运算符都<strong>必须定义为成员函数</strong>，对于一个二元运算符，其<strong>左侧运算对象绑定到隐式的this参数</strong>，右侧运算对象作为显式参数传递<br>
非成员函数和成员函数的区别：成员函数有一个隐式的this参数可供调用。<br>
拷贝赋值运算符接受一个与其所在类<strong>相同类型</strong>的参数<br>
赋值运算符通常<strong>返回一个指向其左侧运算对象的引用</strong></p>
<p>习题13.6<br>
拷贝复制运算符，其实就是一个名为 operator= 的重载函数(operator后加表示要定义的运算符的符号)，重载运算符，有返回类型和参数，返回类型通常是左侧运算符的引用<br>
合成的拷贝赋值运算符将右侧运算对象的每个非static成员赋予左侧运算对象的对应成员（对于数组类型的成员，则逐个赋值数组元素），如果一个类未定义自己的拷贝赋值运算符或者希望进制该类型对象的赋值，就会生成一个合成拷贝赋值运算符。<br>
习题13.7<br>
StrBlob 需要拷贝 data这个智能指针，原指针值引用计数-1 新指针值引用计数+1，<br>
StrBlobPtr 需要拷贝1.wptr 弱指针复制不影响计数器 2.curr<br>
习题13.8<br>
<code>HasPtr &amp;operator=(const HasPtr &amp;hp){ 		string *s = new string(*hp.ps); 		delete ps; 		*ps = *s; 		delete s; 		i = hp.i; 		return *this; 	}</code><br>
记得要delete动态内存ps 和s</p>
<p>13.1.3析构函数<br>
析构函数释放对象使用的资源，并销毁对象的<strong>非static对象</strong><br>
析构函数是类的一个成员函数，名字由<strong>波浪号接类名</strong>构成，它<strong>没有返回值，也不接受参数</strong><br>
由于析构函数不接受参数，所以它<strong>不能被重载</strong>，一个特定的类只有唯一一个析构函数<br>
析构函数包含一个函数体和一个析构部分，<strong>首先执行函数体</strong>，然后销毁成员，成员<strong>按初始化顺序的逆序销毁</strong><br>
析构函数的<strong>函数体</strong>主要用于执行类设计者的<strong>收尾工作</strong><br>
<strong>析构部分是隐式的</strong>，与函数体无关，在执行析构函数体后再进行销毁操作。成员销毁时发生什么完全依赖于成员的类型，销毁类类型的成员需要执行成员自己的析构函数，<strong>内置类型没有析构函数</strong>，因此销毁内置类型成员什么也不需要<br>
<strong>隐式销毁一个内置指针类型的成员不会delete它所指向的对象</strong><br>
<strong>与普通指针不同，智能指针是类类型，所以具有析构函数</strong></p>
<p>当指向一个对象的<strong>引用或指针离开作用域，析构函数不会执行</strong><br>
编译器会自动定义一个合成析构函数</p>
<p>习题13.9<br>
析构函数是类的一个成员函数，名字由波浪号接类名构成，它没有返回值，也不接受参数。合成析构函数用来析构类的非static对象或者阻止该类型的对象被销毁，当一个类未定义自己的析构函数时编译器就会为它定义一个合成析构函数<br>
习题13.10<br>
StrBlob 需要将data这个智能指针的原指针值引用计数-1 ，如果引用数为0，调用智能指针类的析构函数<br>
StrBlobPtr 需要1.调用wptr的析构函数 弱指针删除不影响计数器 2.销毁内置类型对象curr<br>
习题13.11<br>
<code>~HasPtr() { delete ps; }</code><br>
习题13.12<br>
三次 item1，item2和accum<br>
知识点：当指向一个对象的引用或者指针离开作用域，析构函数并不会执行<br>
习题13.13</p>
<pre><code>struct X {
public:
	X(int i):val(i){ cout &lt;&lt; &quot;fisrt&quot; &lt;&lt; endl; }
	X(const X&amp; xi) :val(xi.val) { cout &lt;&lt; &quot;second&quot; &lt;&lt; endl; }
	X &amp;operator=(const X&amp; xi) { val = xi.val; cout &lt;&lt; &quot;third&quot; &lt;&lt; endl;};
	~X()
	{
		cout&lt;&lt; val &lt;&lt; &quot; yao mo de le!&quot; &lt;&lt; endl;
	}
	int val;
};

void print_cp(X x) {
	cout &lt;&lt; x.val &lt;&lt; endl;
}

void print_ref(X&amp; x) {
	cout &lt;&lt; x.val &lt;&lt; endl;
}

void test() {
	X x(10);
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	print_cp(x);
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	print_ref(x);
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	X *xp = new X(5);
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	delete xp;
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	vector&lt;X&gt; xv1(1,x);
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	vector&lt;X&gt; xv2{ x };
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
}

int main()
{
	test();
}
</code></pre>
<p>输出结果为<br>
<img src="https://lixin-ee.github.io//post-images/1571578562038.png" alt=""><br>
其中比较有意思的结果为：<br>
1.当使用<strong>直接初始化</strong>时，我们实际上是要求编译器使用普通的函数匹配来选择与我们提供的参数<strong>最匹配的构造函数</strong>。<br>
所以new表达式用的是默认构造函数而不是拷贝构造函数、然后vector的都是使用拷贝构造函数<br>
2.<br>
vector使用花括号里列表初始化时，还需要进行一次临时对象的拷贝构造函数，再对元素进行拷贝构造函数，所以一共使用了两次，然后初始化完了临时对象立即被销毁。<br>
注意 拷贝构造函数的参数必须是const 引用</p>
<p>13.1.4三/五法则<br>
在三个基本操作可以控制类的拷贝操作：拷贝构造函数、拷贝赋值运算符和析构函数<br>
<strong>如果这个类需要一个析构函数，我们几乎可以肯定它也需要一个拷贝构造函数和一个拷贝赋值运算符</strong><br>
例子：如果一个类需要在构造函数中分配动态内存，但自动合成的析构函数无法delete一个指针数据成员，所以需要定义一个析构函数来释放构造函数分配的内存。此时如果使用合成的拷贝构造函数和拷贝赋值运算符，这些函数简单拷贝指针成员，这意味着该类可能有多个对象指向相同的内存。<br>
所以如果一个类需要自定义析构函数，几乎可以肯定它也需要自定义拷贝赋值运算符和拷贝构造函数。同时需要拷贝构造函数就几乎可以肯定其需要拷贝赋值运算符，但例外地，<strong>需要拷贝构造函数或需要拷贝赋值运算符时，却不一定需要析构函数</strong></p>
<p>习题13.14<br>
将会输出相同的序号，因为合成拷贝构造函数只会复制mysn、<br>
习题13.15<br>
会，因为定义了拷贝构造函数后将不会使用合成的拷贝构造函数，但是由于函数的参数是非引用类型，所以新的输出结果中就会输出与拷贝构造也不同的序号（两次变更，连a都不同了）<br>
注意：不要忘记形参拷贝的拷贝构造<br>
习题13.16<br>
输出abc的唯一序号<br>
习题13.17</p>
<pre><code>int main()
{
	numbered a(10);
	numbered b = a, c = b;
	f(a), f(b), f(c);
}
</code></pre>
<ol>
<li></li>
</ol>
<pre><code>class numbered {
public:
	numbered(int i):mysn(i){}
	int mysn;
};

void f(numbered s) { cout &lt;&lt; s.mysn &lt;&lt; endl; }
</code></pre>
<p>输出 10 10 10<br>
2.</p>
<pre><code>class numbered {
public:
	numbered(int i):mysn(i){}
	numbered(const numbered &amp;n) :mysn(n.mysn) { ++mysn;}
	int mysn;
};

void f(numbered s) { cout &lt;&lt; s.mysn &lt;&lt; endl; }
</code></pre>
<p>输出11 12 13<br>
3.</p>
<pre><code>class numbered {
public:
	numbered(int i):mysn(i){}
	numbered(const numbered &amp;n) :mysn(n.mysn) { ++mysn;}
	int mysn;
};

void f(numbered &amp;s) { cout &lt;&lt; s.mysn &lt;&lt; endl; }
</code></pre>
<p>输出 10 11 12<br>
注意：不要忘记形参拷贝的拷贝构造</p>
<p>13.1.5使用=default<br>
我们可以通过将拷贝控制成员<strong>定义为=default来显式地要求编译器生成合成的版本</strong><br>
当我们使用=default时，合成的成员函数会<strong>隐式地声明为内联函数</strong>，如果不希望其定义为内联，则应该只在成员的<strong>类外定义使用=default</strong></p>
<p>我们只能对具有合成版本的成员函数使用=default（<strong>即默认构造函数或拷贝控制成员</strong>）</p>
<p>13.1.6阻止拷贝<br>
（大多数类还是应该定义默认构造函数、拷贝构造函数和拷贝赋值运算符，无论是隐式地还是显式地）<br>
对于<strong>某些类来说拷贝构造和拷贝赋值是不合理的，比如iostream不应该拷贝</strong>，以避免多个对象写入或读取相同的IO缓冲<br>
在新标准下，我们可以通过将拷贝构造函数和拷贝赋值运算符<strong>定义为删除的函数 来阻止拷贝</strong><br>
删除的函数：虽然声明了它，但是<strong>不能以任何的方式使用它</strong>，在函数的参数列表后面加上=delete来指出我们希望将其定义为删除的<br>
与=default不同，<strong>=delete必须出现在函数第一次声明的时候</strong>，另外我们可以<strong>对任何函数指定=delete</strong>，但=default只能用于合成的默认构造函数或拷贝控制成员<br>
但注意，<strong>析构函数可以使用=delete，但不应该使用，否则就无法销毁此类型的对象了。</strong><br>
对于一个删除了析构函数的类型（或者一个类有某个成员的类型删除了析构函数），编译器将<strong>不允许定义</strong>该类型的变量或临时对象<br>
对于删除了析构函数的类型，我们不能定义变量或成员，但可以<strong>动态分配这种类型的对象，但同时也不能释放这些对象</strong></p>
<p>这些规则的含义是，<strong>如果类有不能默认构造、拷贝、复制或销毁的数据成员，则对应的成员函数将被定义为删除的</strong></p>
<p>本质上，当不可能拷贝、赋值或销毁类的成员时，类的合成拷贝控制成员就被定义删除的<br>
在新标准发布前，类是通过将其拷贝构造函数和拷贝赋值运算符声明为private来阻止拷贝的<br>
声明但不定义一个成员函数是合法的，通过声明但不定义的private的拷贝构造函数，我们可以预先阻止任何拷贝该类型的企图，因为任何拷贝操作都会在编译阶段标记为错误的<br>
但在新标准下，应该使用=delete而不是声明为private</p>
<p>习题13.18</p>
<pre><code>class Employee {
public:
	Employee() { num = ++s_num; };
	Employee(string n) :name(n),num(++s_num) {}
	string name;
	int num;
	static int s_num;
};

int Employee::s_num = 0;
</code></pre>
<p>类的static成员一般都得在类外定义，并且需要加上类名作用域符号</p>
<p>习题3.19<br>
不需要拷贝构造函数，因为我们希望保证雇员的对象是唯一的，不应该出现多个证号相同的对象</p>
<pre><code>class Employee {
public:
	Employee() { num = ++s_num; };
	Employee(string n) :name(n),num(++s_num) {}
	Employee(const Employee &amp;) = delete;
	Employee&amp; operator=(const Employee &amp;) = delete;
	string name;
	int num;
	static int s_num;
};
</code></pre>
<p>注意，声明为delete或者default是属于一个声明，不需要形参名</p>
<p>习题13.20<br>
只会使用默认合成的拷贝构造函数、拷贝赋值运算符和析构函数<br>
习题13.21<br>
不需要，因为使用了智能指针类和内置类型，这两者都有自己的拷贝控制成员或者位拷贝，不需要额外的操作了。</p>
<p>13.2拷贝控制和资源管理<br>
<strong>管理类外资源的类</strong>必须定义<strong>拷贝控制成员</strong>，所以需要通过析构函数来释放对象所分配的资源（则也需要拷贝构造函数和拷贝赋值运算符）<br>
为了定义这种类，可以定义其拷贝操作，<strong>使类的行为看起来像一个值或者像一个指针</strong>。1.当类的行为<strong>像一个值</strong>时，<strong>拷贝副本和原对象是完全独立的</strong>，改变副本不会对原对象有任何影响，反之亦然。2.当指针的行为<strong>像一个指针</strong>时，则<strong>需要共享状态</strong>，副本和原对象使用相同的底层数据，改变副本也会改变原对象，反之亦然</p>
<p>习题13.22<br>
突然发现就是之前的代码</p>
<pre><code>class HasPtr
{
public:
	HasPtr(const HasPtr &amp;hs) : ps(new string(*hs.ps)), i(hs.i) {};
	~HasPtr() { delete ps; }
	HasPtr(const string &amp;s=string()):ps(new string(s)),i(0){}
	HasPtr &amp;operator=(const HasPtr &amp;hp) {
		string *s = new string(*hp.ps);
		delete ps;
		*ps = *s;
		delete s;
		i = hp.i;
		return *this;
	}
private:
	string *ps;
	int i;
};
</code></pre>
<p>13.2.1行为像一个值的类<br>
<strong>赋值运算符通常组合了析构函数和构造函数的操作</strong>。类似析构函数，赋值操作会<strong>销毁左侧运算对象的资源</strong>。类似拷贝构造函数，赋值操作会从右侧运算对象拷贝数据。<br>
拷贝赋值操作必须保证以正确的顺序运行，<strong>即使将一个对象赋予它自身，也能保证正确</strong>。所以必须保证赋值运算符是异常下安全的，即使异常发生时也能将左侧运算对象置于一个有意义的状态：！！所以<strong>在销毁左侧运算对象之前先拷贝右侧运算对象</strong></p>
<p>习题13.23<br>
没有差异hhhh，很神奇地我先拷贝了	<code>string *s = new string(*hp.ps);</code>然后再执行了<code>delete ps;</code>，符合在销毁左侧运算对象之前先拷贝右侧运算对象<br>
习题13.24<br>
未定义析构函数：ps属于动态内存指针，没有显式delete的话就会导致内存泄漏<br>
未定义拷贝构造函数：默认拷贝构造函数会复制指针值，容易造成空悬指针的现象<br>
习题13.25<br>
拷贝操作需要重新定义一个shared_ptr，而不是拷贝原来的shared_ptr，然后因为使用了智能指针类，它有自己的析构函数，所以不需要定义析构函数<br>
习题13.26</p>
<pre><code>class StrBlob {
	friend class StrBlobPtr;
public:

	StrBlob() :data(make_shared&lt;vector&lt;string&gt;&gt;()) {};
	StrBlob(initializer_list&lt;string&gt; i1) :data(make_shared&lt;vector&lt;string&gt;&gt;(i1)) {};
	StrBlob(const StrBlob &amp;sb):data(make_shared&lt;vector&lt;string&gt;&gt;(*sb.data)) {};
	StrBlob&amp; operator=(const StrBlob &amp;sb) {
		data = make_shared&lt;vector&lt;string&gt;&gt;(*sb.data);
	}
private:
	shared_ptr&lt;vector&lt;string&gt;&gt; data;
};
</code></pre>
<p>暂时只发现了这种比较暴力的share_ptr复制方法，不知道有没有更方便的一点的库函数复制方法。</p>
<p>13.2.2定义行为像指针的类<br>
我们需要为行为像指针的类定义拷贝构造函数和拷贝赋值运算符，来<strong>拷贝指针成员本身而不是它指向的对象</strong><br>
令一个类展现类似指针的行为的最好方法是<strong>使用shared_ptr来管理类中的资源</strong></p>
<p>需要<strong>将计数器保存在动态内存中</strong>，1.当创建一个对象时，我们也分配一个新的计数器。2.当拷贝或赋值对象时，我们拷贝指向计数器的指针，使得副本和原对象指向相同的计数器<br>
析构函数不能无条件地delete数据成员，因为可能还有其他对象指向这块内存，<strong>析构函数应该先递减引用计数</strong>，如果计数器变为0，则析构函数释放相应的数据成员指向的内存（先递减再检测）<br>
拷贝赋值运算符需要<strong>递增右侧</strong>运算对象的引用计数（拷贝构造函数的工作），<strong>递减左侧</strong>运算对象的引用计数，在必要时释放使用的内存（析构函数的工作）</p>
<p>习题13.27</p>
<pre><code>class HasPtr {
public:
	HasPtr(const string &amp;s=string()):ps(new string(s)),i(0),use(new size_t(1)){}
	HasPtr(const HasPtr &amp;p) :ps(p.ps), i(p.i), use(p.use) { ++*use; }
	HasPtr&amp; operator=(const HasPtr&amp;);
	~HasPtr();
private:
	string *ps;
	int i;
	size_t *use;
};

HasPtr::~HasPtr() {
	if (--*use == 0) {
		delete ps;
		delete use;
	}
}

HasPtr&amp; HasPtr::operator=(const HasPtr &amp;rhs) {
	++*rhs.use;   //递增右侧计数
	if (--*use == 0) {   //递减左侧计数（思考此处如何保证自我复制的正确）
		delete ps;
		delete use;
	}
	ps = rhs.ps;
	i = rhs.i;
	use = rhs.use;
	return *this;
}
</code></pre>
<p>编写拷贝赋值运算符的时候应该时刻思考此处如何保证自我复制的正确<br>
习题13.28</p>
<pre><code>class TreeNode {
public:
	TreeNode(const string &amp;s=string()) : value(s), count(new int(1)), left(nullptr), right(nullptr) { }
	TreeNode(const TreeNode &amp;rhs) : value(rhs.value), count(rhs.count), left(rhs.left), right(rhs.right) { ++*count; }
	TreeNode&amp; operator=(const TreeNode &amp;rhs);
	~TreeNode() {
		if (--*count == 0) {
			delete left;
			delete right;
			delete count;
		}
	}

private:
	std::string value;
	int         *count;
	TreeNode    *left;
	TreeNode    *right;
};

TreeNode&amp; TreeNode::operator=(const TreeNode &amp;rhs)
{
	++*rhs.count;
	if (--*count == 0) {
		delete left;
		delete right;
		delete count;
	}
	value = rhs.value;
	left = rhs.left;
	right = rhs.right;
	count = rhs.count;
	return *this;
}

class BinStrTree {
public:
	BinStrTree() : root(new TreeNode()) { }
	BinStrTree(const BinStrTree &amp;bst) : root(new TreeNode(*bst.root)) { }
	BinStrTree&amp; operator=(const BinStrTree &amp;bst);
	~BinStrTree() { delete root; }

private:
	TreeNode *root;
};

BinStrTree&amp; BinStrTree::operator=(const BinStrTree &amp;bst)
{
	TreeNode *new_root = new TreeNode(*bst.root);
	delete root;
	root = new_root;
	return *this;
}
</code></pre>
<p>注意!!!题目有错，count应该为int * 否则复制起来没意义的<br>
然后注意树的根节点应该用像值一样的类，因为树的根节点不应该被多个对象共享</p>
<p>习题感悟<br>
习题13.5<code>HasPtr(const HasPtr &amp;hp) :ps(new string(*hp.ps))，i(hp.i){}</code><br>
习题13.8<br>
<code>HasPtr &amp;operator=(const HasPtr &amp;hp){ 		string *s = new string(*hp.ps); 		delete ps; 		*ps = *s; 		delete s; 		i = hp.i; 		return *this; 	}</code>记得要delete动态内存ps 和s<br>
习题13.11<br>
<code>~HasPtr() { delete ps; }</code><br>
当指向一个对象的引用或者指针离开作用域，析构函数并不会执行<br>
当使用<strong>直接初始化</strong>时，我们实际上是要求编译器使用普通的函数匹配来选择与我们提供的参数<strong>最匹配的构造函数</strong>。<br>
注意 拷贝构造函数的参数必须是const 引用<br>
不要忘记形参拷贝和花括号初始化的拷贝构造<br>
vector使用花括号里列表初始化时，还需要进行一次临时对象的拷贝构造函数，再对元素进行拷贝构造函数，所以一共使用了两次，然后初始化完了临时对象立即被销毁。<br>
类的static成员一般都得在类外定义，并且需要加上类名作用域符号<br>
声明为delete或者default是属于一个声明，不需要形参名<br>
即使将一个对象赋予它自身，也能保证正确，所以<strong>在销毁左侧运算对象之前先拷贝右侧运算对象</strong><br>
编写拷贝赋值运算符的时候应该时刻思考此处如何保证自我复制的正确</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 415. 字符串相加 难度：简单]]></title>
        <id>https://lixin-ee.github.io//post/math-415-zi-fu-chuan-xiang-jia-nan-du-jian-dan</id>
        <link href="https://lixin-ee.github.io//post/math-415-zi-fu-chuan-xiang-jia-nan-du-jian-dan">
        </link>
        <updated>2019-10-20T11:04:32.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。</p>
<p>注意：<br>
num1 和num2 的长度都小于 5100.<br>
num1 和num2 都只包含数字 0-9.<br>
num1 和num2 都不包含任何前导零。<br>
你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/add-strings<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>要点难点：<br>
1.进位问题，因为不可以直接转化为整数，所以必须使用变量保存一个进位标志<br>
2.两数不等位<br>
3.需要在最前面补位<br>
我的思路<br>
因为这道题其实和前面的二进制相加非常像，不过这一次不能用异或代替相加，必须用ASCII的可加性来做，所以主要思路如下<br>
1.使用int值而不是bool值来表示进位（其实bool值也可以的，但是int值更加直观吧）<br>
2.补位，简单粗暴hhh（但是在后面的网友题解中可以看到更加优雅的解决方法）<br>
3.判断进位变量从而直接在前面补位</p>
<p>最终代码如下：</p>
<pre><code>class Solution {
public:
    string addStrings(string num1, string num2) {
       int len1=num1.size(),len2=num2.size();
        int len=len1-len2;
        if(len&gt;0)
            while(len)
                num2=&quot;0&quot;+num2,--len;
        else
            while(len)
                num1=&quot;0&quot;+num1,++len;
        len=num1.size();
        string res(len,'0');
        int flag=0;
        int temp=0;
        for(int i=len-1;i&gt;=0;--i){
            temp=(num1[i]-'0')+(num2[i]-'0')+flag;
            if(temp/10)
                flag=1;
            else
                flag=0;
            res[i]+=temp%10;
}
        if(flag)
            res=&quot;1&quot;+res;
        return res;
            
    }
};
</code></pre>
<p>然后来看一下网友题解：</p>
<blockquote>
<p>解题思路：<br>
算法流程： 设定 i，j 两指针分别指向 num1，num2 尾部，模拟人工加法；<br>
计算进位： 计算 carry = tmp // 10，代表当前位相加是否产生进位；<br>
添加当前位： 计算 tmp = n1 + n2 + carry，并将当前位 tmp % 10 添加至 res 头部；<br>
索引溢出处理： 当指针 i或j 走过数字首部后，给 n1，n2 赋值为 00，相当于给 num1，num2 中长度较短的数字前面填 00，以便后续计算。<br>
当遍历完 num1，num2 后跳出循环，并根据 carry 值决定是否在头部添加进位 11，最终返回 res 即可。</p>
<p>复杂度分析：<br>
时间复杂度 O(max(M,N))：其中 M，N 为 2 数字长度，按位遍历一遍数字（以较长的数字为准）；<br>
空间复杂度 O(1)：指针与变量使用常数大小空间。</p>
</blockquote>
<pre><code>class Solution {
    public String addStrings(String num1, String num2) {
        StringBuilder res = new StringBuilder(&quot;&quot;);
        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
        while(i &gt;= 0 || j &gt;= 0){
            int n1 = i &gt;= 0 ? num1.charAt(i) - '0' : 0;
            int n2 = j &gt;= 0 ? num2.charAt(j) - '0' : 0;
            int tmp = n1 + n2 + carry;
            carry = tmp / 10;
            res.append(tmp % 10);
            i--; j--;
        }
        if(carry == 1) res.append(1);
        return res.reverse().toString();
    }
}
</code></pre>
<p>其中比较优雅的就是对于补位的处理，不像我需要直接进行补位，可以在循环过程中就进行补位（通过将值设为0），注意最后有一个reverse的翻转操作。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 43. 字符串相乘 难度：中等]]></title>
        <id>https://lixin-ee.github.io//post/math-43-zi-fu-chuan-xiang-cheng</id>
        <link href="https://lixin-ee.github.io//post/math-43-zi-fu-chuan-xiang-cheng">
        </link>
        <updated>2019-10-20T02:43:23.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p>
<p>示例 1:<br>
输入: num1 = &quot;2&quot;, num2 = &quot;3&quot;<br>
输出: &quot;6&quot;<br>
示例 2:<br>
输入: num1 = &quot;123&quot;, num2 = &quot;456&quot;<br>
输出: &quot;56088&quot;<br>
说明：</p>
<p>num1 和 num2 的长度小于110。<br>
num1 和 num2 只包含数字 0-9。<br>
num1 和 num2 均不以零开头，除非是数字 0 本身。<br>
不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/multiply-strings<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>昨天在医院看了一下没什么思路<br>
主要的难点在于<br>
1.溢出问题，110位，单纯地转化为整数肯定不行的<br>
2.以一个数为标准，对另一个数进行逐位计算的话比较麻烦，也容易有溢出的风险</p>
<p>然后来看一下网友题解</p>
<blockquote>
<p>转载借鉴自 https://leetcode.com/problems/multiply-strings/discuss/17605/Easiest-JAVA-Solution-with-Graph-Explanation<br>
<img src="https://lixin-ee.github.io//post-images/1571540288082.png" alt=""></p>
</blockquote>
<p>这个思路应该是最好的解答了，将两个数都进行逐位计算，然后将影响到的两位进行处理（一开始我想不明白为什么不用考虑res[i+j]的进位，后来才发现主要是后一位有进位，前一位是不用担心进位问题的。）<br>
按照思路实现如下:</p>
<pre><code>class Solution {
public:
    string multiply(string num1, string num2) {
        int len1=num1.size();
        int len2=num2.size();
        string res(len1+len2,'0');
        for(int i=len1-1;i&gt;=0;--i)
            for(int j=len2-1;j&gt;=0;--j){
                int temp=(res[i+j+1]-'0')+(num1[i]-'0')*(num2[j]-'0');
                res[i+j+1]=temp%10+'0';
                res[i+j]+=temp/10;
            }
        int i=0;
        while(i!=len1+len2-1&amp;&amp;res[i]=='0')
            ++i;
        res=res.substr(i,len1+len2-i);
        return res;
    }
};
</code></pre>
<p>剩下的就来看一下普通竖式版的题解吧<br>
方法：普通竖式<br>
<img src="https://lixin-ee.github.io//post-images/1571540602407.png" alt=""><br>
遍历 num2 每一位与 num1 进行相乘，将每一步的结果进行累加。</p>
<p>注意：<br>
num2 除了第一位的其他位与 num1 运算的结果需要补0<br>
计算字符串数字累加其实就是415. 字符串相加</p>
<pre><code>class Solution {
    /**
    * 计算形式
    *    num1
    *  x num2
    *  ------
    *  result
    */
    public String multiply(String num1, String num2) {
        if (num1.equals(&quot;0&quot;) || num2.equals(&quot;0&quot;)) {
            return &quot;0&quot;;
        }
        // 保存计算结果
        String res = &quot;0&quot;;
        
        // num2 逐位与 num1 相乘
        for (int i = num2.length() - 1; i &gt;= 0; i--) {
            int carry = 0;
            // 保存 num2 第i位数字与 num1 相乘的结果
            StringBuilder temp = new StringBuilder();
            // 补 0 
            for (int j = 0; j &lt; num2.length() - 1 - i; j++) {
                temp.append(0);
            }
            int n2 = num2.charAt(i) - '0';
            
            // num2 的第 i 位数字 n2 与 num1 相乘
            for (int j = num1.length() - 1; j &gt;= 0 || carry != 0; j--) {
                int n1 = j &lt; 0 ? 0 : num1.charAt(j) - '0';
                int product = (n1 * n2 + carry) % 10;
                temp.append(product);
                carry = (n1 * n2 + carry) / 10;
            }
            // 将当前结果与新计算的结果求和作为新的结果
            res = addStrings(res, temp.reverse().toString());
        }
        return res;
    }

    /**
     * 对两个字符串数字进行相加，返回字符串形式的和
     */
    public String addStrings(String num1, String num2) {
        StringBuilder builder = new StringBuilder();
        int carry = 0;
        for (int i = num1.length() - 1, j = num2.length() - 1;
             i &gt;= 0 || j &gt;= 0 || carry != 0;
             i--, j--) {
            int x = i &lt; 0 ? 0 : num1.charAt(i) - '0';
            int y = j &lt; 0 ? 0 : num2.charAt(j) - '0';
            int sum = (x + y + carry) % 10;
            builder.append(sum);
            carry = (x + y + carry) / 10;
        }
        return builder.reverse().toString();
    }
}
</code></pre>
<p>复杂度分析<br>
时间复杂度：O(M N)。 M,N分别为 num1 和 num2的长度<br>
空间复杂度：O(M+N)。用于存储计算结果。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 67. 二进制求和]]></title>
        <id>https://lixin-ee.github.io//post/math-67-er-jin-zhi-qiu-he</id>
        <link href="https://lixin-ee.github.io//post/math-67-er-jin-zhi-qiu-he">
        </link>
        <updated>2019-10-19T09:26:29.000Z</updated>
        <content type="html"><![CDATA[<p>难度：简单</p>
<blockquote>
<p>给定两个二进制字符串，返回他们的和（用二进制表示）。<br>
输入为非空字符串且只包含数字 1 和 0。</p>
<p>示例 1:<br>
输入: a = &quot;11&quot;, b = &quot;1&quot;<br>
输出: &quot;100&quot;<br>
示例 2:<br>
输入: a = &quot;1010&quot;, b = &quot;1011&quot;<br>
输出: &quot;10101&quot;</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/add-binary<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>本题的难点在于<br>
1.字符串不等长<br>
2.进位问题，可能会导致两次进位和头部进位<br>
我的解题思路<br>
1.对于难点1我没啥好的思路，只能是判断位数差异在前面补0（后来发现网友题解也没有比较好的解决方法）<br>
2.对于进位问题我本来是想用istringstream来解决的，但是stringstream只能从左到右处理，所以并不适合本次题目的要求。所以最后用了bool变量来标记进位问题<br>
3.对于计算问题有两种，一种是利用ASCII码可加特性，另外一种就是异或了，为了可读性我用判断条件完成伪异或。<br>
最终代码：</p>
<pre><code>class Solution {
public:
    string addBinary(string a, string b) {
        bool flag=false;
        int lendiff=a.size()-b.size();
        if(lendiff&gt;0)
            while(lendiff)
                b=&quot;0&quot;+b,--lendiff;
        else
            while(lendiff)
                a=&quot;0&quot;+a,++lendiff;
        for(int i=a.size()-1;i&gt;=0;--i){
            if(a[i]!=b[i])
                a[i]='1';
            else
                a[i]='0';
            if(flag){
                a[i]=('1'-a[i])+'0';
                if(b[i]=='0'&amp;&amp;a[i]=='1')
                    flag=false;
            }else if(b[i]=='1'&amp;&amp;a[i]=='0')
                    flag=true;     
        }
        if(flag)
            a=&quot;1&quot;+a;
        return a;
    }
};
</code></pre>
<p>比较值得注意的主要是进位判断这一段</p>
<pre><code>            if(flag){
                a[i]=('1'-a[i])+'0';
                if(b[i]=='0'&amp;&amp;a[i]=='1')
                    flag=false;
            }else if(b[i]=='1'&amp;&amp;a[i]=='0')
                    flag=true;     
        }
</code></pre>
<p>首先判断上一次的进位<br>
1.如果上一次有进位，那么a就必须先翻转，然后此时只有一种情况不需要继续进位，那就是一开始两者都为0（注意此时a已经变为1了）<br>
2.如果上一次没有进位，此时只有一种情况需要进位，两者同时为1（同样地此时a已经变为0了）</p>
<p>最后看看网友题解：</p>
<p>解题思路：<br>
二进制求和，满二进一</p>
<blockquote>
<p>首先让两个字符串等长，若不等长，在短的字符串前补零，否则之后的操作会超出索引。<br>
然后从后到前遍历所有的位数，同位相加，这里有一个点，用的是字符相加，利用 ASCII 码，字符在内部都用数字表示，我们不需要知道具体数值，但可知 ‘0’-‘0’ = 0， ‘0’+1=‘1’，以此类推 。字符的加减，大小比较，实际上都是内部数字的加减，大小比较<br>
判断相加后的字符，若大于等于字符 ‘2’，下一位需要进一<br>
第 0 位数的相加在这里是单独处理的，因为它可能涉及到字符的插入（即是否需要在最前面加一位数 ‘1’</p>
</blockquote>
<pre><code>class Solution {
public:
    string addBinary(string a, string b) {
        int al = a.size();
        int bl = b.size();
        while(al &lt; bl) //让两个字符串等长，若不等长，在短的字符串前补零，否则之后的操作会超出索引
        {
            a = '0' + a;
            ++ al;
        }
        while(al &gt; bl)
        {
            b = '0' + b;
            ++ bl;
        }
        for(int j = a.size() - 1; j &gt; 0; -- j) //从后到前遍历所有的位数，同位相加
        {
            a[j] = a[j] - '0' + b[j];
            if(a[j] &gt;=  '2') //若大于等于字符‘2’，需要进一
            {
                a[j] = (a[j] - '0') % 2 + '0';
                a[j-1] = a[j-1] + 1;
            }
        }
        a[0] = a[0] - '0' + b[0]; //将ab的第0位相加
        if(a[0] &gt;= '2') //若大于等于2，需要进一
        {
            a[0] = (a[0] - '0') % 2 + '0';
            a = '1' + a;
        }
        return a;
    }
};

</code></pre>
<p>比较巧妙的是利用了ascii码的加法特性，然后将进位融入到判断中，需要注意的是必须把第一位提取出来进行处理。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 258. 各位相加]]></title>
        <id>https://lixin-ee.github.io//post/math-258-ge-wei-xiang-jia</id>
        <link href="https://lixin-ee.github.io//post/math-258-ge-wei-xiang-jia">
        </link>
        <updated>2019-10-18T02:06:15.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。</p>
<p>示例:<br>
输入: 38<br>
输出: 2<br>
解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。<br>
进阶:<br>
你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/add-digits<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>难点：如何在常数时间复杂度完成<br>
思路：最后还是只想出了暴力法，其实就是判断当前值是否为个位数，如果不是的话就进入循环，循环内依次把10的余数和放到临时变量内，再把临时变量赋给当前值。</p>
<pre><code>class Solution {
public:
    int addDigits(int num) {
        while(num&gt;=10){
            int temp=0;
            while(num&gt;0){
                temp+=num%10;
                num=num/10;
            }
            num=temp;
        }
        return num;
    }
};
</code></pre>
<p>提前预知到常数时间肯定是用了数学思路的了，下面是网友题解<br>
1.</p>
<blockquote>
<p>O(1) 数学推理：设某个数字的字符串表示为'abc'，则这个数字代表a<em>100 + b</em>10 + c，转换后成为a + b + c，可见每次转换相当于把原数字减去a<em>99 + b</em>9 = 9 * (a*11 + b)，可以推出只要高于个位的位置上有数字，算法就会减去一个小于原数字的9的倍数，这就相当于数字 % 9。但9 % 9 = 0，而 9 本身就没有十位，因此需要考虑原数字是 0 或 9 的倍数的特殊情况<br>
首先计算num % 9，若结果为 0 则考虑num本身是否为 0，若不为 0 返回 9</p>
</blockquote>
<ol start="2">
<li></li>
</ol>
<blockquote>
<p>假设一个三位数整数n=100<em>a+10</em>b+c,变化后addn=a+b+c；<br>
两者的差值n-addn=99a+9b，差值可以被9整除，说明每次缩小9的倍数<br>
那么我们可以对res=num%9，若不为0则返回res，为0则返回9</p>
</blockquote>
<blockquote>
<p>class Solution {<br>
public:<br>
int addDigits(int num) {<br>
if(num&gt;9)<br>
{<br>
num=num%9;<br>
if(num==0)<br>
return 9;<br>
}<br>
return num;<br>
}<br>
};</p>
</blockquote>
<p>嗯...我是来码代码的别人是来学数学的hhh</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 8. 字符串转换整数 (atoi)]]></title>
        <id>https://lixin-ee.github.io//post/math-8-zi-fu-chuan-zhuan-huan-zheng-shu-atoi</id>
        <link href="https://lixin-ee.github.io//post/math-8-zi-fu-chuan-zhuan-huan-zheng-shu-atoi">
        </link>
        <updated>2019-10-17T11:58:20.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。<br>
首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。<br>
当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。<br>
该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。<br>
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。<br>
在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>
<p>说明：<br>
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>
<p>示例 1:<br>
输入: &quot;42&quot;<br>
输出: 42<br>
示例 2:<br>
输入: &quot;   -42&quot;<br>
输出: -42<br>
解释: 第一个非空白字符为 '-', 它是一个负号。<br>
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。<br>
示例 3:<br>
输入: &quot;4193 with words&quot;<br>
输出: 4193<br>
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。<br>
示例 4:<br>
输入: &quot;words and 987&quot;<br>
输出: 0<br>
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。<br>
因此无法执行有效的转换。<br>
示例 5:<br>
输入: &quot;-91283472332&quot;<br>
输出: -2147483648<br>
解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。<br>
     因此返回 INT_MIN (−2^31) 。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/string-to-integer-atoi<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题其实也蛮奇葩的，主要的要点或者说难点在于<br>
1.去除前面的所有空格<br>
2.判断第一个非空格字符，如果是加号或者符号的话视为符号，如果是数字的话就开始读入，如果是其他字符的话直接全部木大<br>
3.读取数字进行判断，主要是两个判断 一个是溢出判断 一个是非数字字符的判断<br>
我的思路如下：<br>
1.利用string的find搜索语句，先用.find_fisrt_of，再用.find_fisrt_not_of，但是这种方法耗时比较厉害，而且判断条件特别多，需要对返回值进行判断。<br>
2.使用范围for语句，这个比较理想，但是最后发现会导致for内部的判断条件特别多<br>
3.普通for循环语句，使用一个变量i记录，把空格检测-正负号检测-数字检测分离开来。<br>
最终代码</p>
<pre><code>class Solution {
public:
    int myAtoi(string str) {
        int res=0;
        bool neg=false;
        int i=0;
        for(;i&lt;str.size();++i)
            if(str[i]!=' ')
                break;    
        if(str[i]!='-'&amp;&amp;str[i]!='+'&amp;&amp;((str[i]-'0'&gt;9)||('0'-str[i]&gt;0)))
            return 0;
        if(str[i]=='-'){
            neg=true;
            ++i;
        }else if(str[i]=='+')
            ++i;
        for(;i&lt;str.size();++i){
            if((str[i]-'0'&gt;9)||('0'-str[i]&gt;0))
                break;
            if(neg){
                if(res&gt;INT_MAX/10||(res==INT_MAX/10&amp;&amp;(str[i]-'0')&gt;=8))
                    return -2147483648;
            }else if(res&gt;INT_MAX/10||(res==INT_MAX/10&amp;&amp;(str[i]-'0')&gt;=7))
                  return 2147483647;
            res=res*10+(str[i]-'0');
        }
        if(neg)
            return -res;
        return res;
    }
};
</code></pre>
<p>然后想疯狂吐槽leetcode的用例，比如 +-2 这种情况是不能通过的，所以必须修改一下判断条件<br>
然后看一下题解<br>
正则表达式就没啥好说的了，意义不大<br>
然后就是stringstream，说实话虽然很巧妙，但是其实背后是很多库函数的结果，我觉得有点背离题目的原意了，不过还是贴上来吧</p>
<pre><code>class Solution {
public:
    int myAtoi(string str) {
        while(*str.begin() == ' ') str.erase(str.begin());
        if(str == &quot;&quot;) return 0;
        stringstream ss;
        ss&lt;&lt;str;
        int n;
        ss&gt;&gt;n;
        return n;
    }
};
</code></pre>
]]></content>
    </entry>
</feed>