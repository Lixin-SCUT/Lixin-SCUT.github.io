<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lixin-ee.github.io/</id>
    <title>Lixin-ee</title>
    <updated>2019-12-23T03:12:30.878Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lixin-ee.github.io/"/>
    <link rel="self" href="https://lixin-ee.github.io//atom.xml"/>
    <subtitle>好景在望。</subtitle>
    <logo>https://lixin-ee.github.io//images/avatar.png</logo>
    <icon>https://lixin-ee.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Lixin-ee</rights>
    <entry>
        <title type="html"><![CDATA[二分查找 354. 俄罗斯套娃信封问题[困难]]]></title>
        <id>https://lixin-ee.github.io//post/er-fen-cha-zhao-354-e-luo-si-tao-wa-xin-feng-wen-ti-kun-nan</id>
        <link href="https://lixin-ee.github.io//post/er-fen-cha-zhao-354-e-luo-si-tao-wa-xin-feng-wen-ti-kun-nan">
        </link>
        <updated>2019-12-23T02:18:21.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。<br>
请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。<br>
说明:<br>
不允许旋转信封。<br>
示例:<br>
输入: envelopes = [[5,4],[6,4],[6,7],[2,3]]<br>
输出: 3<br>
解释: 最多信封的个数为 3, 组合为: [2,3] =&gt; [5,4] =&gt; [6,7]。<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/russian-doll-envelopes<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>感觉这道题就可以使用上一次的贪心数组+动态规划方法<br>
但是这道题不要求顺序，比如2，3不需要替换5，4而是可以放在它前面<br>
但是替换还是需要的，比如假设有6，5和6，7 那么6，5明显比6，7更合适<br>
只是这个二维判断条件比较麻烦<br>
首先二分法判断w的位置，然后再判断h是否介于两者之间？发现是不行的，因为h和w本质上没有先后之分，你也可以先比较h再比较w<br>
我也想过比较面积的方法，但是比如 2 1、3 4、4 3、4 5，这种情况怎么去判断4 3 和 3 4 呢？这种情况里面肯定是3 4好于4 3，但是稍微修改一下顺序，怎么去保证贪心算法一定用3 4去替换4 3呢<br>
所以改用动态规划法，将所有元素按面积大小排序，然后就是转化为了300题中的问题，逐个寻找比自己小的信封中可包含的最大值，只不过还需要比较长和宽。<br>
比如1 2 6 4 5 10 ，10会必须把前面的全部找一遍，直至确认6是最大的（值为3）<br>
实现快速排序法下标版发现的问题<br>
1.忘了定义pivotkey，定义后又忘了用来比较pivotkey&lt;=vi[high]<br>
2.先--high再到++low，不小心弄反了<br>
3.下标版可以直接mid-1，因为int等于-1没事，迭代器则不能指向begin之前<br>
4.记得return low;<br>
5.每个while都必须判断low&lt;high，特别是循环中的两个while<br>
最后发现可以修改快速排序法，用面积进行比较排序，而不用额外缔造一个需要映射到原数组的面积vector&lt; int&gt;，因为面积只在比较排序时有用，而在后面的查找中其实是无用的，只需要对比h和w就好<br>
执行用时 :848 ms, 在所有 cpp 提交中击败了36.91%的用户<br>
内存消耗 :15 MB, 在所有 cpp 提交中击败了5.40%的用户<br>
hhh虽然惨不忍睹，不过一次过还是很开心啊，到时候记得看题解</p>
<pre><code>class Solution {
public:
    int maxEnvelopes(vector&lt;vector&lt;int&gt;&gt;&amp; envelopes) {
        if(envelopes.empty()) return 0;
        quicksort(envelopes,0,envelopes.size()-1);
        vector&lt;int&gt; count(envelopes.size(),1);
        int res=1;
        for(int i=0;i&lt;envelopes.size();++i){
            int max_count=1;
            for(int j=0;j&lt;i;++j){
                if(envelopes[i][0]&gt;envelopes[j][0]&amp;&amp;envelopes[i][1]&gt;envelopes[j][1])
                    max_count=max(max_count,count[j]+1);
            }
            count[i]=max_count;
            res=max(res,max_count);
        }

        return res;
    }
    
    void quicksort(vector&lt;vector&lt;int&gt;&gt;&amp;vi,int beg,int end){
        if(beg&lt;end){
            int mid=partition(vi,beg,end);
            quicksort(vi,beg,mid-1);
            quicksort(vi,mid+1,end);
        }
    }
    
    int partition(vector&lt;vector&lt;int&gt;&gt;&amp;vi,int low,int high){
        int pivotkey=vi[low][0]*vi[low][1];
        while(low&lt;high){
            while(low&lt;high&amp;&amp;pivotkey&lt;=vi[high][0]*vi[high][1])
                --high;
            swap(vi[low][0],vi[high][0]);
            swap(vi[low][1],vi[high][1]);
            while(low&lt;high&amp;&amp;vi[low][0]*vi[low][1]&lt;pivotkey)
                ++low;
            swap(vi[low][0],vi[high][0]);
            swap(vi[low][1],vi[high][1]);
        }
        return low;
    }
};
</code></pre>
<p>网友题解中的贪心算法实现非常不错，解决了我当时提出的 4,3、3,4和4,5之间的问题</p>
<blockquote>
<p>先来看一下详解<br>
这道题的解法是比较巧妙的：<br>
先对宽度 w 进行升序排序，如果遇到 w 相同的情况，则按照高度 h 降序排序。之后把所有的 h 作为一个数组，在这个数组上计算 LIS 的长度就是答案。</p>
</blockquote>
<p><img src="https://lixin-ee.github.io//post-images/1577068494381.png" alt=""></p>
<blockquote>
<p>这个子序列就是最优的嵌套方案。<br>
这个解法的关键在于，对于宽度 w 相同的数对，要对其高度 h 进行降序排序。因为两个宽度相同的信封不能相互包含的，逆序排序保证在 w 相同的数对中最多只选取一个。<br>
此算法的时间复杂度为 O(NlogN)，因为排序和计算 LIS 各需要 O(NlogN) 的时间。<br>
空间复杂度为O(N)，因为计算 LIS 的函数中需要一个 top 数组。</p>
</blockquote>
<pre><code>import java.util.Arrays;
import java.util.Comparator;

public class Solution {

    public int maxEnvelopes(int[][] envelopes) {

        int len = envelopes.length;
        if (len &lt; 2) {
            return len;
        }

        Arrays.sort(envelopes, new Comparator&lt;int[]&gt;() {
            @Override
            public int compare(int[] envelope1, int[] envelope2) {
                if (envelope1[0] != envelope2[0]) {
                    return envelope1[0] - envelope2[0];
                }
                return envelope2[1] - envelope1[1];
            }
        });


        int[] tail = new int[len];
        tail[0] = envelopes[0][1];

        // end 表示有序数组 tail 的最后一个已经赋值元素的索引
        int end = 0;

        for (int i = 1; i &lt; len; i++) {
            int target = envelopes[i][1];

            if (target &gt; tail[end]) {
                end++;
                tail[end] = target;
            } else {
                int left = 0;
                int right = end;

                while (left &lt; right) {
                    int mid = (left + right) &gt;&gt;&gt; 1;
                    if (tail[mid] &lt; target) {
                        left = mid + 1;
                    } else {
                        right = mid;
                    }
                }
                tail[left] = target;
            }
        }
        return end + 1;
    }

}

</code></pre>
<p>主要核心就是在宽度相等的时候，让高度不能出现“上升的子序列”。即首先按照宽度“升序排序”，在宽度相等的时候，按照高度“降序排序”，然后最后<strong>宽度排好序</strong>了，只需要对<strong>高度</strong>进行最小递增子序列的计算</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分查找 300.最长上升子序列「中等」「未做出」]]></title>
        <id>https://lixin-ee.github.io//post/er-fen-cha-zhao-300zui-chang-shang-sheng-zi-xu-lie-zhong-deng-wei-zuo-chu</id>
        <link href="https://lixin-ee.github.io//post/er-fen-cha-zhao-300zui-chang-shang-sheng-zi-xu-lie-zhong-deng-wei-zuo-chu">
        </link>
        <updated>2019-12-22T04:18:26.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个无序的整数数组，找到其中最长上升子序列的长度。<br>
示例:<br>
输入: [10,9,2,5,3,7,101,18]<br>
输出: 4<br>
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。<br>
说明:<br>
可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。<br>
你算法的时间复杂度应该为 O(n2) 。<br>
进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/longest-increasing-subsequence<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>我一开始的想法是从后往前，每个数向后寻找【第一个大于】自己的数，找到了就将这个数背负的长度+1，然后我发现可以单独存储一个当前最大数<br>
后来发现这个思路8太行，比如[1,10,9,2,5,3,7,101,18]，第一个1就非得遇到2才行，所以还是必须用额外的数组来存储已经计算了的数组，然后对于一个新数就利用二分法在数组中查找第一个比它大的数，在其基础上将长度+1<br>
在[1,3,6,7,9,4,10,5,6]这个用例错误了，问题出在第一个6中，第一个6的值是1，但是7是3，所以导致第二个6变成了2而不是4，考虑更新已有数字的次数而不是插入新元素，亦即temp中的数字不会重复出现<br>
本来想着是直接temp[first+1].second+1，但是需要解决如果是尾元素的问题，比如[4,5,6]插入6<br>
才发现问题不仅在于6，而是在于3啊，3应该去找6而不是去找5<br>
会不会从前往后更好？或者两个方向各一次？<br>
弃疗弃疗！，两个方向的也不行，明显是方法有问题<br>
幹，看了题解才发现是动态规划+二分查找</p>
<p>错误代码：</p>
<pre><code>class Solution {
public:
     int lengthOfLIS(vector&lt;int&gt;&amp; nums) {
        int res=0,len=nums.size();     
        vector&lt;pair&lt;int,int&gt;&gt; temp;
        for(int i=0;i&lt;len;++i){
            res=max(res,binarysearch_front(temp,nums[i]));
        }
        temp.clear();
        for(int i=len-1;i&gt;=0;--i){
            res=max(res,binarysearch_back(temp,nums[i]));
        }
        return res;
    }
    
    int binarysearch_back(vector&lt;pair&lt;int,int&gt;&gt; &amp;temp,int target){
        if(temp.empty()){
            temp.push_back(make_pair(target,1));
            return 1;
        }
        
        int first=0,last=temp.size()-1,mid;
        
        if(target&gt;temp[last].first){            
            temp.push_back(make_pair(target,1));
            return 1;}
        
        if(target==temp[last].first)
            return temp[last].second;
        
        while(first&lt;last){
            mid=first+(last-first)/2;
            if(temp[mid].first&gt;=target)
                last=mid;
            else
                first=mid+1;
        }
        if(temp[first].first==target)
            //temp.insert(temp.begin()+first,make_pair(target,temp[first].second));
            temp[first].second=temp[first+1].second+1;
        else
            temp.insert(temp.begin()+first,make_pair(target,temp[first].second+1));
        return temp[first].second;
        
    }
    
    int binarysearch_front(vector&lt;pair&lt;int,int&gt;&gt; &amp;temp,int target){
        if(temp.empty()){
            temp.push_back(make_pair(target,1));
            return 1;
        }
        
        int first=0,last=temp.size()-1,mid;
        
        if(target&lt;temp[first].first){            
            temp.insert(temp.begin(),make_pair(target,1));
            return 1;}
        
        if(target==temp[first].first)
            return temp[first].second;
        
        while(first&lt;last){
            mid=first+(last-first+1)/2;
            if(temp[mid].first&lt;target)
                first=mid;
            else
                last=mid-1;
        }
        if(temp[last].first==target)
            //temp.insert(temp.begin()+first,make_pair(target,temp[first].second));
        {temp[last].second=temp[last-1].second+1;
         return temp[last].second;
        }
        else
            temp.insert(temp.begin()+last+1,make_pair(target,temp[last].second+1));
        return temp[last+1].second;
        
    }
};
</code></pre>
<p>12.22笔记：<br>
这道题我复习的时候只想起了贪心算法+二分查找，动态规划更加方便倒是没想起来，所以还是得多看一下<br>
然后这道题的题解还是看图比较方便一点，所以直接贴题解链接了<br>
<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/dong-tai-gui-hua-er-fen-cha-zhao-tan-xin-suan-fa-p/">动态规划 贪心算法+二分查找</a></p>
<p>复现：<br>
动态规划</p>
<pre><code>class Solution {
public:
     int lengthOfLIS(vector&lt;int&gt;&amp; nums) {
        int len=nums.size(),res=0;
        vector&lt;int&gt; count(len,1);
         for(int i=0;i&lt;len;++i){
             for(int j=0;j&lt;i;++j)
                 if(nums[j]&lt;nums[i])
                     count[i]=count[j]+1&gt;count[i]?count[j]+1:count[i];
             res=count[i]&gt;res?count[i]:res;
         }
         return res;
    }
};
</code></pre>
<p>贪心算法+二分查找</p>
<pre><code>class Solution {
public:
     int lengthOfLIS(vector&lt;int&gt;&amp; nums) {
        int len=nums.size();
        vector&lt;int&gt; count;
        for(int i=0;i&lt;len;++i){
            if(count.empty()||nums[i]&gt;count.back())
                count.push_back(nums[i]);
            else
                binarysearch(count,nums[i]);
        }
         return count.size();
    }
    
    void binarysearch(vector&lt;int&gt; &amp;temp,int target){
        int len=temp.size(),first=0,last=len-1,mid;
        while(first&lt;last){
            mid=first+(last-first)/2;
            if(target&lt;=temp[mid])
                last=mid;
            else
                first=mid+1;
            
        }
        if(target&lt;temp[first])
            temp[first]=target;
        return;
    }
};
</code></pre>
<p>需要注意点是二分判断if(target&lt;=temp[mid])必须是&lt;=而不能是&lt;，忽略=号会出现错误，比如4，10中查找4</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分查找 315.计算右侧小雨当前元素的个数「困难」「待阅读」]]></title>
        <id>https://lixin-ee.github.io//post/er-fen-cha-zhao-315ji-suan-you-ce-xiao-yu-dang-qian-yuan-su-de-ge-shu-kun-nan</id>
        <link href="https://lixin-ee.github.io//post/er-fen-cha-zhao-315ji-suan-you-ce-xiao-yu-dang-qian-yuan-su-de-ge-shu-kun-nan">
        </link>
        <updated>2019-12-21T14:54:44.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个整数数组 nums，按要求返回一个新数组 counts。数组 counts 有该性质： counts[i] 的值是  nums[i] 右侧小于 nums[i] 的元素的数量。<br>
示例:<br>
输入: [5,2,6,1]<br>
输出: [2,1,1,0]<br>
解释:<br>
5 的右侧有 2 个更小的元素 (2 和 1).<br>
2 的右侧仅有 1 个更小的元素 (1).<br>
6 的右侧有 1 个更小的元素 (1).<br>
1 的右侧有 0 个更小的元素.<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>对于这道题，最简单的可能就是暴力法了，直接搜索 时间复杂度就是n^2 优化就得看怎么优化了<br>
我一开始的想法是对原数组进行排序<br>
但是同时需要记录原数组的位置，比如5对应0，然后对比排序后数组的位置，比如5对应2，但是这个关系怎么对应起来呢？？？其实不太对劲，比如1排序后是0，但是它在原数组中无论何处都是0<br>
第二个想法就是排序后记录每个数组当前的最右最小元素值，但是需要更新很多位，比如遇到1需要更新1 2 5 6，遇到2需要更新2 5 6<br>
还是先实现暴力法吧，幹，暴力法超出时间限制了。。。说明肯定是用了排序法来压低到nlogn了<br>
只能实现 新增一个空间然后不断二分查找+插入了（但是插入不会超时吗。。。）<br>
结果是通过了但是时间复杂度确实很高，676ms只击败了5.59%的小伙伴，好好看看题解吧</p>
<pre><code>class Solution {
public:
    vector&lt;int&gt; countSmaller(vector&lt;int&gt;&amp; nums) {
        vector&lt;int&gt; res;
        vector&lt;int&gt; temp;
        int len=nums.size();
        for(int i=len-1;i&gt;=0;--i)
        {
            if(temp.empty()){
                temp.push_back(nums[i]);
                res.push_back(0);
                continue;
            }
            int loc=binarysearch(temp,nums[i]);
            res.insert(res.begin(),loc);
            temp.insert(temp.begin()+loc,nums[i]);            
        }
        return res;
    }
    
    int binarysearch(vector&lt;int&gt;&amp; nums,int target){
        int first=0,last=nums.size()-1,mid;
        if(target&lt;nums[0]) return 0;
        if(target&gt;nums[nums.size()-1]) return nums.size();
        while(first&lt;last){
            mid=first+(last-first)/2;
            if(nums[mid]&gt;=target)
                last=mid;
            else
                first=mid+1;
        }
        return first;
    }
};

</code></pre>
<p>我实现的方法排在暴力法之后，网友题解中的归并排序法和整理的6种方法都不错，值得阅读，今天实在是太累了，24小时内都没怎么睡好，所以先休息了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分查找 350. 两个数组的交集 II[简单]]]></title>
        <id>https://lixin-ee.github.io//post/er-fen-cha-zhao-350-liang-ge-shu-zu-de-jiao-ji-iijian-dan</id>
        <link href="https://lixin-ee.github.io//post/er-fen-cha-zhao-350-liang-ge-shu-zu-de-jiao-ji-iijian-dan">
        </link>
        <updated>2019-12-20T00:54:06.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个数组，编写一个函数来计算它们的交集。<br>
示例 1:<br>
输入: nums1 = [1,2,2,1], nums2 = [2,2]<br>
输出: [2,2]<br>
示例 2:<br>
输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>
输出: [4,9]<br>
说明：<br>
输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。<br>
我们可以不考虑输出结果的顺序。<br>
进阶:<br>
如果给定的数组已经排好序呢？你将如何优化你的算法？<br>
如果 nums1 的大小比 nums2 小很多，哪种方法更优？<br>
如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/intersection-of-two-arrays-ii<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题其实就是349的进化版，我把插入的判断条件去掉了，<br>
然后其实还是没有符合进阶条件的要求<br>
一是如果两数组相差较大的时候怎么处理<br>
如果大小相差很大，我就想特别是如果num2无法全部插入内存的情况，好好看看题解</p>
<pre><code>class Solution {
public:
    vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {
        int len1=nums1.size(),len2=nums2.size();
        vector&lt;int&gt; res;
        if(len1==0||len2==0) return res;
        quicksort(nums1,nums1.begin(),nums1.end()-1);
        quicksort(nums2,nums2.begin(),nums2.end()-1);
        for(int i=0,j=0;i&lt;len1&amp;&amp;j&lt;len2;){
            if(nums1[i]==nums2[j]){
                //if(res.empty()||res.back()!=nums1[i])
                    res.push_back(nums1[i]);
                ++i,++j;
            }
            else if(nums1[i]&lt;nums2[j])
                ++i;
            else
                ++j;
        }
        return res;
    }
		
		    void quicksort(vector&lt;int&gt; &amp;vi,vector&lt;int&gt;::iterator low,vector&lt;int&gt;::iterator high){
        vector&lt;int&gt;::iterator middle;
        if(low&lt;high){
            middle=partition(vi,low,high);
            quicksort(vi,low,middle);
            quicksort(vi,++middle,high);
        }
    }
    
    vector&lt;int&gt;::iterator partition(vector&lt;int&gt; &amp;vi, vector&lt;int&gt;::iterator low, vector&lt;int&gt;::iterator high){
        int pivotkey;
        if(low&lt;high){
            pivotkey=*low;
            while(low&lt;high){
                while(low&lt;high&amp;&amp;pivotkey&lt;=*high)
                    --high;
                iter_swap(low,high);
                while(low&lt;high&amp;&amp;*low&lt;=pivotkey)
                    ++low;
                iter_swap(low,high);
            }
        }
        return low;
    }
};
</code></pre>
<p>然后来看看网友题解：<br>
第一个就是我想到的349的set演化为map，主要是用于存储某个数的出现次数，我觉得可以用这个方法来优化2和3，就是把长度更短的存进map或者set，这样子就不需要较长的序列进行排序或者一次性读取到内存了。</p>
<blockquote>
<p>解法一：哈希表<br>
时间复杂度O(n)<br>
先用Hashmap记录第一个数组中的元素【放在key】，和出现的次数【放在value】。<br>
然后再遍历第二个数组，如果找到对应元素，则添加这个元素到返回数组里。<br>
如果value值大于1，HashMap中的value值减 1，表示已经找到一个相同的了。<br>
如果value值等于1，则删除该元素。</p>
</blockquote>
<pre><code>//代码我换成另一位作者的C++代码了
class Solution {
public:
    vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {
        vector&lt;int&gt;rec;
        unordered_map&lt;int,int&gt;map;
        for(int i =0;i&lt;nums1.size();i++)
            map[nums1[i]]+=1;
        for(int i =0;i&lt;nums2.size();i++)
           if(map[nums2[i]]&gt;0)
           {
               rec.push_back(nums2[i]);
               map[nums2[i]]-=1;
           }
               
        return rec;

    }
};
</code></pre>
<p>我自己的复现：</p>
<pre><code>class Solution {
public:
    //优化条件2 3 的hashmap方法
    vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {
        int len1=nums1.size(),len2=nums2.size();
        unordered_map&lt;int,int&gt; elem;
        vector&lt;int&gt; res;
        if(len1&lt;len2){
            add_elem(elem,nums1);
            find_intersect(elem,nums2,res);
        }else{
            add_elem(elem,nums2);
            find_intersect(elem,nums1,res);
        }
        return res;  
    }
    
    void add_elem(unordered_map&lt;int,int&gt; &amp;elem,vector&lt;int&gt; &amp;nums){
        for(auto i:nums)
            if(elem.count(i))
                ++elem[i];
            else
                elem.insert({i,1});
        
    }
    
    void find_intersect(unordered_map&lt;int,int&gt; &amp;elem,vector&lt;int&gt; &amp;nums,vector&lt;int&gt; &amp;res){
        for(auto i:nums)
            if(elem.count(i)&amp;&amp;elem[i]&gt;0){
                res.push_back(i);
                --elem[i];
            }
        
    }
};

</code></pre>
<p>昨天看面经说大公司很注重变量的命名和代码的面向过程性，所以特地查了一下字典并特地写了两个函数</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分查找 349. 两个数组的交集[简单]]]></title>
        <id>https://lixin-ee.github.io//post/er-fen-cha-zhao-349-liang-ge-shu-zu-de-jiao-ji-jian-dan</id>
        <link href="https://lixin-ee.github.io//post/er-fen-cha-zhao-349-liang-ge-shu-zu-de-jiao-ji-jian-dan">
        </link>
        <updated>2019-12-19T01:59:57.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个数组，编写一个函数来计算它们的交集。<br>
示例 1:<br>
输入: nums1 = [1,2,2,1], nums2 = [2,2]<br>
输出: [2]<br>
示例 2:<br>
输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>
输出: [9,4]<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/intersection-of-two-arrays<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>我的第一想法居然是暴力法hhh 比如哈希表，虽然看起来代码量少了很多，但是其实只是把工作留给哈希表做了<br>
第二想法是对两者进行排序，然后用双指针进行提取相同元素<br>
但这道题归属于二分查找分类，我能想到的只有对长序列进行排序，然后利用较短序列中的元素去逐个二分查找是否存在于长序列中 但是此时又需要考虑短序列中重复元素的问题 只能看看题解中有没有好的基于二分法思想的题解吧</p>
<p>最后打算直接用第二想法，差点又栽在if else上，记得不能拆分单独if<br>
然后！！！居然被自己的写的代码坑了！！！我跑回去找了快速排序的迭代器版实现，照着抄都抄错就不说了，居然！！！把end()迭代器传进去了！！！然后疯狂地溢出报错，一开始还以为是双指针那边错了，后来才发现必须是end()-1 而不是end()</p>
<pre><code>class Solution {
public:
    vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {
        int len1=nums1.size(),len2=nums2.size();
        vector&lt;int&gt; res;
        if(len1==0||len2==0) return res;
        quicksort(nums1,nums1.begin(),nums1.end()-1);
        quicksort(nums2,nums2.begin(),nums2.end()-1);
        for(int i=0,j=0;i&lt;len1&amp;&amp;j&lt;len2;){
            if(nums1[i]==nums2[j]){
                if(res.empty()||res.back()!=nums1[i])
                    res.push_back(nums1[i]);
                ++i,++j;
            }
            else if(nums1[i]&lt;nums2[j])
                ++i;
            else
                ++j;
        }
        return res;
    }
		    
    void quicksort(vector&lt;int&gt; &amp;vi,vector&lt;int&gt;::iterator low,vector&lt;int&gt;::iterator high){
        vector&lt;int&gt;::iterator middle;
        if(low&lt;high){
            middle=partition(vi,low,high);
            quicksort(vi,low,middle);
            quicksort(vi,++middle,high);
        }
    }
    
    vector&lt;int&gt;::iterator partition(vector&lt;int&gt; &amp;vi, vector&lt;int&gt;::iterator low, vector&lt;int&gt;::iterator high){
        int pivotkey;
        if(low&lt;high){
            pivotkey=*low;
            while(low&lt;high){
                while(low&lt;high&amp;&amp;pivotkey&lt;=*high)
                    --high;
                iter_swap(low,high);
                while(low&lt;high&amp;&amp;*low&lt;=pivotkey)
                    ++low;
                iter_swap(low,high);
            }
        }
        return low;
    }
};
</code></pre>
<p>然后来看看官方题解的set解法吧<br>
<strong>注意：C++中的set是基于红黑树的有序容器，unordered_set才是基于哈希函数的无序容器，前者维护元素顺序的代价很高，只有后者在理想情况下才能做到常数时间的增删查改</strong><br>
方法一：两个 set<br>
幼稚的方法是根据第一个数组 nums1 迭代并检查每个值是否存在在 nums2 内。如果存在将值添加到输出。这样的方法会导致O(n×m) 的时间复杂性，其中 n 和 m 是数组的长度。<br>
为了在线性时间内解决这个问题，我们使用集合 set，在 O(1) 时间复杂度实现操作。<br>
其思想是将两个数组转换为集合 set，然后迭代较小的集合检查是否存在在较大集合中。平均情况下，这种方法的时间复杂度为 O(n+m)。</p>
<p>这里我改贴网友的C++代码而不是官网的JAVA，以映射前面的注意事项</p>
<p>本解法所用时仅次于使用C++内置的sort和set_intersection（使用STL基本可以肯定会是最快的，但面试等情况未必可用）。<br>
优点：<br>
1、使用无序集合而非一般集合或无序图，节约了时空<br>
2、在检索无序集合时，将检索到的元素删去，而不是遍历answer数组，面对越大规模的问题，该方法效率越优。</p>
<pre><code>class Solution {
public:
    vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {
        unordered_set&lt;int&gt; u;
        vector&lt;int&gt; answer;
        for(int i:nums1)
            u.insert(i);
        for(int i:nums2){
            auto a = u.find(i);
            if(a!=u.end()){
                answer.push_back(i);
                u.erase(a);
            }
        }
        return answer;
    }
};
</code></pre>
<p>时间复杂度：O(m+n)，其中 n 和 m 是数组的长度。O(n) 的时间用于转换 nums1 在集合中，O(m) 的时间用于遍历nums，平均情况下集合的操作为 O(1)。<br>
空间复杂度：O(m+n)，最坏的情况是数组中的所有元素都不同。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[堆排序实现]]></title>
        <id>https://lixin-ee.github.io//post/dui-pai-xu-shi-xian</id>
        <link href="https://lixin-ee.github.io//post/dui-pai-xu-shi-xian">
        </link>
        <updated>2019-12-18T09:50:09.000Z</updated>
        <content type="html"><![CDATA[<p>堆排序（Heap Sort)就是利用堆（假设利用大顶堆）进行排序的方法。它的基本思想是， 将待排序的序列构造成一个大顶堆。此时，整个序列的最大值就是堆顶的根结点。将它移走 （其实就是将其与堆数组的末尾元素交换，此时末尾元素就是最大值），然后将剩余的n-1个 序列重新构造成一个堆，这样就会得到n个元素中的次小值。如此反复执行，便能得到一个有序序列了。<br>
整个排序过程分为两个for循环。<strong>第一个循环要完成的就是将现在的待排序序列构建成一个大顶堆</strong>。第二个循环要完成的就是逐步将每个最大值的根结点与末尾元素交换，并且再调整其成为大顶堆。<br>
所以注意！！！第一个循环后并非是有序顺序，大顶堆和二叉树不同，并非左子树的节点都小于右子树<br>
循环从(length-1)/2开始是因为从1到(length-1)/2都是有孩子的节点<br>
我们所谓的将待排序的序列构建成为一个大顶堆，其实就是从下往上、从右到左，将每个非终端结点（非叶结点）当作根结点，将其和其子树调整成大顶堆<br>
堆排序复杂度分析<br>
运行时间主要是消耗在初始构建堆和在重建堆时的反复筛选上。<br>
在构建堆的过程中，因为我们是完全二叉树从最下层最右边的非终端结点开始构 建，将它与其孩子迸行比较和若有必要的互换，对于每个非终端结点来说，其实最多进行两次比较和互换操作（和左右孩子进行比较？），因此整个构建堆的时间复杂度为o(n)。<br>
在正式排序时，第i次取堆顶记录重建堆需要用O(logi)的时间（完全二叉树的某个结点到根结点的距离为floor(logi)+1,并且需要取n-1次堆顶记录，因此，重建堆的时间复杂度为〇(nlogn)<br>
所以总体来说，堆排序的时间复杂度为〇(nlogn)。由于堆排序对原始记录的排序状态并 不敏感，因此它无论是最好、最坏和平均时间复杂度均为〇(nlogn)。<br>
空间复杂度上，它只有一个用来交换的暂存单元，也非常的不错。不过由于记录的比较与 交换是跳跃式进行，因此堆排序也是一种不稳定的排序方法。<br>
不过由于记录的比较与交换是跳跃式进行，因此堆排序也是一种<strong>不稳定的排序</strong>方法。</p>
<pre><code>    int main(vector&lt;int&gt;&amp; nums) {
        int len=nums.size();
        for(int i=(len-1)/2;i&gt;=0;--i)
            HeapAdjust(nums,i,len);
        
        for(int i=len-1;i&gt;0;--i){
            swap(nums[0],nums[i]);
            HeapAdjust(nums,0,i);
        }
    }
    
    void HeapAdjust(vector&lt;int&gt; &amp;nums,int s,int len){
            int temp=nums[s];
            for(int j=2*s+1;j&lt;len;j=2*j+1){
                if(j&lt;len-1&amp;&amp;nums[j+1]&gt;nums[j])
                    ++j;
                if(temp&gt;nums[j])
                    break;
                nums[s]=nums[j];
                s=j;
            }
            nums[s]=temp;
    }
</code></pre>
<p>实现需要注意的点就是理解每次循环的意义<br>
亦即调整过程中s和j的关系变化</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分查找 34. 在排序数组中查找元素的第一个和最后一个位置[中等]]]></title>
        <id>https://lixin-ee.github.io//post/er-fen-cha-zhao-34-zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-su-de-di-yi-ge-he-zui-hou-yi-ge-wei-zhi-zhong-deng</id>
        <link href="https://lixin-ee.github.io//post/er-fen-cha-zhao-34-zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-su-de-di-yi-ge-he-zui-hou-yi-ge-wei-zhi-zhong-deng">
        </link>
        <updated>2019-12-18T02:19:12.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。<br>
你的算法时间复杂度必须是 O(log n) 级别。<br>
如果数组中不存在目标值，返回 [-1, -1]。<br>
示例 1:<br>
输入: nums = [5,7,7,8,8,10], target = 8<br>
输出: [3,4]<br>
示例 2:<br>
输入: nums = [5,7,7,8,8,10], target = 6<br>
输出: [-1,-1]<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>一开始感觉的难点是 1.判断target是否存在于数组中 2.target的范围可能跨越了mid<br>
是否可以化为寻找第一个大于target的数 和最后小于target的数？<br>
需要分开两次寻找，然后需要判断mid的左右值来移动<br>
但是又会遇到边界条件。。。<br>
似乎只需要判断其中一边<br>
这道题似乎利用到了mid 的左倾和右倾</p>
<p>但是有问题，比如9 9 9 9 9中找1，那第一个最小值是找不到的（似乎可以在开头加上判断条件）</p>
<p>同时希望修改思路为寻找最左边符合条件的数和最右边符合条件的数</p>
<p>完全可以通过判断条件和左倾右倾来达到寻找最左边符合条件的数和最右边符合条件的数</p>
<p>然后发现完全可以第一次寻找的时候就发现数组中是否有target，可以立即返回{-1,-1}</p>
<p>然后需要判断是否为空empty。。。</p>
<p>最后的话就看看可不可以合并两次查找，虽然时间复杂度符合了但是不够优雅</p>
<p>原思路代码</p>
<pre><code> /*
        原思路
        while(first&lt;last){
            mid=first+(last-first)/2;
            if(nums[mid+1]&gt;=target)
                last=mid;
            else first=mid+1;
        }
        left=first;
        first=0,last=nums.size()-1;
        while(first&lt;last){
            mid=first+(last-first+1)/2;
            if(nums[mid-1]&lt;=target)
                first=mid;
            else  last=mid-1;
        }
        right=first;
        */
</code></pre>
<p>正确代码：</p>
<pre><code>class Solution {
public:
    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {
        if(nums.empty()||nums[0]&gt;target||nums[nums.size()-1]&lt;target) return vector&lt;int&gt;({-1,-1});
        int first=0,last=nums.size()-1,mid,left,right;
        while(first&lt;last){
            mid=first+(last-first)/2;
            if(nums[mid]&gt;=target)
                last=mid;
            else first=mid+1;
        }
        left=first;
        
        if(nums[left]!=target)
            return vector&lt;int&gt;({-1,-1});
        first=0,last=nums.size()-1;
         while(first&lt;last){
            mid=first+(last-first+1)/2;
            if(nums[mid]&lt;=target)
                first=mid;
            else  last=mid-1;
        }
        right=first;
        
        return vector&lt;int&gt;({left,right});
            }
};
</code></pre>
<p>题解的话思路一致，还是得使用左倾右倾各自循环一次<br>
然后就建议反复看<a href="https://lixin-ee.github.io/post/er-fen-cha-zhao-fa-mo-ban/">二分查找模板</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分查找 374. 猜数字大小[简单]]]></title>
        <id>https://lixin-ee.github.io//post/er-fen-cha-zhao-374-cai-shu-zi-da-xiao</id>
        <link href="https://lixin-ee.github.io//post/er-fen-cha-zhao-374-cai-shu-zi-da-xiao">
        </link>
        <updated>2019-12-17T01:27:26.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>我们正在玩一个猜数字游戏。 游戏规则如下：<br>
我从 1 到 n 选择一个数字。 你需要猜我选择了哪个数字。<br>
每次你猜错了，我会告诉你这个数字是大了还是小了。<br>
你调用一个预先定义好的接口 guess(int num)，它会返回 3 个可能的结果（-1，1 或 0）：<br>
-1 : 我的数字比较小<br>
1 : 我的数字比较大<br>
0 : 恭喜！你猜对了！<br>
示例 :<br>
输入: n = 10, pick = 6<br>
输出: 6<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/guess-number-higher-or-lower<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题其实才应该放到第一题吧。。。那个刷题顺序说实话不算特别严谨<br>
然后其实没啥难的，就是把二分法复现了一下，主要就是mid=first+(last-first)/2;是左倾还是右倾，从而影响后面是first=mid+1还是last=mid-1;<br>
然后吐槽一下题目的语文水平，题目中的我的数字是指要猜的数字而不是mid</p>
<pre><code>// Forward declaration of guess API.
// @param num, your guess
// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0
int guess(int num);

class Solution {
public:
    int guessNumber(int n) {
       int first=1,last=n, mid;
        while(first&lt;last){
            //mid=first+(last-first)/2;
            mid=first+(last-first+1)/2;
            int res=guess(mid);
            if(res==0)
                return mid;
            else if(res==-1)
                //last=mid;
                last=mid-1;
            else
                //first=mid+1;  
                first=mid;
        }
        return first;
    }
};
</code></pre>
<p>这道题就没太多值得讨论的地方了，二分查找基本题<br>
建议看一下<a href="https://lixin-ee.github.io/post/er-fen-cha-zhao-fa-mo-ban/">二分查找法模板</a></p>
<p>然后就是官方题解中的三分查找法<br>
方法 3：三分查找<br>
算法<br>
在二分查找中，我们选择中间元素作为分隔点。而在三分查找中，我们选择两个分隔点（比方记作 m1 和 m2），那么给定范围会被分成 3 个相等长度的部分。如果答案 num 比 m1 小，那么我们对 m1 左边的区间做三分查找。如果 num 在 m1 和 m2 中间，我们对中间区域进行三分查找。否则我们对 m2 右边的区域进行三分查找。</p>
<pre><code>public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int low = 1;
        int high = n;
        while (low &lt;= high) {
            int mid1 = low + (high - low) / 3;
            int mid2 = high - (high - low) / 3;
            int res1 = guess(mid1);
            int res2 = guess(mid2);
            if (res1 == 0)
                return mid1;
            if (res2 == 0)
                return mid2;
            else if (res1 &lt; 0)
                high = mid1 - 1;
            else if (res2 &gt; 0)
                low = mid2 + 1;
            else {
                low = mid1 + 1;
                high = mid2 - 1;
            }
        }
        return -1;
    }
}
</code></pre>
<p>复杂度分析</p>
<p>时间复杂度： O(log_3 n)为三分查找所需的时间复杂度。<br>
空间复杂度： O(1) 。没有使用额外的空间。</p>
<p>看起来三分查找会比二分查找更快，但是为什么二分查找使用得更广泛？<br>
二分查找和三分查找的比较<br>
<img src="https://lixin-ee.github.io//post-images/1576546844828.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分查找 162. 寻找峰值[中等]]]></title>
        <id>https://lixin-ee.github.io//post/er-fen-cha-zhao-162-xun-zhao-feng-zhi-zhong-deng</id>
        <link href="https://lixin-ee.github.io//post/er-fen-cha-zhao-162-xun-zhao-feng-zhi-zhong-deng">
        </link>
        <updated>2019-12-16T03:16:16.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>峰值元素是指其值大于左右相邻值的元素。<br>
给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。<br>
数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。<br>
你可以假设 nums[-1] = nums[n] = -∞。<br>
示例 1:<br>
输入: nums = [1,2,3,1]<br>
输出: 2<br>
解释: 3 是峰值元素，你的函数应该返回其索引 2。<br>
示例 2:<br>
输入: nums = [1,2,1,3,5,6,4]<br>
输出: 1 或 5<br>
解释: 你的函数可以返回索引 1，其峰值元素为 2；<br>
     或者返回索引 5， 其峰值元素为 6。<br>
说明:<br>
你的解法应该是 O(logN) 时间复杂度的。<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/find-peak-element<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题又和普通的二分查找有区别<br>
我一开始的想法是递归调用二分查找，因为数组是无序的，所以需要两边都继续查找下去，相当于树的每个节点都要搜索到。</p>
<p>突然发现又读错题了，因为示例2中说明其实返回其中一个峰值就好，不需要返回最大的峰值</p>
<p>不过我还是没想到比较好的方法，还是继续老方法</p>
<p>似乎在序列的右边一定会出现峰值（错误 3 7 6 5 0 就不符合）</p>
<p>尝试向递增那一边移动（最后证明这个是正确的，因为相邻两节点不相同，而且两边有负无穷，所以只要一直向递增的方向移动一定会到达峰值，可以把3 7 6 5 0化为连续函数就清楚了）</p>
<p>边界条件着实是麻烦啊，注意(mid!=0&amp;&amp;nums[mid-1]&gt;nums[mid])中的mid!=0不可缺少<br>
幸好边界比较明显，所以最后边界判断也不算特别复杂</p>
<p>主要是：<br>
一开始不小心把三个if分开了，导致一直mid[0-1]错误<br>
然后用else连起来后发现自己在if else和&amp;&amp;的组合判断上犯了一个很严重的错误<br>
if(mid<mark>0&amp;&amp;nums[mid]&gt;nums[mid+1])<br>
return mid;<br>
else if(mid</mark>nums.size()-1&amp;&amp;nums[mid]&gt;nums[mid-1])<br>
return mid;<br>
else if(nums[mid]&gt;nums[mid-1]&amp;&amp;nums[mid]&gt;nums[mid+1])<br>
在这里如果mid==0但是不符合nums[mid]&gt;nums[mid+1]的话！是会继续判断下一个if而不是跳出判断的！！！</p>
<pre><code>class Solution {
public:
    int max=-1;
    int findPeakElement(vector&lt;int&gt;&amp; nums) {
        int first=0,last=nums.size()-1,mid;
        while(first&lt;last){
            mid=first+(last-first)/2;
            if(mid==0){
                if(nums[mid]&gt;nums[mid+1])
                return mid;
            }
            else if(mid==nums.size()-1){
                if(nums[mid]&gt;nums[mid-1])
                return mid;
            }
            else if(nums[mid]&gt;nums[mid-1]&amp;&amp;nums[mid]&gt;nums[mid+1])
                return mid;
             if(mid!=0&amp;&amp;nums[mid-1]&gt;nums[mid])
                 last=mid;
            else
                first=mid+1;
        }
        return first;
    }
};
</code></pre>
<p>然后来看一下题解</p>
<blockquote>
<p>思路<br>
标签：二分查找<br>
过程：<br>
首先要注意题目条件，在题目描述中出现了 nums[-1] = nums[n] = -∞，这就代表着 只要数组中存在一个元素比相邻元素大，那么沿着它一定可以找到一个峰值<br>
根据上述结论，我们就可以使用二分查找找到峰值<br>
查找时，左指针 l，右指针 r，以其保持左右顺序为循环条件<br>
根据左右指针计算中间位置 m，并比较 m 与 m+1 的值，如果 m 较大，则左侧存在峰值，r = m，如果 m + 1 较大，则右侧存在峰值，l = m + 1<br>
时间复杂度：O(logN)<br>
代码</p>
</blockquote>
<pre><code>Java
class Solution {
    public int findPeakElement(int[] nums) {
        int left = 0, right = nums.length - 1;
        for (; left &lt; right; ) {
            int mid = left + (right - left) / 2;
            if (nums[mid] &gt; nums[mid + 1]) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}
</code></pre>
<p>看完这个题解才发现自己搞复杂了 我的主判断是nums[mid-1]&gt;nums[mid]，但是我的mid计算是左倾的，明显用nums[mid]&gt;nums[mid+1]更加方便，就不会出现超出下标范围的情况了，果然还是欠缺考虑啊<br>
修改代码如下：</p>
<pre><code>class Solution {
public:
    int max=-1;
    int findPeakElement(vector&lt;int&gt;&amp; nums) {
        int first=0,last=nums.size()-1,mid;
        while(first&lt;last){
            mid=first+(last-first)/2;
             if(nums[mid]&gt;nums[mid+1])
                 last=mid;
            else
                first=mid+1;
        }
        return first;
    }
};
</code></pre>
<p>代码简洁了超级多，时间复杂度和空间复杂度也下降了</p>
<p>然后是官方题解解释：<br>
<a href="https://leetcode-cn.com/problems/find-peak-element/solution/xun-zhao-feng-zhi-by-leetcode/">寻找峰值</a><br>
其实方法一致，而且比较难复制，我就不贴了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分查找 154. 寻找旋转排序数组中的最小值 II[困难]]]></title>
        <id>https://lixin-ee.github.io//post/154-xun-zhao-xuan-zhuan-pai-xu-shu-zu-zhong-de-zui-xiao-zhi-iikun-nan</id>
        <link href="https://lixin-ee.github.io//post/154-xun-zhao-xuan-zhuan-pai-xu-shu-zu-zhong-de-zui-xiao-zhi-iikun-nan">
        </link>
        <updated>2019-12-15T02:33:05.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。<br>
( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。<br>
请找出其中最小的元素。<br>
注意数组中可能存在重复的元素。<br>
示例 1：<br>
输入: [1,3,5]<br>
输出: 1<br>
示例 2：<br>
输入: [2,2,2,0,1]<br>
输出: 0<br>
说明：<br>
这道题是 寻找旋转排序数组中的最小值 的延伸题目。<br>
允许重复会影响算法的时间复杂度吗？会如何影响，为什么？<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题我也只想到如果边界和mid一样的话就往中间靠拢直至只有一边是异常的<br>
然后处理过程中有点小问题，因为上一题81题的判断条件是(nums[mid]==nums[first]&amp;&amp;nums[mid]==nums[last])<br>
这里有个与逻辑保证了避开mid和first或者mid和last相等时把自身去掉的情况<br>
然后一开始我忽略了这点导致失败了，比如[1,3]会导致1把自己去掉<br>
所以需要加上判断mid!=first和mid!=last才行<br>
时间复杂度和空间复杂度都不堪入目啊，好好看看题解用了啥方法吧</p>
<pre><code>class Solution {
public:
    int findMin(vector&lt;int&gt;&amp; nums) {
        if(nums.empty()) return -1;
        int first=0,last=nums.size()-1,mid;
        while(first&lt;last){
            mid=first+(last-first)/2;
            if(mid!=first&amp;&amp;nums[mid]==nums[first])
                ++first;
            else if(mid!=last&amp;&amp;nums[mid]==nums[last])
                --last;
            else if(nums[mid]&lt;nums[first])
                last=mid;
            else if(nums[mid]&gt;nums[last])
                first=mid+1;
            else
                return nums[first];
        }
        return nums[first];
    }
};
</code></pre>
<p>来看看网友题解吧<br>
<img src="https://lixin-ee.github.io//post-images/1576377717081.png" alt=""></p>
<pre><code>class Solution {
    public int findMin(int[] nums) {
        int left = 0, right = nums.length - 1;
        while (left &lt; right) {
            int mid = (left + right) / 2;
            if (nums[mid] &gt; nums[right]) left = mid + 1;
            else if (nums[mid] &lt; nums[right]) right = mid;
            else right = right - 1;
        }
        return nums[left];
    }
}
</code></pre>
<p>其实思路还是一样的，只能通过缩减边界来处理，最坏情况就等同于顺序搜索了</p>
]]></content>
    </entry>
</feed>