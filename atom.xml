<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lixin-scut.github.io/</id>
    <title>Lixin-SCUT</title>
    <updated>2020-02-23T15:49:24.996Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lixin-scut.github.io/"/>
    <link rel="self" href="https://lixin-scut.github.io//atom.xml"/>
    <subtitle>In the darkest night,Rising like a spire.</subtitle>
    <logo>https://lixin-scut.github.io//images/avatar.png</logo>
    <icon>https://lixin-scut.github.io//favicon.ico</icon>
    <rights>All rights reserved 2020, Lixin-SCUT</rights>
    <entry>
        <title type="html"><![CDATA[TcpConnection]]></title>
        <id>https://lixin-scut.github.io//post/tcpconnection</id>
        <link href="https://lixin-scut.github.io//post/tcpconnection">
        </link>
        <updated>2020-02-23T13:25:52.000Z</updated>
        <content type="html"><![CDATA[<p>TcpConnection是唯一默认使用shared_ptr来管理的class,也是唯一继承enable_shared_from_this的class,这源于其模糊的生命期</p>
<p>TcpConnection的状态有两个，kConnecting和kConnected</p>
<p>TcpConnection使用Channel来获得socket上的IO事件，它<em>会自己处理writable事件</em>，而把readable事件通过Messagecallback传达给用户<br>
TcpConnection拥有TCP socket,它的析构函数会close(fd)(在Socket的析构函数 中发生)</p>
<p>注意TcpConnection表示的是“一次TCP连接”，它是不可再生的，一旦连接断 开，这个TcpConnection对象就没啥用了。<br>
另外TcpConnection没有发起连接的功能, 其构造函数的参数是已经建立好连接的socketfd (无论是TcpServer被动接受还是 TcpClient主动发起),因此其初始状态是kConnecting。</p>
<p>只接受一种关闭连接的方式：被动关闭，即对方先关闭连接，本地read(2)返回0,触发关闭逻辑。<br>
也可以给TcpConnection新增 forceClose()成员函数，用于主动关闭连接，实现很简单，调用handleClose()<br>
<img src="https://lixin-scut.github.io//post-images/1582467842700.png" alt=""></p>
<p><strong>channel的改动</strong><br>
Channel class新增了 CloseCallback事件回调，并且断言(assert)在事件处理期间Channel对象不会析构，Channel 的 CloseCallback 会调用 handleClose(),</p>
<p>TcpConnection也同步需要增加 CloseCallback事件回调，<em>但是这个回调是给TcpServer和TcpClient用的</em>，用于通知它们移除所持有的TcpConnectionPtr,这不是给普通用户用的，普通用户继续使用ConnectionCallback</p>
<p>handleRead()会检查read(2)的返回值，根据返回值分别调用 messagecallback_,handleClose(),handleError()</p>
<p>handleClose()的主要功能是调用 closeCallback_,这个回调绑定到 removeConnection()</p>
<p>handleError()并没有进一步的行动，只是在日志中输出错误消息，这不影响连接的正常关闭。</p>
<p>connectDestroyed()是 TcpConnection 析构前最后调用的一个成员函数，它通知用户连接已断开。</p>
<p><strong>TcpServer</strong><br>
TcpServer向TcpConnection注册CloseCallback,用于接收连接断开的消息。<br>
通常TcpServer的生命期长于它建立的TcpConnection,因此不用担心TcpServer 对象失效。<br>
TcpServer::removeConnection()把 conn 从 ConnectionMap 中移除。这时 TcpConnection 已经快要被销毁：如果用户不持有TcpConnectionPtr的话，conn的引用计数已降到1。注意这里一定要用EventLoop::queuelnLoop <strong>（unknown）</strong>,否则就会出现对象生命期管理问题，即Channel::handleEvent()<strong>（unknown）</strong> 有可能引发TcpConnection析构，继而把当前Channel对象也析构了，导致程序崩溃。<br>
另外注意这里用boost:: bind让TcpConnection的生命期 长到调用connectDestroyed()的时刻。</p>
<p><strong>EventLoop 和 Poller</strong><br>
TcpConnection不再是只生不灭，因此要求EventLoop也提供unregister功能。EventLoop 新增了 removeChannel()成员函数，它会调用 Poller::removeChannel(),复杂度为O(logN)。<br>
注意其中从数组pollfds_中删除元素是0(1)复杂度，办法是将待删除的元素与最后一个元素交换，再pollfds_.pop_back()</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STL 内存配置器与内存管理]]></title>
        <id>https://lixin-scut.github.io//post/stl-nei-cun-pei-zhi-qi-yu-nei-cun-guan-li</id>
        <link href="https://lixin-scut.github.io//post/stl-nei-cun-pei-zhi-qi-yu-nei-cun-guan-li">
        </link>
        <updated>2020-02-23T07:22:23.000Z</updated>
        <content type="html"><![CDATA[<p>注意，《STL源码剖析》原文中的是空间配置器</p>
<blockquote>
<p>为什么不说allocator是内存配置器而说它是空间配置器呢？因为空间不一定 是内存，空间也可以是磁盘或其它辅助存储介质。是的，你可以写一个allocator, 直接向硬盘取空间L以下介绍的是SGISTL提供的配置器，配置的对象，呃，是 的，是内存</p>
</blockquote>
<p>但是因为绝大部分时间操作对象都是内存，所以我还是把它叫做内存配置器了。</p>
<p>预备知识：<br>
new对应delete，这两者既包含了内存的分配（释放）和对象的构造（析构）<br>
而malloc和free、allocate和deallocate则仅仅包含内存的分配（释放），需要配合construct和destroy来完成对象的构造（析构）</p>
<p>为了精密分工，STL allocator将内存配置操作和对象构造操作这两阶段操作区分开来。内存分配由alloc::allocate ()负责，内存释放操作由 alloc::deallocate () 负责； 对象构造由::construct ()负责，对象析构操作由 ::destroy ()负责</p>
<p>我们主要考虑内存配置操作：<br>
•	向system heap要求空间。<br>
•	考虑内存不足时的应变措施。<br>
•	考虑过多“小型区块”可能造成的内存碎片(fragment)问题。<br>
SGI正是以malloc ()和 free() 完成内存的配置与释放，这对组合可以解决第一第二点问题（通过类似与new-handle的机制不断尝试释放、配置直到成功分配或者bad_alloc）。<br>
考虑到第三点：小型区块所可能造成的内存破碎问题，SGI设计了双层级配置器，第一级配置器如上述直接使用malloc()和free(),第二级配置器则视情况采用不同的策略</p>
<p>其中第二级配置器为默认配置器<br>
当配置区块超过128 bytes 时,视之为“足够大”，便调用第一级配置器；<br>
当配置区块小于128 bytes时，视之为“过小”，直接使用第二级配置器<br>
为了降低额外负担(overhead)，便采用复杂的memory pool整理方式，而不再求助于第一级配置器。</p>
<p>第二级配置器的具体做法是，如果区块够大，超过128 bytes时，就移交第一级配置器处理。当区块小于128 bytes时，则以内存池(memory pool)管理，</p>
<p>此法又称为次层配置(sub-allocation):每次配置一大块内存，并维护对应之自由链表 (free-list)。下次若再有相同大小的内存需求，就直接从free-lists中拨出。如果客端释还小额区块，就由配置器回收到free-lists中<br>
为了方便管理，SGI第二级配置器会主动将任何小额区块的内存需求量上调至8的倍数(例如客端要求30 bytes,就自动调整为32 bytes) , 并维护 16 个free-lists.各自管理大小分别为 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128 bytes的小额区块。<br>
其中为了节省空间，链表节点使用union，第一字段观obj可被视为一个指针，指向相同形式的另一个。第二字段可被视为一个指针，指向实际区块，</p>
<p>空间配置函数allocate()首先判断区块大小，大于128 bytes就调用第一级配置器，小于128 bytes就检查对应的free list。如果free list之内有可用的区块，就直接拿来 用，如果没有可用区块，就将区块大小上调至8倍数边界，然后调用refill(), 准备为free list重新填充空间。新的空间将取自内存池(经由 chunk_alloc()完成)。缺省取得20个新节点(新区块)，但万一内存池空间不足，获得的节点数(区块数)可能小于20</p>
<p>从内存池中取空间给free_list使用，是chunk_alloc()的工作：</p>
<ol>
<li>chunk_alloc() 函数判断内存池的余量。如果余量充足，就直接调出20个区块返回给freelist。</li>
<li>如果余量不足以提供20个区块，但还足够供应一个以上的区块，就拨出这不足20个区块的空间出去。同时参数将被修改为实际能够供应的区块数。</li>
<li>如果 内存池连一个区块空间都无法供应，对客端显然无法交待，此时便需利用malloc() 从heap中配置内存。新余量的大小为需求量的两倍，再加上一个随着配置次数增加而愈来愈大的附加量。</li>
<li>万一整个system heap空间都不够了，malloc ()行动失败，chunk_alloc ()就四处寻找有无尚有未用区块,且区块够大之free lists.找到了就挖一块交出</li>
<li>最后找不到就调用第一级配置器。第一级配置器其实也是使用 malloc() 来配置内存，但它有out-of-memory处理机制 (类似new-handler机制)，或许有机会释放其它的内存拿来此处使用。如果可以,就成功，否则发出bad_alloc异常。</li>
</ol>
<p>空间释放函数deallocate()首先判断区块大小，大于128 bytes就调用第一级配置器， 小于128 bytes就找出对应的free_list,将区块回收。</p>
<p>所以最终STL内存配置的流程为:</p>
<ol>
<li>
<p>使用allocate向内存池请求size大小的内存空间, 如果需要请求的内存大小大于128bytes, 直接使用malloc.</p>
</li>
<li>
<p>如果需要的内存大小小于128bytes, allocate根据size找到最适合的自由链表.<br>
　　1) 如果链表不为空, 返回第一个node, 链表头改为第二个node.<br>
　　2) 如果链表为空, 使用blockAlloc请求分配node.<br>
　　　　x. 如果内存池中有大于一个node的空间, 分配竟可能多的node(但是最多20个), 将一个node返回, 其他的node添加到链表中.<br>
　　　　y. 如果内存池只有一个node的空间, 直接返回给用户.<br>
　　　　z. 若果如果连一个node都没有, 再次向操作系统请求分配内存.<br>
　　　　　　①分配成功, 再次进行b过程<br>
②分配失败, 循环各个自由链表, 寻找空间<br>
I. 找到空间, 再次进行过程b<br>
II. 找不到空间, 抛出异常(代码中并未给出, 只是给出了注释)</p>
</li>
<li>
<p>用户调用deallocate释放内存空间, 如果要求释放的内存空间大于128bytes, 直接调用free.</p>
</li>
<li>
<p>否则按照其大小找到合适的自由链表, 并将其插入.</p>
</li>
</ol>
<p>注意：</p>
<ol>
<li>刚开始初始化内存池的时候, 其实内存池中并没有内存, 同时所有的自由链表都为空链表.</li>
<li>只有用户第一次向内存池请求内存时, 内存池会依次执行上述过程的 1-&gt;2-&gt;b-&gt;z来完成内存池以及链表的首次填充, 而此时, 其他未使用链表仍然是空的.</li>
<li>所有已经分配的内存在内存池中没有任何记录, 释放与否完全靠程序员自觉.</li>
<li>释放内存时, 如果大于128bytes, 则直接free, 否则加入相应的自由链表中而不是直接返还给操作系统.</li>
</ol>
<p>参考资料：<br>
《STL源码剖析》<br>
allocator的必要接口：</p>
<pre><code>//以下各种type的设计原由，第3章详述
allocator::value_type
allocator：:pointer
allocator::const_pointer
allocator：:reference
allocator：:const_reference
allocator::size_type
allocator::di f ference_type
allocator::rebind
</code></pre>
<ul>
<li>allocator::rebind<br>
一个嵌套的(nested) class template。<code>classrebind&lt;U&gt;</code>拥有唯一成员 other,那是一个typedef,代表 <code>allocator&lt;U&gt;</code></li>
<li>allocator::allocator()<br>
default constructor默认构造函数（注意不是construct）</li>
<li>allocator::allocator(const allocator&amp;)<br>
copy constructor拷贝构造函数</li>
<li><code>template &lt;class U&gt;allocator::allocator(const allocator&lt;U&gt;&amp;)</code><br>
泛化的 copy constructor拷贝构造函数</li>
<li>allocator::-allocator()<br>
default constructor</li>
<li>pointer allocator::address(reference x) const<br>
返回某个对象的地址。算式 a.address(x) 等同于&amp;x</li>
<li>const pointer allocator::address(const_reference x) const<br>
返回某个 const 对象的地址。算式a.address (x)等同于&amp;x</li>
<li>pointer allocator::allocate (size_type n,cosnt void* = 0)<br>
配置空间，足以存储n个T对象.第二参数是个提示。实现上可能会利用它来增进区域性(locality),或完全忽略之</li>
<li>void allocator::deallocate(pointer p,size_type n)<br>
归还先前配置的空间</li>
<li>size_type allocato::max_size() const<br>
返回可成功配置的最大量</li>
<li>void allocator::construct(pointer p,const T&amp; x)<br>
等同于 new(const void*) p) T(x)</li>
<li>void allocator::destroy(pointer p)<br>
等同于 p-&gt;~T()</li>
</ul>
<p><img src="https://lixin-scut.github.io//post-images/1582443665448.png" alt=""></p>
<p>虽然SGI也定义有一个符合部分标准、名为allocator的配置器，但SGI 自己从未用过，也不建议我们使用，主要原因是效率不佳，只把C++的::operator new和::operator delete做一层薄薄的包装而已。</p>
<p>2.2.2	SGI特殊的空间配置器，std::alloc<br>
<img src="https://lixin-scut.github.io//post-images/1582444320205.png" alt=""><br>
这其中的new 算式内含两阶段操作：<br>
(1)调用::operator new 配置内存;<br>
(2)调用Foo::Foo()构造对象内容。<br>
delete算式也内含两阶段操作：<br>
(1)调用Foo::~Foo() 将对象析构；<br>
(2)调用 ::operator delete 释放内存。</p>
<p>为了精密分工，STL allocator决定将这两阶段操作区分开来。<br>
内存配置操 作由alloc::allocate ()负责，内存释放操作由 alloc::deallocate () 负责；<br>
对象构造操作由::construct ()负责，对象析构操作由 ::destroy ()负责</p>
<pre><code>STL标准规格告诉我们，配置器定义于 &lt;memory&gt;之中 ,SGI &lt;memory&gt; 内 含以下两个文件：
#include &lt;stl_alloc .h&gt;	//负责内存空间的配置与释放
#include &lt;stl_construct. h&gt;	/ /负责对象内容的构造与析构
</code></pre>
<p><img src="https://lixin-scut.github.io//post-images/1582444604245.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582444619328.png" alt=""></p>
<p>2.2.3	构造和析构基本工具：construct()和destroy()<br>
<img src="https://lixin-scut.github.io//post-images/1582444781513.png" alt=""><br>
construct() 接受一个指针P和一个初值 value, 该函数的用途就是将初值设定到指针所指的空间上。<br>
destroy() 有两个版本，第一版本接受一个指针，准备将该指针所指之物析构掉。这很简单，直接调用该对象的析构函数即可。第二版本接受 first 和 last 两个迭代器(所谓迭代器，第3章有详细介绍)，准备将<code>[first, last)</code>范围内的所有对象析构掉。我们不知道这个范围有多大，万一很大，而每个对象的析构函数都无关痛痒(所谓trivial destructor),那么一次次调用这些无关痛痒的析构函数, 对效率是一种伤害。因此，这里首先利用 value_type() 获得迭代器所指对象的型别，再利用 <code>_type_traits&lt;T&gt;</code>判断该型别的析构函数是否无关痛痒。若是 (<code>_true_type</code>),则什么也不做就结束；若否(<code>_false_type</code>),这才以循环方式巡访整个范围，并在循环中每经历一个对象就调用第一个版本的destroy()。</p>
<p>2.2.4	空间的配置与释放，std::alloc<br>
对象构造前的空间配置和对象析构后的空间释放，由 &lt;stl_alloc.h&gt; 负责， SGI对此的设计哲学如下：<br>
•	向system heap要求空间。<br>
•	考虑多线程(multi-threads)状态。(书中暂不考虑多线程的复杂情况)<br>
•	考虑内存不足时的应变措施。<br>
•	考虑过多“小型区块”可能造成的内存碎片(fragment)问题。<br>
C++的内存配置基本操作是 ::operator new(), 内存释放基本操作 是 ::operator delete()。 这两个全局函数相当于C的malloc ()和 free()函 数。<br>
SGI正是以malloc ()和 free() 完成内存的配置与释放。<br>
考虑到小型区块所可能造成的内存破碎问题，SGI设计了双层级配置器，第一级配置器直接使用malloc()和free(),第二级配置器则视情况采用不同的策略<br>
当配置区块超过128 bytes 时,视之为“足够大”，便调用第一级配置器；<br>
当配 置区块小于128 bytes时，视之为“过小”<br>
为了降低额外负担(overhead)，便采用复杂的memory pool整理方式，而不再求助于第一级配置器。<br>
整个设计究竟只开放第一级配置器，或是同时开放第二级配置器，取决于__USE_MALLOC 是否被定义(唔，我们可以轻易测试出来，SGI STL并未定义__USE_MALLOC，亦即同时开放第二级配置器 ):<br>
<img src="https://lixin-scut.github.io//post-images/1582446124190.png" alt=""><br>
其中 <code>__malloc_alloc_template</code> 就是第一级配置器，<code>__default_alloc_ template</code>就是第二级配置器。注意，alloc并不接受任何template型别参数。<br>
无论alloc被定义为第一级或第二级配置器，SGI还为它再包装一个接口如<br>
下，使配置器的接口能够符合STL规格<br>
<img src="https://lixin-scut.github.io//post-images/1582446468140.png" alt=""><br>
其内部四个成员函数其实都是单纯的转调用，调用传递给配置器(可能是第一级，也可能是第二级)的成员函数。<br>
这个接口使配置器的配置单位从bytes转为个别元素的大小(sizeof (T) ) ，SGI STL容器全都使用这个 simple_alloc 接口<br>
<img src="https://lixin-scut.github.io//post-images/1582446536993.png" alt=""><br>
一、二级配置器的关系，接口包装，及实际运用方式<br>
<img src="https://lixin-scut.github.io//post-images/1582446613792.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582446938165.png" alt=""></p>
<p>2.2.5 第一级配置器<code>__malloc_alloc_template</code><br>
第一级配置器以 malloc(), free(), realloc() 等c函数执行实际的内存 配置、释放、重配置操作，并实现出类似C++new-handle的机制。是的，它不能直接运用C++new-handler机制，因为它并非使用 ::operator new 来配置内存.<br>
所谓C++ new handler机制是你可以要求系统在内存配置需求无法被满足时，调用一个你所指定的函数。换句话说，一旦:operator new 无法完成任务,在丢出std::bad_elloc异常状态之前，会先调用由客端指定的处理例程，该处理例程通常即被称为new-handiero new-handier解决内存不足的做法有特定的模式</p>
<p>请注意，SGI第一级配置器的 allocate() 和 realloc() 都是在调用 malloc()和 realloc() 不成功后，改调用 oom_malloc() 和 oom_realloc()。 后两者都有内循环，不断调用“内存不足处理例程”，期望在某次调用之后，获得足够的内存而圆满完成任务。但如果“内存不足处理例程”并未被客端设定， oom_malloc() 和 oom_realloc() 便老实不客气地调用 <code>_THROW_BAD_ALLOC</code>, 丢出bad_alloc异常信息，或利用exit(1)硬生生中止程序。</p>
<p>2.2.6	第二级配置器<code>__default_alloc_template</code>剖析<br>
第二级配置器多了一些机制，避免太多小额区块造成内存的碎片。小额区块带<br>
来的其实不仅是内存碎片，配置时的额外负担(overhead)也是一个大问题。额外<br>
负担永远无法避免，毕竟系统要靠这多出来的空间来管理内存，如图2-3所示。但 是区块愈小，额外负担所占的比例就愈大，愈显得浪费。</p>
<p>SGI第二级配置器的做法是，如果区块够大，超过128 bytes时，就移交第一级配置器处理。当区块小于128 bytes时，则以内存池(memory pool)管理，<br>
此法又称为次层配置(sub-allocation):每次配置一大块内存，并维护对应之自由链表 (free-list)。下次若再有相同大小的内存需求，就直接从free-lists中拨出。如果客端释还小额区块，就由配置器回收到free-lists中——是的，别忘了，配置器除了负责配置，也负责回收。<br>
为了方便管理，SGI第二级配置器会主动将任何小额区块的内存需求量上调至8的倍数(例如客端要求30 bytes,就自动调整为32 bytes) , 并维护 16 个free-lists.各自管理大小分别为 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128 bytes的小额区块。free-lists的节点结构如下：</p>
<pre><code>union obj {
union obj * free_list_link;
char client_data[1];	 /* The client sees this, */
};
</code></pre>
<p>诸君或许会想，为了维护链表(lists),每个节点需要额外的指针(指向下一 个节点)，这不又造成另一种额外负担吗？你的顾虑是对的，但早已有好的解决办<br>
法。注意，上述obj所用的是union, 由于 union 之故，从其第一字段观之,<br>
obj可被视为一个指针，指向相同形式的另一个。从其第二字段观之，可被视为一个指针，指向实际区块，如图2-4所示。一物二用的结果是，不会为了维<br>
护链表所必须的指针而造成内存的另一种浪费(我们正在努力节省内存的开销呢)。<br>
这种技巧在强型(strongly typed)语言如Java中行不通，但是在非强型语言如C+十<br>
中十分普遍<br>
<img src="https://lixin-scut.github.io//post-images/1582447931963.png" alt=""></p>
<p>2.2.7 空间配置函数allocate()<br>
身为一个配置器，<code>__default_alloc_template</code>拥有配置器的标准接口函数<br>
allocate()。 此函数首先判断区块大小，大于128 bytes就调用第一级配置器，小于128 bytes就检查对应的free list。如果free list之内有可用的区块，就直接拿来 用，如果没有可用区块，就将区块大小上调至8倍数边界，然后调用refill(), 准备为free list重新填充空间。<br>
<img src="https://lixin-scut.github.io//post-images/1582448121791.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582448143766.png" alt=""><br>
<strong>备注</strong>：注意其实result-&gt;free_list_link;这里等于是next指针，相当于把头节点指向下一个节点，可在下一节得证</p>
<p>2.2.8 空间释放函数deallocate()<br>
身为一个配置器，<code>__default_alloc_template</code>拥有配置器标准接口函数 deallocate()。 该函数首先判断区块大小，大于128 bytes就调用第一级配置器， 小于128 bytes就找出对应的free list,将区块回收。<br>
<img src="https://lixin-scut.github.io//post-images/1582448357314.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582448420144.png" alt=""></p>
<p>2.2.9	重新填充free lists<br>
回头讨论先前说过的allocate()。当它发现free list中没有可用区块了时， 就调用refill()，准备为freelist重新填充空间。新的空间将取自内存池(经由 chunk_alloc()完成)。缺省取得20个新节点(新区块)，但万一内存池空间不足，获得的节点数(区块数)可能小于20：<br>
<img src="https://lixin-scut.github.io//post-images/1582448504177.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582448521568.png" alt=""><br>
voliate变量是随时变化的，用voliate修饰的运算，编译器不进行优化，以免出错</p>
<p>2.2.10 内存池( memory pool)<br>
从内存池中取空间给free list使用，是chunk_alloc()的工作：<br>
<img src="https://lixin-scut.github.io//post-images/1582449342167.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582449365595.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582449383349.png" alt=""><br>
上述的 chunk_alloc() 函数以 end_free - start_free 来判断内存池的水量。如果水量充足，就直接调出20个区块返回给freelist.如果水量不足以提供20个区块，但还足够供应一个以上的区块，就拨出这不足20个区块的空间出去。这时候其pass by reference的nobjs参数将被修改为实际能够供应的区块数。如果 内存池连一个区块空间都无法供应，对客端显然无法交待，此时便需利用malloc() 从heap中配置内存，为内存池注入活水源头以应付需求。新水量的大小为需求量的两倍，再加上一个随着配置次数增加而愈来愈大的附加量。<br>
万一山穷水尽，整个system heap空间都不够了(以至无法为内存池注入活水 源头)，malloc ()行动失败，chunk_alloc ()就四处寻找有无尚有未用区块,<br>
且区块够大之free lists.找到了就挖一块交出，找不到就调用第一级配置器。第一级配置器其实也是使用 malloc() 来配置内存，但它有out-of-memory处理机制 (类似new-handler机制)，或许有机会释放其它的内存拿来此处使用。如果可以, 就成功，否则发出bad.alloc异常。<br>
<img src="https://lixin-scut.github.io//post-images/1582449531828.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582449557765.png" alt=""><br>
STL的容器都可以设置配置器，并默认设置为第二级配置器</p>
<p>2.3	内存基本处理工具<br>
STL定义有五个全局函数，作用于未初始化空间上。这样的功能对于容器的实 现很有帮助，我们会在第4章容器实现代码中，看到它们肩负的重任。前两个函数是 2.2.3节说过的、用于构造的 construct() 和用于析构的destroy(),另三个函数是 uninitialized_copy () / uninitialized_fill () / uninitialized_fill_n () 分别对应于高层次函数 copy () 、fill () 、fill_n ()	这些都是 STL 算法，将<br>
如果你要使用本节的三个低层次函数，应该包含 <code>&lt;memory&gt;</code>, 不过 SGI把它们实际定义于 <code>&lt;stl_uninitialized&gt;</code>。</p>
<p>2.3.1	uninitialized_copy</p>
<pre><code>template &lt;class InputIterator, class ForwardIterator&gt;
ForwardIterator
uninitialized_copy(InputIterator first, InputIterator last,
															ForwardIterator result);
</code></pre>
<p>uninitialized_copy() 使我们能够将内存的配置与对象的构造行为分离开来。如果作为输出目的地的<code>[result, result+(last-first))</code>范围内的每一个迭代器都指向未初始化区域，则 uninitialized_copy () 会使用 copy constructor, 给身为输入来源之<code>[first,last)</code>范围内的每一个对象产生一份复制品，放进输出范围中。换句话说，针对输入范围内的每一个迭代器i，该函数会调用 <code>construct (&amp;* (results- (i-first)) , *i)</code>,产生*i的复制品，放置于输出范围的相对位置上<br>
如果你需要实现一个容器， uninitialized_copy() 这样的函数会为你带来 很大的帮助，因为容器的全区间构造函数(range constructor)通常以两个步骤完成：<br>
•配置内存区块，足以包含范围内的所有元素.<br>
•使用 uninitiali zed_copy(), 在该内存区块上构造元素.</p>
<p>uninitialized_copy具有 ucommit or rollback 语意，要么“构造出所有必要元素”，要么(当有任何一个copy constructor失败时)“不构造任何东西”.</p>
<p>2 3.2 uninitialized_fill</p>
<pre><code>template &lt;class ForwardIterator, class T&gt;
void uninitialized_fill(Forwarditerator first, ForwardIterator last, 
																const T&amp; x)；
</code></pre>
<p>uninitialized_fill() 也能够使我们将内存配置与对象的构造行为分离开 来。如果 <code>[first,last )</code>范围内的每个迭代器都指向未初始化的内存，那么 uninitialized_fill() 会在该范围内产生x (上式第三参数)的复制品。换句话 说，uninitialized_fill ()会针对操作范围内的每个迭代器i,调用 <code>construct(&amp;*i, x)</code>, 在i所指之处产生x的复制品.式中的 construct() 已 于2.2.3节讨论过。<br>
与 uninitialized_copy() 一样，uninitialized_fill() 必须具备&quot;commit or rollback语意，换句话说，它要么产生出所有必要元素，要么不产生任何元素。 如果有任何一个copy constructor丢出异常(exception) ,uninitialized_fill()必须能够将已产生的所有元素析构掉。</p>
<p>2.3.3	uninitialized_fill_n</p>
<pre><code>template &lt;class ForwardIterator, class Size, class T&gt; 
ForwardIterator
uninitialized_fill_n(ForwardIterator first, Size nz, const T&amp; x)；
</code></pre>
<p>uninitialized_fill_n ()能够使我们将内存配置与对象构造行为分离开来。 它会为指定范围内的所有元素设定相同的初值。<br>
如果<code>[first, first+n)</code>范围内的每一个迭代器都指向未初始化的内存，那么uninitialized_f ill_n ()会调用 copy constructor,在该范围内产生x (上式第三参数)的复制品。也就是说，面对<code>[first z first+n)</code> 范围内的每个迭代器i， uninitialized_fill_n ()会调用 <code>construct(&amp;*i, x)</code>,在对应位置处产生 x 的复制品。<br>
uninitialized_fill_n ()也具有 commit or rollback语意：要么产生所有必要的元素，否则就不产生任何元素。如果任何一个copy constructor丢出异常 (exception) &gt; uninitialized_fill_n()必须析构已产生的所有元素。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树 题26:树的子结构[未做出]]]></title>
        <id>https://lixin-scut.github.io//post/shu-ti-26shu-de-zi-jie-gou-wei-zuo-chu</id>
        <link href="https://lixin-scut.github.io//post/shu-ti-26shu-de-zi-jie-gou-wei-zuo-chu">
        </link>
        <updated>2020-02-23T01:25:18.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>题目描述<br>
输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p>
</blockquote>
<p>【未做出】<br>
首先一定要注意递归和判断中使用的函数和顺序（这一点其实已经做得很好了）HasSubtree函数负责确定根结点，isSubTree负责遍历每个结点是否相符<br>
我犯的致命错误就是忘记了isSubTree中判断的是子结构，cur2出现NULL的时候cur1完全有可能不是NULL<br>
一定要理解先判断cur2为NULL再判断cur1为NULL的原因</p>
<pre><code>class Solution {
public:
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if(pRoot1==NULL||pRoot2==NULL)
             return false;
        return isSubTree(pRoot1,pRoot2)||HasSubtree(pRoot1-&gt;left,pRoot2)||HasSubtree(pRoot1-&gt;right,pRoot2);
    }
        
    bool isSubTree(TreeNode* cur1, TreeNode* cur2){
        if(cur2==NULL)
            return true;
        if(cur1==NULL)
            return false;
        if(cur1-&gt;val!=cur2-&gt;val)
            return false;
        return isSubTree(cur1-&gt;left,cur2-&gt;left)&amp;&amp;isSubTree(cur1-&gt;right,cur2-&gt;right);
    }
};
</code></pre>
<p>书本题解：<br>
要查找树A中是否存在和树B结构一样的子树，我们可以分成两步：第一步，在树A中找到和树B的根节点的值一样的节点R;第二步，判断树A中以R为根节点的子树是不是包含和树B一样的结构。<br>
第一步在树A中查找与根节点的值一样的节点，这实际上就是树的遍历。对二叉树这种数据结构熟悉的读者自然知道可以用递归的方法去遍历, 也可以用循环的方法去遍历。由于递归的代码实现比较简洁，如果没有特别要求，那么我们通常会采用递归的方式。<br>
一定要注意边界条件的检查，即检查空指针。当树A或树B为空的时候，定义相应的输出。<br>
我们递归调用HasSubtree遍历二叉树A。如果发现某一节点的值和树B的头节点的值相同，则调用DoesTreelHaveTree2,进行第二步判断。<br>
第二步是判断树A中以R为根节点的子树是不是和树B具有相同的结构。同样，我们也可以用递归的思路来考虑：如果节点R的值和树B的根节点不相同，则以R为根节点的子树和树B肯定不具有相同的节点；如果它们的值相同，则递归地判断它们各自的左右节点的值是不是相同。递归的终止条件是我们到达了树A或者树B的叶节点<br>
需要多处判断一个指针是不是nullptr,这样做是为了避免试图访问空指针而造成程序崩溃，同时也设置了递归调用的退出条件。在写遍历树的代码的时候一定要高度警惕，在每一处需要访问地址的时候都要问自己这个地址有没有可能是nullptr、如果是nullptr则该怎么处理。<br>
一个细节值得我们注意：本题中节点中值的类型为double，由于计算机表示小数(包括float和double型小数)都有误差，我们不能直接用等号(==)判断两个小数是否相等。如果两个小数的差的绝对值 很小，如小于0.0000001,就可以认为它们相等<br>
所以在判断两个节点的值是不是相等时，不能直接写pRoot1-&gt;m_dbValue == pRoot2-&gt;m_ dbValue,这是因为在计算机内表示小数时(包括float和double型小数)都有误差。判断两个小数是否相等，只能判断它们之差的绝对值是不是在一个很小的范围内。如果两个数相差很小，就可以认为它们相等。这就是我 们定义函数Equal的原因。</p>
<pre><code>bool HasSubtree(BinaryTreeNode* pRoot1, BinaryTreeNode* pRoot2)
{
    bool result = false;

    if(pRoot1 != nullptr &amp;&amp; pRoot2 != nullptr)
    {
        if(Equal(pRoot1-&gt;m_dbValue, pRoot2-&gt;m_dbValue))
            result = DoesTree1HaveTree2(pRoot1, pRoot2);
        if(!result)
            result = HasSubtree(pRoot1-&gt;m_pLeft, pRoot2);
        if(!result)
            result = HasSubtree(pRoot1-&gt;m_pRight, pRoot2);
    }

    return result;
}

bool DoesTree1HaveTree2(BinaryTreeNode* pRoot1, BinaryTreeNode* pRoot2)
{
    if(pRoot2 == nullptr)
        return true;

    if(pRoot1 == nullptr)
        return false;

    if(!Equal(pRoot1-&gt;m_dbValue, pRoot2-&gt;m_dbValue))
        return false;

    return DoesTree1HaveTree2(pRoot1-&gt;m_pLeft, pRoot2-&gt;m_pLeft) &amp;&amp;
        DoesTree1HaveTree2(pRoot1-&gt;m_pRight, pRoot2-&gt;m_pRight);
}

bool Equal(double num1, double num2)
{
    if((num1 - num2 &gt; -0.0000001) &amp;&amp; (num1 - num2 &lt; 0.0000001))
        return true;
    else
        return false;
}
</code></pre>
<p>书中思路分析很清楚，包括对函数的分割和返回值的设置，以及对nullptr的检测。<br>
然后最重点的就是对double和float的相等判断条件。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[空指针、野指针与空悬指针]]></title>
        <id>https://lixin-scut.github.io//post/kong-zhi-zhen-ye-zhi-zhen-yu-kong-xuan-zhi-zhen</id>
        <link href="https://lixin-scut.github.io//post/kong-zhi-zhen-ye-zhi-zhen-yu-kong-xuan-zhi-zhen">
        </link>
        <updated>2020-02-22T10:09:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="空指针">空指针</h3>
<p>被初始化或赋值为nullptr、NULL或者0的指针</p>
<h3 id="野指针">野指针</h3>
<p>就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）指针变量在定义时如果未初始化，其值是随机的，指针变量的值是别的变量的地址，意味着指针指向了一个地址是不确定的变量，此时去解引用就是去访问了一个不确定的地址，所以结果是不可知的。</p>
<h3 id="空悬指针">空悬指针</h3>
<p>当指针所指向的对象已经被销毁或者被析构之后，指针对象本身还是存在的，但是已经成为了空悬指针。</p>
<pre><code>int * func ( void )
{
    int num = 123;
    /* ... */
    return &amp;num; //返回一个空悬指针
}
</code></pre>
<p>实验：</p>
<pre><code>int main() {
    int* nullPtr = nullptr;
    int* unknowPtr ;
    int* emptyPtr = new int(100);
    delete emptyPtr;
    cout &lt;&lt; nullPtr &lt;&lt; &quot; &quot; &lt;&lt; unknowPtr &lt;&lt; &quot; &quot; &lt;&lt; emptyPtr &lt;&lt; endl;
    cout&lt;&lt; *emptyPtr &lt;&lt; endl; //cannot *nullPtr,*unknowPtr,*emptyPtr
}
</code></pre>
<p>环境：Clion<br>
编译器：clang-902.0.39.2</p>
<p>结果</p>
<pre><code>0x0 0x0 0x7fcfe4400370
100
</code></pre>
<p>可以看到这个编译器下，空指针和野指针都是指向了同一个地址，所以都不能解引用，而emptyPtr还有趣，解引用后还是同一个值，查阅之后发现原来delete也不是立马把内存中的对象清除，而是先保留，等到有对象需要堆内存的时候可以直接清除。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ C++ 11 智能指针]]></title>
        <id>https://lixin-scut.github.io//post/c-11-zhi-neng-zhi-zhen</id>
        <link href="https://lixin-scut.github.io//post/c-11-zhi-neng-zhi-zhen">
        </link>
        <updated>2020-02-22T08:02:42.000Z</updated>
        <content type="html"><![CDATA[<p>需要注意的点：</p>
<ol>
<li>shared_ptr：允许多个指针指向同一个对象；</li>
<li>unique_ptr独占所指向的对象</li>
<li>weak_ptr 弱引用，指向shared_ptr管理的对象 。</li>
<li>这三种都定义在memory头文件</li>
<li>智能指针也是模板，创建时必须提供指针指向的类型</li>
<li>默认初始化的智能指针保存一个空指针</li>
<li>智能指针并不支持指针算术操作</li>
<li>使用get时，若智能指针释放了其对象，返回的指针所指向的对象也就消失了</li>
<li>将shared_ptr放在容器中容易因重新排序等因素忘记进行销毁</li>
<li>使用动态内存的原因：1.不知道需要使用多少对象2.不知道所需对象的准确类型3.！！程序需要在多个对象间共享数据，使用动态内存的一个常见原因就是允许多个对象共享相同的状态（亦即如果进行拷贝操作，实际上还是只有一个对象在内存中，而不是真的复制多个对象）</li>
<li>默认情况下动态分配的对象是默认初始化的，所以内置类型或组合类型（类中包含的类）的对象的值将是未定义的，而类类型对象将用默认构造函数进行初始化（值初始化的内置类型有着良好定义的值，而默认初始化的值则是未定义的）</li>
<li>传递给delete的指针必须指向动态分配的内存，或者是一个空指针，释放一块并非new分配的内存，或者将相同的指针值释放多次，其行为都是未定义的（能通过编译，但是编译器会自动delete栈内存，智能指针又delete一次，所以造成二次delete）。</li>
<li>通常情况下编译器不能分辨一个指针指向静态还是动态分配的对象，同样也不能分辨指针指向的内存是否已被释放，所以错误的delete表达式都会被通过</li>
<li>单接受指针参数的智能指针构造函数explicit的，所以我们不能将一个内置指针隐式转换为一个智能指针，必须使用直接初始化的形式来初始化一个智能指针，同样地一个返回shared_ptr的函数不能在其返回语句中隐式转换一个普通指针<br>
使用get返回的指针的代码不能delete此指针</li>
<li>永远不要用get初始化另一个智能指针或者为另一个智能指针赋值（因为不知道对象何时会被销毁）</li>
<li>当发生异常时，内置指针直接管理的内存是不会自动释放（但是智能指针的会检查引用计数并销毁）</li>
<li>不能拷贝unique_ptr的规则有一个例外，我们可以拷贝或赋值一个将要被销毁的unique_ptr</li>
<li>当我们创建一个weak_ptr时，要用一个shared_ptr来初始化它</li>
<li>由于对象可能不存在，我们不能使用weak_ptr直接访问对象，而必须调用lock，此函数检查weak_ptr指向的对象是否仍存在并返回相应的shared_ptr。</li>
<li>小心造成shared_ptr循环引用的问题：循环引用就是：两个对象互相使用一个shared_ptr成员变量指向对方。</li>
<li>弱指针用于专门解决shared_ptr循环引用的问题，weak_ptr不会修改引用计数，即其存在与否并不影响对象的引用计数器。</li>
</ol>
<p>补充：<br>
scoped_ptr是一个类似于auto_ptr的智能指针，它包装了new操作符在堆上分配的动态对象，能够保证动态创建的对象在任何时候都可以被正确的删除。但是scoped_ptr的所有权更加严格，不能转让，一旦scoped_pstr获取了对象的管理权，你就无法再从它那里取回来。<br>
scoped_str的构造函数接受一个类型为T* 的指针p，创建出一个scoped_ptr对象，并在内部保存指针参数p。p必须是一个new表达式动态分配的结果，或者是一个空指针(0)。当scoped_ptr对象的生命周期结束时，析构函数~scoped_ptr()会使用delete操作自动销毁所保存的指针对象，从而正确的回收资源。<br>
scoped_ptr同时把拷贝构造函数和赋值操作都声明为私有的，禁止对智能指针的复制操作，保证了被它管理的指针不能被转让所有权。</p>
<p>enable_shared_from_this ：这是一个以其派生类为模板类型实参的 基类模板，当类继承自它时，this指针就能变身为shared_ptr<br>
为了使用 shared_from_this()，类的对象 不能是 stack object,必须是 heap object且由shared_ptr管理其生命期<br>
注意一点，shared_from_this()不能在构造函数里调用，因为在构造StockFactory 的时候，它还没有被交给shared_ptr接管。</p>
<p>但为了防止拷贝shared_ptr造成生命期延长，可以使用weak_ptr，在回调的时候先尝试提升为shared_ptr,如果提升成功，说明接受回调的对象还健在，那么就执行回调；如果提升失败，就说明对象已经被销毁了。</p>
<p>参考资料：<br>
《C++primer》<br>
12动态内存<br>
<strong>静态内存</strong>用于保存局部static对象、类static数据成员以及定义在任何函数之外的变量<br>
<strong>栈内存</strong>用于保存定义在函数内的非static对象<br>
分配在静态内存和栈内存中的对象由<strong>编译器自动创建和销毁</strong>，栈对象在程序运行时才存在，static对象在使用前分配，程序结束时销毁<br>
除了静态内存和栈内存，每个程序还有一个<strong>内存池，称为自由空间或堆</strong>，程序用堆来存储动态分配的对象</p>
<p>12.1动态内存和智能指针<br>
动态内存的管理，new：在动态内存中为对象分配空间并返回一个指向该对象的指针，可以对其进行初始化；delete：接受一个动态对象的指针，销毁该对象，并释放与之关联的内存<br>
新的标准库为了使用动态内存提供了两种智能指针，与常规指针相比重要的区别在于它负责<strong>自动释放</strong>所指对象，<br>
shared_ptr：允许多个指针指向同一个对象；unique_ptr独占所指向的对象 weak_ptr 弱引用，指向shared_ptr管理的对象 。这三种都定义在memory头文件中</p>
<p>12.1.1shared_ptr<br>
智能指针也是模板，创建时必须提供指针指向的类型<br>
默认初始化的智能指针保存一个空指针<br>
智能指针并不支持指针算术操作<br>
<img src="https://lixin-scut.github.io//post-images/1582359705706.png" alt=""></p>
<p>！！使用get时，若智能指针释放了其对象，返回的指针所指向的对象也就消失了<br>
最安全的分配和使用动态内存的方法是调用一个名为make_shared的标准库函数，此函数在动态内存中分配一个对象并初始化它，返回指向此对象的shared_ptr，make_shared定义在头文件memory中<br>
make_shared用其参数来构造给定类型的对象，比如调用<code>make_shared&lt;string&gt;</code>必须传递与string某个构造函数相匹配的参数。如果不传递任何参数，对象就会进行值初始化<br>
当进行拷贝赋值操作时，每个shared_ptr都会记录有多少个其他shared_ptr指向相同的对象<br>
我们可以认为每个shared_ptr都有一个关联计数器，通常称其为引用计数。无论何时我们拷贝一个shared_ptr都会递增计数器<br>
递增计数器的情况1.用一个shared_ptr初始化另外一个shared_ptr2.将shared_ptr作为参数传递给一个函数3. shared_ptr作为函数的返回值<br>
递减计数器 1.给shared_ptr赋一个新值2. shared_ptr被销毁3. 局部的shared_ptr离开其作用域（在函数中定义的shared_ptr都是局部变量，在函数执行结束后都会被销毁）<br>
一旦shared_ptr的计数器变为0，就会自动释放所管理的对象，可以确保分配的对象在恰当的时刻被释放<br>
每个类都有一个析构函数，控制此类型的对象销毁时会做什么操作<br>
将shared_ptr放在容器中容易因重新排序等因素忘记进行销毁，导致内存浪费，所以要记得用erase删除容器中不需要的shared_ptr元素<br>
使用动态内存的原因：1.不知道需要使用多少对象2.不知道所需对象的准确类型3.！！程序需要在多个对象间共享数据</p>
<p>当两个对象共享底层的数据时，当某个对象被销毁，不能单方面地销毁底层数据<br>
使用动态内存的一个常见原因就是允许多个对象共享相同的状态<br>
<code>initializer_list&lt;string&gt;</code>类型参数接受一个初始化器的花括号列表</p>
<p>12.1.2直接管理内存<br>
运算符new分配内存，delete释放new分配的内存<br>
相对于智能指针，使用这两个运算符管理内存非常容易出错，它们不能依赖类对象拷贝、赋值和销毁操作的任何默认定义<br>
使用智能指针的程序更容易编写和调试<br>
在自由空间分配的内存时无名的，所以new无法为其分配的对象命名，而是返回一个指向该对象的指针<br>
<code>int *pi = new int;	//pi指向一个动态分配的，未初始化的无名对象；</code><br>
默认情况下动态分配的对象是默认初始化的，所以内置类型或组合类型（类中包含的类）的对象的值将是未定义的，而类类型对象将用默认构造函数进行初始化<br>
我们可以用直接初始化的方式来初始化一个动态分配的对象，新标准下也可以用花括号</p>
<p>（注意第二个为拷贝初始化而非直接初始化）<br>
也可以对动态分配的对象进行值初始化，只需在类型名后面加上一对空括号<br>
对于类类型来说，由于有构造函数所以值初始化意义不大，但是对于内置类型，两种类型的差别很大，值初始化的内置类型有着良好定义的值，而默认初始化的值则是未定义的<br>
最好对动态分配的对象进行初始化，原因与初始化变量相同，防止调用未定义值的对象<br>
如果我们提供了一个括号包围的初始化器就可以auto，从此初始化器来推断我们想要分配的对象的类型，但是只有当括号中仅有单一初始化器时才可以使用auto</p>
<p>用new 分配const 对象时合法的，但是必须对const对象进行初始化，然后new返回的指针是一个指向const 的指针<br>
一旦内存耗尽，new表达式就会失败，默认情况下会抛出一个类型为bad_alloc的异常，<br>
使用定位new 的方式阻止它抛出异常：<code>int *p2 = new (nothrow) int;</code>如果分配失败，返回一个空指针<br>
定位new表达式允许我们向new传递额外的参数，例子中我们传递给它一个由标准库定义的名为nothrow的对象，如果将nothrow传递给new，就是告诉他不能抛出异常</p>
<p>delete也是销毁给定指针指向的对象，释放相应的内存<br>
传递给delete的指针必须指向动态分配的内存，或者是一个空指针，释放一块并非new分配的内存，或者将相同的指针值释放多次，其行为都是未定义的<br>
释放一个空指针总是没有错误的<br>
通常情况下编译器不能分辨一个指针指向静态还是动态分配的对象，同样也不能分辨指针指向的内存是否已被释放，所以错误的delete表达式都会被通过<br>
const对象的值不能被改变，但是它本身是可以被销毁的<br>
对于一个由内置指针管理的动态对象，直到被delete显式释放之前它都是存在的<br>
所以调用者必须记得释放内存<br>
与类类型不同，内置类型的对象被销毁时什么也不会发生，特别是一个指针离开其作用域时其指向的对象什么也不会发生，如果这个指针指向的是动态内存，那么内存将不会被自动释放，所以由内置指针管理的动态内存在被显式释放之前一直都会存在<br>
忘记delete释放动态内存就会导致内存泄漏问题<br>
当我们delete一个指针后指针值就变为无效，虽然指针已经无效，但是该指针仍然保存着（已经释放后）动态内存的地址，在delete后指针变成空悬指针<br>
避免空悬指针需要在指针离开其作用域之前释放掉它所关联的内存 重制指针值为nullptr<br>
但上述方法对于指向同一内存的多个指针无效，只能作用于单一指针</p>
<p>12.1.3 shared_ptr和new结合使用<br>
我们可以用new返回的指针来初始化智能指针<br>
单接受指针参数的智能指针构造函数explicit的，所以我们不能将一个内置指针隐式转换为一个智能指针，必须使用直接初始化的形式来初始化一个智能指针<br>
一个返回shared_ptr的函数不能在其返回语句中隐式转换一个普通指针</p>
<p>默认情况下，一个用来初始化智能指针的普通指针必须指向动态内存，但我们可以将智能指针绑定到一个指向其他类型的资源（例如类类型）的指针上，但是这样做必须提供自己的操作来代替默认delete<br>
shared_ptr可以协调对象的析构，但这仅限于自身的拷贝（也就是shared_ptr之间）<br>
当临时shared_ptr对象被销毁时，它所指向的内存会被释放<br>
当将一个shared_ptr绑定到一个普通指针时，我们就将内存的管理责任交给了这个shared_ptr，一旦这样做了，我们就不应该再使用内置指针来访问shared_ptr所指向的内存了<br>
使用内置指针来访问智能指针所负责的对象是很危险的，因为我们<strong>无法知道对象何时会被销毁。</strong><br>
智能指针类型定义了一个名为get的函数，它返回一个内置指针，指向智能指针管理的对象，get函数主要是为了向不能使用智能指针的代码传递一个内置指针。<strong>使用get返回的指针的代码不能delete此指针</strong><br>
只有在确定代码不会delete指针的情况下才能使用get，永远不要用get初始化另一个智能指针或者为另一个智能指针赋值（因为不知道对象何时会被销毁）</p>
<p>我们可以用reset来将一个指向相同值的新的指针（一个新的对象的指针）赋予一个shared_ptr（相当于复制其值然后创建一个新的指针）</p>
<p>习题12.10<br>
正确，其实就是将p的指针值进行拷贝，注意会引发指针计数值+1<br>
习题12.11<br>
编译器不会报错，但是get返回的指针是普通指针，此时不会引发计数值+1，导致可能get返回指针指向的对象可能被销毁而process继续调用。<br>
习题11.12<br>
(a)合法，首先复制sp，将sp的引用计数+1，然后程序结束再-1<br>
(b)不合法，智能指针的构造函数是explicit的，不能进行隐式的转换<br>
(c)错误，同上<br>
(d)合法！但是程序结束后会释放内存，p变成空悬指针。<br>
注意<code>process(shared_ptr&lt;int&gt;(p))</code>虽然是复制，但是指向的对象相同，智能指针照样会计数+1然后计数-1销毁内存，而因为两者指向相同的对象，导致原来的普通指针p变成空悬指针。<br>
相同12.13<br>
删除p之后，会导致p指向的内存被释放，此时sp就会变成空悬指针，在sp指针被销毁时，该块内存会被二次delete，执行后产生错误：double free</p>
<p>12.1.4智能指针和异常<br>
当发生异常时，内置指针直接管理的内存是不会自动释放（但是智能指针的会检查引用计数并销毁）<br>
类需要用户显式地释放所使用的任何资源<br>
可以使用shared_ptr来管理其他对象（比如类），但是需要定义一个对应的函数来代替delete<br>
<img src="https://lixin-scut.github.io//post-images/1571232741628.png" alt=""></p>
<p>12.1.5unique_ptr<br>
一个unique_ptr拥有它所指向的对象，与shared_ptr不同，某个时刻只能有一个unique_ptr指向一个给定对象。当unique_ptr被销毁时，它所指向的对象也会被销毁<br>
unique_ptr与shared_ptr不同，没有类似make_shared的标准库函数，当我们定义一个unique_ptr时，需要将其绑定到一个new返回的指针上，初始化unique_ptr必须采用直接初始化的形式<br>
unique_ptr不支持普通的拷贝或赋值操作<br>
1.unique_ptr不允许拷贝是指不能用一个unique_ptr拷贝到另一个unique_ptr，但是如果使用new出来的普通指针初始化unique_ptr是可以的，<br>
例如</p>
<pre><code>int *pi =new int(42);
unique_ptr&lt;int&gt; p1(pi);
</code></pre>
<p>2.并非是new出来的指针，在栈内存而不是动态内存，所以不应使用智能指针（通过编译，但是编译器会自动delete栈内存，智能指针又delete一次，所以造成二次delete）<br>
虽然我们不能拷贝或赋值unique_ptr,但可以通过调用release或reset将指针的所有权从一个（非const）unique_ptr转移给另一个unique_ptr<br>
release成员返回unique_ptr当前保存的指针并将其置为空<br>
reset成员接受一个可选的指针参数，令unique_ptr重新指向给定的指针。如果unique_ptr不为空，它原来指向的对象就会被释放<br>
调用release会切断unique_ptr和它原来管理的对象间的联系，release返回的指针通常被用来初始化另一个智能指针或给另一个智能指针赋值。如果我们不用另一个智能指针来保存release返回的指针，我们的程序就要负责资源的释放（注意此时对象还没被销毁）<br>
不能拷贝unique_ptr的规则有一个例外，我们可以拷贝或赋值一个将要被销毁的unique_ptr<br>
unique_ptr默认情况下使用delete释放它指向的对象，但同时我们可以重载unique_ptr中默认的删除器<br>
我们必须在尖括号中unique_ptr指向类型之后提供删除器类型</p>
<p>由于decltype(end_connection)返回一个函数类型，所以我们必须添加一个*来指出我们正在使用该类型的一个指针</p>
<p>12.1.6weak_ptr<br>
weak_ptr是一种不控制所指向对象生存期的智能指针，它指向由一个shared_str管理的对象。将一个weak_ptr绑定到一个shared_ptr，<strong>不会改变shared_ptr的引用计数</strong><br>
当shared_ptr引用计数为0时，即使有weak_ptr指向对象，对象也还是会被释放</p>
<p>当我们创建一个weak_ptr时，<strong>要用一个shared_ptr来初始化它</strong><br>
由于对象可能不存在，我们<strong>不能使用weak_ptr直接访问对象，而必须调用lock</strong>，此函数检查weak_ptr指向的对象是否仍存在<br>
通过weak_ptr，<strong>不会影响</strong>一个给定的StrBlob所指向的vector的<strong>生存期</strong>，但是可以阻止用户访问一个不再存在的vector的企图。<strong>（强制使用lock返回shared_ptr）</strong></p>
<p>习题感悟<br>
私有函数private相比于public公有函数的好处在于某些时候可以不用考虑判断条件，比如不用担心会向size_type传入负数<br>
q指针赋给r,如果释放了q，则此时的r指针为空悬指针。<br>
注意<code>process(shared_ptr&lt;int&gt;(p))</code>虽然是复制，但是指向的对象相同，智能指针照样会计数+1然后计数-1销毁内存，而因为两者指向相同的对象，导致原来的普通指针p变成空悬指针。<br>
删除p之后，会导致p指向的内存被释放，此时sp就会变成空悬指针，在sp指针被销毁时，该块内存会被二次delete，执行后产生错误：double free<br>
1.unique_ptr不允许拷贝是指不能用一个unique_ptr拷贝到另一个unique_ptr，但是如果使用new出来的普通指针初始化unique_ptr是可以的，<br>
例如</p>
<pre><code>int *pi =new int(42);
unique_ptr&lt;int&gt; p1(pi);
</code></pre>
<p>2.并非是new出来的指针，在栈内存而不是动态内存，所以不应使用智能指针（通过编译，但是编译器会自动delete栈内存，智能指针又delete一次，所以造成二次delete）<br>
注意对于友元的声明，等于声明加上一个friend，类的声明必须带上class或者struct，但是友元声明不等同于普通声明<br>
涉及了两个class相互引用的问题<br>
一：2个类需要在一个文件中 二：这2个函数必须先声明不定义 三: 函数的定义必须放到StrBlobPtr定义的后面</p>
<p>博客：<a href="https://blog.csdn.net/yishizuofei/article/details/79136733">C++智能指针scoped_ptr的原理和使用</a></p>
<p>《muduo》<br>
<img src="https://lixin-scut.github.io//post-images/1582467419298.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582467471811.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582467490986.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内存泄漏]]></title>
        <id>https://lixin-scut.github.io//post/nei-cun-xie-lou</id>
        <link href="https://lixin-scut.github.io//post/nei-cun-xie-lou">
        </link>
        <updated>2020-02-22T07:39:45.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>内存泄漏的定义<br>
内存泄漏是指由于疏忽或错误造成了程序未能释放掉不再使用的内存的情况。内存泄漏并非指内存在物理上消失，而是应用程序分配某段内存后，由于设计错误，失去了对该段内存的控制；</li>
<li>内存泄露的原因和后果</li>
</ol>
<p>总结下来，内存泄露常见的有几个原因：</p>
<p>1、编码错误：malloc、realloc、new申请的内存在堆上，需要手动显示释放，调用free或delete。申请和释放必须成对出现malloc/realloc对应free，new对应delete。前者不会运行构造/析构函数，后者会。对于C++内置数据类型可能没差别，但是对于自己构造的类，可能在析构函数中释放系统资源或释放内存，所以要对应使用。</p>
<p>2、“无主”内存：申请内存后，指针指向内存的起始地址，若丢失或修改这个指针，那么申请的内存将丢失且没有释放。</p>
<p>3、异常分支导致资源未释放：程序正常执行没有问题，但是如果遇到异常，正常执行的顺序或分支会被打断，得不到执行。所以在异常处理的代码中，要确保系统资源的释放。</p>
<p>4、隐式内存泄露：程序运行中不断申请内存，但是直到程序结束才释放。有些服务器会申请大量内存作为缓存，或申请大量资源作为线程池，这些资源一直占用直到程序退出。服务器运行起来一般持续几个月，不及时释放可能会导致内存耗尽。</p>
<p>5、类的析构函数为非虚函数：析构函数必须为虚函数才能利用多态来调用指针指向对象的析构函数，而不是基类的析构函数。</p>
<p>只发生一次小的内存泄漏可能不被注意，但泄漏大量内存的程序将会性能下降到内存逐渐用完，导致程序崩溃；</p>
<ol start="3">
<li>如何排除<br>
使用工具软件BoundsChecker，BoundsChecker是一个运行时错误检测工具，它主要定位程序运行时期发生的各种错误；<br>
调试运行DEBUG版程序，运用以下技术：CRT(C run-time libraries)、运行时函数调用堆栈、内存泄漏时提示的内存分配序号(集成开发环境OUTPUT窗口)，综合分析内存泄漏的原因，排除内存泄漏。</li>
</ol>
<p>检测内存泄漏的办法：<br>
一、<br>
在Linux平台上 有valgrind可以非常方便的帮助我们定位内存泄漏，因为Linux在开发领域的使用场景大多是跑服务器，再加上它的开源属性，相对而言，处理问题容 易形成“统一”的标准。而在Windows平台，服务器和客户端开发人员惯用的调试方法有很大不同。下面结合我的实际经验，整理下常见定位内存泄漏的方 法。<br>
注意：我们的分析前提是Release版本，因为在Debug环境下，通过VLD这个库或者CRT库本身的内存泄漏检测函数能够分析出内存泄漏，相对而言比较简单。而服务器有很多问题需要在线上并发压力情况下才出现，因此讨论Debug版调试方法意义不大。</p>
<p>二、对象计数<br>
方法：在对象构造时计数++，析构时–，每隔一段时间打印对象的数量<br>
优点：没有性能开销，几乎不占用额外内存。定位结果精确。<br>
缺点：侵入式方法，需修改现有代码，而且对于第三方库、STL容器、脚本泄漏等因无法修改代码而无法定位。</p>
<p>三、重载new和delete<br>
方法：重载new/delete，记录分配点（甚至是调用堆栈），定期打印。<br>
优点：没有看出<br>
缺点：侵入式方法，需将头文件加入到大量源文件的头部，以确保重载的宏能够覆盖所有的new/delete。记录分配点需要加锁（如果你的程序是多线程），而且记录分配要占用大量内存（也是占用的程序内存）。</p>
<p>四、Hook Windows系统API<br>
方法：使用微软的detours库，hook分配内存的系统Api：HeapAlloc/HeapRealloc/HeapFree（new/malloc的底层调用）,记录分配点，定期打印。<br>
优点：非侵入式方法，无需修改现有文件（hook api后，分配和释放走到自己的钩子函数中），检查全面，对第三方库、脚本库等等都能统计到。<br>
缺点：记录内存需要占用大量内存，而且多线程环境需要加锁。</p>
<p>五、使用DiagLeak检测<br>
微软出品的内存泄漏分析工具，原理同hookapi方式。配合LDGraph可视化展示内存分配数据，更方便查找泄漏。<br>
1.在IDE工程选项里面配置Release版本也生成调试信息，发布时，将pdb文件和exe文件一起发布。<br>
2.程序运行后，打开LeakDiag，设置Symbol path<br>
3.定期Log下目标进程的内存分配情况，通过LDGraph打印分配增长情况，来发现内存泄漏。<br>
优点：同hookapi方法，非侵入式修改，无需做任何代码改动。跟踪全面。可视化分析堆栈一览无余！<br>
缺点：对性能有影响，hook分配加锁，遍历堆栈。但是不会占用目标进程的自身内存。</p>
<ol start="4">
<li>
<p>解决方法<br>
少用堆内存多用栈内存，RAII与智能指针（正好对应两种检测方法）<br>
a)	RAII全称是“Resource Acquisition is Initialization”，直译过来是“资源获取即初始化”，也就是说在构造函数中申请分配资源，在析构函数中释放资源。因为C++的语言机制保证了，当一个对象创建的时候，自动调用构造函数，当对象超出作用域的时候会自动调用析构函数。所以，在RAII的指导下，我们应该使用类来管理资源，将资源和对象的生命周期绑定。<br>
b)	智能指针（std::shared_ptr和std::unique_ptr）即RAII最具代表的实现，使用智能指针，可以实现自动的内存管理，再也不需要担心忘记delete造成的内存泄漏。毫不夸张的来讲，有了智能指针，代码中几乎不需要再出现delete了。</p>
</li>
<li>
<p>检查、定位内存泄漏<br>
在Debug环境下，通过VLD这个库或者CRT库本身的内存泄漏检测函数能够分析出内存泄漏，相对而言比较简单。<br>
内存泄露的关键就是记录分配的内存和释放内存的操作，看看能不能匹配。跟踪每一块内存的声明周期，例如：每当申请一块内存后，把指向它的指针加入到List中，当释放时，再把对应的指针从List中删除，到程序最后检查List就可以知道有没有内存泄露了。Window平台下的Visual Studio调试器和C运行时（CRT）就是用这个原理来检测内存泄露。</p>
</li>
</ol>
<p>在VS中使用时，需加上</p>
<pre><code>#define _CRTDBG_MAP_ALLOC
#include &lt;crtdbg.h&gt;
</code></pre>
<p>crtdbg.h的作用是将malloc和free函数映射到它们的调试版本_malloc_dbg和_free_dbg，这两个函数将跟踪内存分配和释放（在Debug版本中有效）<br>
<code>_CrtDumpMemoryLeaks();</code><br>
函数将显示当前内存泄露，也就是说程序运行到此行代码时的内存泄露，所有未销毁的对象都会报出内存泄露，因此要让这个函数尽量放到最后。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表 题25:合并两个排序的链表]]></title>
        <id>https://lixin-scut.github.io//post/lian-biao-ti-25he-bing-liang-ge-pai-xu-de-lian-biao</id>
        <link href="https://lixin-scut.github.io//post/lian-biao-ti-25he-bing-liang-ge-pai-xu-de-lian-biao">
        </link>
        <updated>2020-02-21T16:07:34.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>题目描述<br>
输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>
</blockquote>
<pre><code>class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        ListNode *virHead=new ListNode(-1);
        ListNode *cur=virHead;
        while(pHead1&amp;&amp;pHead2){
            if(pHead1-&gt;val&lt;=pHead2-&gt;val)
                cur-&gt;next=pHead1,pHead1=pHead1-&gt;next;
            else
                cur-&gt;next=pHead2,pHead2=pHead2-&gt;next;
            cur=cur-&gt;next;
        }
        cur-&gt;next=pHead1?pHead1:pHead2;//这里很重要，配合判断条件能够避免输入NULL指针的情况
        return virHead-&gt;next;
    }
};
</code></pre>
<p>书本题解：</p>
<blockquote>
<p>最容易犯两种错误：一是在写代码之前没有想清楚合并的过程，最终合并出来的链表要么中间断开了、要么并没有做到递增排序；二是代码在鲁棒性方面存在问题，程序一旦有特殊的输入（如空链表）就会崩溃。<br>
首先分析合并两个链表的过程。我们的分析从合并两个链表的头节点 开始。链表1的头节点的值小于链表2的头节点的值，因此链表1的头节点将是合并后链表的头节点<br>
我们继续合并两个链表中剩余的节点。在 两个链表中剩下的节点依然是排序的，因此合并这两个链表的步骤和前面 的步骤是一样的。我们还是比较两个头节点的值。此时链表2的头节点的 值小于链表1的头节点的值，因此链表2的头节点的值将是合并剩余节点 得到的链表的头节点。我们把这个节点和前面合并链表时得到的链表的尾节点<br>
当我们得到两个链表中值较小的头节点并把它链接到已经合并的链表 之后，两个链表剩余的节点依然是排序的，因此合并的步骤和之前的步骤是一样的。这就是典型的递归过程，我们可以定义递归函数完成这一合并过程<br>
每当代码试图访问空指针指向的内 存时程序就会崩溃，从而导致鲁棒性问题。在本题中一旦输入空的链表就 会引入空的指针，因此我们要对空链表单独处理。当第一个链表是空链表, 也就是它的头节点是一个空指针时，那么把它和第二个链表合并，显然合 并的结果就是第二个链表。同样，当输入的第二个链表的头节点是空指针 的时候，我们把它和第一个链表合并得到的结果就是第一个链表。如果两个链表都是空链表，则合并的结果是得到一个空链表。</p>
</blockquote>
<pre><code>ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
{
    if(pHead1 == nullptr)
        return pHead2;
    else if(pHead2 == nullptr)
        return pHead1;

    ListNode* pMergedHead = nullptr;

    if(pHead1-&gt;m_nValue &lt; pHead2-&gt;m_nValue)
    {
        pMergedHead = pHead1;
        pMergedHead-&gt;m_pNext = Merge(pHead1-&gt;m_pNext, pHead2);
    }
    else
    {
        pMergedHead = pHead2;
        pMergedHead-&gt;m_pNext = Merge(pHead1, pHead2-&gt;m_pNext);
    }

    return pMergedHead;
}
</code></pre>
<p>我感觉我的程序更加精简，同时兼顾了鲁棒性，然后书本的题解使用了递归思想，非常巧妙，但是需要额外的判断条件。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表 题24:反转链表]]></title>
        <id>https://lixin-scut.github.io//post/lian-biao-ti-24fan-zhuan-lian-biao</id>
        <link href="https://lixin-scut.github.io//post/lian-biao-ti-24fan-zhuan-lian-biao">
        </link>
        <updated>2020-02-21T02:24:11.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>题目描述<br>
输入一个链表，反转链表后，输出新链表的表头。链表节点定义如下：<br>
/*<br>
struct ListNode {<br>
int val;<br>
struct ListNode <em>next;<br>
ListNode(int x) :<br>
val(x), next(NULL) {<br>
}<br>
};</em>/</p>
</blockquote>
<p>同样地需要三个指针，注意一定要记得<code>ListNode *pre,*cur,*cur_next;</code>是每个变量都需要*号，否则的话就等于ListNode了<br>
然后其实这一题不需要虚拟头节点，完全可以pre声明为NULL，配合while(cur!=NULL)甚至可以省略掉判断头节点是否为NULL</p>
<pre><code>class Solution {
public:
    ListNode* ReverseList(ListNode* pHead) {
        ListNode *pre,*cur,*cur_next;
        pre=NULL;
        cur=pHead;
        while(cur!=NULL){
            cur_next=cur-&gt;next;
            cur-&gt;next=pre;
            pre=cur;
            cur=cur_next;
        }
        return pre;
    }
};
</code></pre>
<p>书本题解：<br>
由于节点i的m_pNext指向了它的前一个节点，导致我们无法在链表中遍历到节点j。为了避免链表在节点i处断开，我们需要在调整节点i的m_pNext之前，把节点j保存下来。<br>
也就是说，我们在调整节点i的m_pNext指针时，除了需要知道节点i 本身，还需要知道i的前一个节点h,因为我们需要把节点i的m_pNext指向节点h。同时，我们还需要事先保存i的一个节点j，以防止链表断开。 因此，相应地我们需要定义3个指针，分别指向当前遍历到的节点、它的 前一个节点及后一个节点。<br>
最后我们试着找到反转后链表的头节点。不难分析出反转后链表的头节点是原始链表的尾节点。什么节点是尾节点？自然是m_pNext为nullptr 的节点。<br>
需要避免的问题：<br>
•	输入的链表头指针为nullptr或者整个链表只有一个节点时，程序立即崩溃。<br>
•	反转后的链表出现断裂。<br>
•	返回的反转之后的头节点不是原始链表的尾节点。<br>
至少应该想到以下几类测试用例对代码进行功能测试：<br>
•	输入的链表头指针是nullptr。<br>
•	输入的链表只有一个节点。<br>
•	输入的链表有多个节点。</p>
<pre><code>ListNode* ReverseList(ListNode* pHead)
{
    ListNode* pReversedHead = nullptr;
    ListNode* pNode = pHead;
    ListNode* pPrev = nullptr;
    while(pNode != nullptr)
    {
        ListNode* pNext = pNode-&gt;m_pNext;

        if(pNext == nullptr)
            pReversedHead = pNode;

        pNode-&gt;m_pNext = pPrev;

        pPrev = pNode;
        pNode = pNext;
    }

    return pReversedHead;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Buffer类]]></title>
        <id>https://lixin-scut.github.io//post/buffer-lei</id>
        <link href="https://lixin-scut.github.io//post/buffer-lei">
        </link>
        <updated>2020-02-20T11:34:36.000Z</updated>
        <content type="html"><![CDATA[<p>Buffer是非阻塞TCP网络编程必不可少的东西，需要用Buffer来处理数据输入和数据输出。<br>
Buffer和Timestamp是唯独两个具有值语义的对象。<br>
其中Timestamp是poll(2)返回的时刻，即消息到达的时刻，这个时刻早于读到 数据的时刻(read(2)调用或返回)。因此如果要比较准确地测量程序处理消息的内 部延迟，应该以此时刻为起点，否则测出来的结果偏小，特别是处理并发连接时效果 更明显。</p>
<p>Buffer类的设计与使用<br>
非阻塞IO总是与IO复用函数（select/poll/epoll）一起使用，所以应用层的buffer是必需的。non-blocking IO的核心思想是避免阻塞在read或write或其他IO系统调 用上，这样可以最大限度地复用thread-of-control,让一个线程能服务于多个socket 连接。IO线程只能阻塞在IO multiplexing函数上，select/poll/epoll_wait。同时应用层的缓冲是必需的，每个TCP socket都要有input buffer和 output buffer</p>
<p>对于应用程序而言，它只管生成数据，它不应该关心到底数据是一次性发送还是 分成几次发送，这些应该由网络库来操心，程序只要调用TcpConnection::send()就 行了，网络库会负责到底。网络库应该接管这剩余数据，把它保存在该TCP connection的output buffer里，然后注册ROLLOUT事件，一旦socket变得可写就立 刻发送数据。如果还有剩余，网络库应该继续关注ROLLOUT事件；如果写完了数据,网络库应该停止关注ROLLOUT, 以免造成 busy loopo</p>
<p>TcpConnection必须要有output buffer，并且当输出缓冲中还有待发送的数据时，程序希望关闭连接的话，此时网络库必须等待数据发送完毕，而不能立即关闭连接</p>
<p>因为使用的是Epoll的LT电平触发，所以网络库在处理socket可读事件的时候必须一次性把socket中的数据读完（从内核buffer到应用层buffer），否则会一直触发POLLIN事件</p>
<p>此时就会出现“粘包”现象，亦即buffer中有部分数据不完整的情况，需要使用codec分包，等待构成一条完整的信息再通知程序的业务逻辑</p>
<p>为什么不用边缘触发edge trigger 一是与传统的poll兼容，二是电平触发编程更容易，三是读写的时候不必等候出现EAGAIN，可以节省系统调用，降低延迟<br>
事件触发采用level trigger,因此并不会反复调用read()直到其返回EAGAIN,从而可以降低消息处理的延迟。</p>
<p>Buffer类的实现细节<br>
Buffer不是线程安全的<br>
•对于input buffer, onMessage()回调始终发生在该TcpConnection所属的那个 IO线程，应用程序应该在onMessage()完成对input buffer的操作，并且不要 把input buffer暴露给其他线程。这样所有对input buffer的操作都在同一个线 程，Buffer class不必是线程安全的。<br>
•对于output buffer,应用程序不会直接操作它，而是调用TcpConnection::send ()来发送数据，后者是线程安全的。<br>
如果TcpConnection:: send()调用发生在该TcpConnection所属的那个IO线程, 那么它会转而调用TcpConnection:: sendlnLoop , sendlnLoop()会在当前线程(也 就是IO线程)操作output buffer；如果TcpConnection::send()调用发生在别的 线程，它不会在当前线程调用sendlnLoopO, rfl］是通过EventLoop: : runlnLoop ()把 sendlnLoop函数调用转移到IO线程</p>
<p>首先需要给 TcpConnection 添加 inputBuffer_ 成员变量。<br>
然后TcpConnection:: handleRead()成员函数会使用Buffer来读取数据。</p>
<p>一般不需要直接操作buffer<br>
buffer内部是vector&lt; char &gt; ，是一块连续的内存,同时buffer准备了一块额外的65536栈上内存extrabuf，利用readv来读取内存，既避免了需要一个很大的出事buffer，也避免了反复调用read造成的系统开销</p>
<p>主buffer分为三个部分：prependable、readable、writable<br>
<img src="https://lixin-scut.github.io//post-images/1582201221076.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582201289610.png" alt=""><br>
buffer使用下标而不是迭代器，因为vector是自增长的，重新分配内存之后会使得原来的指针失效</p>
<p>Buffer 里有两个常数 kCheapPrepend 和 klnitialSize,定义了 prependable的初始大小和writable的初始大小，readable的初始大小为0。</p>
<p>每当全部数据读完了，readindex == writeindex，readindex和writeindex返回原位以备新一轮使用</p>
<p>vector的capacity() 以指数方式自动动态增长，让push_back()的平均复杂度是常数。</p>
<p>内部腾挪<br>
有时候，经过若干次读写，readindex移到了比较靠后的位置，留下了巨大的 prependable空间，Buffer在这种情况下不会重新分配内存，而是先把已有的数据移到前面去，腾出 writable空间</p>
<p>prepend前方添加：有时候readIndex比较靠后，buffer前半部分有一定的空间，可以先序列化消息，然后再在序列化数据的前面添加消息的长度</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[移动语义和完美转发]]></title>
        <id>https://lixin-scut.github.io//post/yi-dong-yu-yi-he-wan-mei-zhuan-fa</id>
        <link href="https://lixin-scut.github.io//post/yi-dong-yu-yi-he-wan-mei-zhuan-fa">
        </link>
        <updated>2020-02-20T10:33:14.000Z</updated>
        <content type="html"><![CDATA[<p>个人总结：</p>
<h3 id="移动语义">移动语义</h3>
<p>移动是相对于拷贝来说，亦即我们希望对对象进行拥有权的转移而不是简单地创造一个完全一样的对象，比如指针，我们希望直接移交指针，而不是创造指针指向的对象再新建一个指针指向它<br>
当然需要移动的一个重要原因是IO类或unique_ptr等类不应该被拷贝，包含不能被共享的资源（我的网络库项目中继承了boost::noncopyable的也不能被拷贝）<br>
移动构造函数和移动赋值函数就是这么来的<br>
用高级语言之间的术语来说就是类似做了一次浅拷贝，而不是深拷贝，但是我们使用了右值<br>
简单来说，一个<strong>左值表达式</strong>表示的是一个<strong>对象的身份</strong>，一个<strong>右值表达式</strong>表示的是<strong>对象的值</strong>，更通俗地说：凡是取地址（&amp;）操作可以成功的都是左值，其余都是右值。从而对于左值的引用就是左值引用，而对于右值的引用就是右值引用。（注意右值引用本身等于一个表达式，也是一个左值）<br>
但是我们不能直接把一个左值绑定到右值引用上，必须使用std::move,将左值转换为右值。<br>
但是move也不是随便用的调用move后，我们<strong>不能再对移后源对象</strong>的值<strong>做任何假设</strong>，<strong>只能对其进行销毁或赋予新值</strong>，不能使用一个移后源对象的值。</p>
<p>move的原理就是利用了类型折叠，<strong>通常</strong>我们<strong>不能将一个右值引用</strong>绑定到一个<strong>左值</strong>上，但是，c++语言在正常绑定规则之外定义了<strong>两个例外规则</strong><br>
当我们将一个<strong>左值</strong>（如i）传递给函数的<strong>右值引用参数</strong>，且此右值引用指向模板类型参数（如T&amp;&amp;）时，编译器<strong>推断模板类型参数</strong>为实参的<strong>左值引用</strong>类型。因此，当我们调用f3（i）时，编译器推断<strong>T</strong>的类型为<strong>int&amp;，而非int</strong><br>
通常我们<strong>不能（直接）定义</strong>一个<strong>引用的引用</strong>，但是，通过<strong>类型别名</strong>或通过<strong>模板类型参数间接定义</strong>是可以的<br>
在这种情况下，我们可以使用第二个例外绑定规则：如果我们间接创建一个<strong>引用的引用</strong>，则这些<strong>引用</strong>形成了 <strong>“折叠”</strong>。在所有情况下（除了一个例外），引用会<strong>折叠成</strong>一个<strong>普通的左值引用类型</strong>。在新标准中，折叠规则扩展到右值引用。<strong>只在一种特殊情况下</strong>引用会<strong>折叠成右值引用：右值引用的右值引用</strong>。即，对于一个给定类型X：<br>
1.X&amp;、&amp;、X&amp; &amp;&amp;和X&amp;&amp; &amp;都折叠成类型X&amp;<br>
2.<strong>类型X&amp;&amp; &amp;&amp;折叠成X&amp;&amp;</strong><br>
move是一个函数模板，而不是一个单独的函数，源代码比较精简，就贴上了了<br>
<img src="https://lixin-scut.github.io//post-images/1582273516470.png" alt=""></p>
<h3 id="完美转发">完美转发</h3>
<p>这个还是我第一次见到的新词，不过其实《C++ primer》里面也有提到了，但是单独一小节转发作为介绍<br>
其核心思想也很简单，如果函数模板中调用了另一普通函数，假设普通函数希望获得外部元素的引用，那么我们就把引用传进来，但是正常情况下，形参会忽略顶层const和引用（就是你传个int引用给模板，模板肯定认为是int，不可能直接认为是int&amp;），此时普通函数就永远无法获得一个引用。<br>
此时可能我们可能会想到用前面的引用折叠啊！那样子的话就可以保存左值引用/右值引用的性质啦！<br>
确实如此，但是有一个很细微的问题，就是前面提到的，<strong>右值引用本身等于一个表达式，也是一个左值</strong>，如果把一个右值传给实例化模板，固然得到了右值引用，但是右值引用本身又是一个左值。。。如果普通函数此时希望得到一个右值来填充右值引用形参，就无法保持右值这个性质了【注意是右值不是右值引用】。<br>
此时就需要新工具了 为了能够保持原对象的性质，这时，我们需要<code>std::forward&lt;T&gt;()</code>。与std::move()相区别的是，move()会无条件的将一个参数转换成右值，而forward()则会保留参数的左右值类型。<br>
emplace_back 和 emplace 就是典型的利用forward的例子，，当 emplace _ back 将这些实参传递给 construct 时，我们必须使用 forward来保持实参的原始类型<br>
原理：insert或push成员，此时会使用拷贝初始化，与之相对的是emplace会使用直接初始化，emplace将参数传递给元素类型的构造函数，在容器内存空间中直接构造元素，而不是push、insert等拷贝值<br>
emplace可以接受可变数量的形参，push insert只能单个</p>
<h3 id="参考资料">参考资料：</h3>
<p>《C++ primer》<br>
13.6对象移动<br>
使用移动而不是拷贝的另一个原因源于<strong>IO类或unique_ptr等类不应该被拷贝</strong>，包含不能被共享的资源<br>
在旧标准中，没有直接的方法移动对象，在新标准中，我们可以<strong>用容器保存不可以拷贝</strong>的类型，只要它们能被<strong>移动</strong>即可<br>
标准库容器、string和shared_ptr类既支持移动也支持拷贝，<strong>IO类和unique_ptr类可以移动但不可以拷贝</strong></p>
<p>13.6.1右值引用<br>
为了<strong>支持移动操作</strong>，新标准引入了一种新的引用类型—<strong>右值引用</strong>，其有一个重要的性质，<strong>只能绑定到一个将要销毁的对象</strong>，因此我们可以自由地将一个<strong>右值引用的资源移动到另一个对象中</strong><br>
一般而言，一个<strong>左值表达式</strong>表示的是一个<strong>对象的身份</strong>，一个<strong>右值表达式</strong>表示的是<strong>对象的值</strong><br>
对于常规引用（即左值引用），我们<strong>不能</strong>将其绑定到要求<strong>转换的表达式、字面常量或是返回右值的表达式</strong>。而右值引用完全相反，我们可以将一个右值引用绑定到这类表达式上，但<strong>不能将一个右值引用直接绑定到一个左值上</strong>。<br>
<img src="https://lixin-scut.github.io//post-images/1582271568985.png" alt=""><br>
左值引用可用的表达式：返回左值引用的函数，赋值、下标、解引用和<strong>前置递增/递减运算符</strong><br>
右值引用可用的表达式：返回非引用类型的函数，算术、关系、位以及<strong>后置递增/递减运算符</strong><br>
但是我们可以将一个const的左值引用绑定到右值表达式中。<br>
左值表达式与右值表达式的区别：左值有持久的状态，右值要么是字面常量，要么是在表达式求值过程中创建的临时对象<br>
由于右值引用只能绑定到临时对象，所以<strong>1.所引用的对象将要被销毁2.该对象没有其他用户</strong>。这两个特性意味着使用右值引用的代码可以自由接管所引用的对象的资源<br>
右值引用指向将要被销毁的对象，因此，我们可以从绑定到右值引用的对象窃取状态<br>
<strong>变量</strong>可以看作<strong>只有一个运算对象而没有运算符的表达式</strong>，所以变量表达式都是左值 <strong>（导致右值引用本身是一个左值！）</strong><br>
<img src="https://lixin-scut.github.io//post-images/1582271716251.png" alt=""><br>
原因：变量是持久的，直至离开作用域才被销毁<br>
虽然不能将一个右值引用<strong>直接绑定</strong>到一个左值上，但可以<strong>显式</strong>地将一个<strong>左值</strong>转换为对应的<strong>右值引用</strong>类型，我们还可以用过调用一个名为move的新标准库函数来获得绑定到左值上的右值引用，move调用告诉编译器：我们有一个左值，但是我们希望像一个右值一样处理它，但<strong>对某个左值调用move后</strong>就意味着承诺除了对该左值进行<strong>赋值或销毁外不再使用它</strong><br>
int &amp;&amp;rr3 = std::move(rr1); //完成转移后，rr1为移后源对象，相当于一次移动<br>
调用move后，我们不<strong>能再对移后源对象</strong>rr1的值<strong>做任何假设</strong>，<strong>只能对其进行销毁或赋予新值</strong>，不能使用一个移后源对象的值<br>
对move不提供using声明，直接调用std::move而不是move，<strong>避免潜在的名字冲突</strong></p>
<p>13.6.2移动构造函数和移动赋值运算符<br>
移动构造函数的<strong>第一个参数</strong>是该类类型的一个<strong>引用</strong>，不同于拷贝构造函数，这个引用参数是一个<strong>右值引用</strong>，与拷贝构造函数一样，<strong>任何额外参数都必须有默认实参</strong><br>
移动构造函数必须保证移后源对象处于可销毁状态（销毁它是无害的）（对移后源对象<strong>赋值nullptr</strong>），特别是在资源完成移动后，必须保证源对象必须不再指向被移动的资源—这些资源的所有权已经归属新创建的对象<br>
移动构造函数<strong>不分配任何新内存</strong>，它接管原对象中的内存后，将<strong>给定对象中的指针</strong>都置为<strong>nullptr</strong>，从而完成从给定对象的移动操作，此对象将继续存在，移后源对象将会被销毁<br>
因为移动操作只是接管资源，通常不需要分配任何资源，因此移动操作<strong>通常不会抛出任何异常</strong>，但除非告诉标准库我们的移动构造函数不会抛出异常，否则它会认为移动我们的类对象时可能会抛出异常，并且为了处理这种可能性而做一些额外的工作<br>
<strong>noexcept是我们承诺一个函数不抛出异常</strong>的一种方法。我们在一个函数的参数列表后指定noexcept。在一个构造函数中，noexcept出现在<strong>参数列表和初始化列表开始的冒号之间</strong>，同时我们必须在类头文件的<strong>声明和定义</strong>中（<strong>定义在类外时</strong>）<strong>都指定</strong>noexcept<br>
如果<strong>不对移动构造函数显式声明noexcept，就会自动使用拷贝构造函数</strong>而不是移动构造函数<br>
<strong>移动赋值运算符也应该标记为noexcept</strong><br>
在移动赋值运算符中，我们<strong>首先检查</strong>左侧对象与右侧右值引用<strong>是否指向同一地址</strong>，如果<strong>相同则不要做任何操作</strong>（<strong>自赋值检查</strong>），否则，<strong>先释放左侧</strong>运算对象所使用的内存，并接管给定对象的内存<br>
从<strong>一个对象移动数据并不会销毁此对象</strong>，但当我们编写一个移动操作时，必须确保移后源对象<strong>进入一个可析构状态</strong>，除此之外，移动操作还必须保证移后源对象仍然是<strong>有效的（对象有效是指可以安全地为其赋予新值或者可以安全地使用而不依赖于当前值）</strong> 同时移动操作无法保证移后源对象中留下的值，所以我们的程序不应该依赖于移后源对象中的数据<br>
总结：在移动操作之后，移后源对象必须保持有效、可析构的状态，但是用户不能对其值进行任何假设<br>
<strong>编译器不会为某些类合成移动操作</strong>，特别是当一个类定义了自己的拷贝构造函数、拷贝赋值运算符或者析构函数，<strong>编译器就不会为它合成移动构造函数和移动赋值运算符，反而类会通过正常的函数匹配从而使用对应的拷贝操作来代替移动操作</strong><br>
<strong>只有当一个类没有定义任何自己版本的拷贝控制成员，且类的每个非static数据成员都可以移动时，编译器才会为它合成移动构造函数或移动赋值运算符</strong>，编译器可以移动内置类型成员，如果一个成员是类类型，且该类有对应的移动操作，编译器也能移动这个成员<br>
与拷贝操作不同，<strong>移动操作永远不会隐式定义为删除的函数</strong>。但是如果我们显式地要求编译器生成=default的移动操作，且编译器不能移动所有成员，则编译器会将移动操作定义为删除的函数<br>
将合成的移动操作定义为删除的函数遵循以下原则：<br>
<img src="https://lixin-scut.github.io//post-images/1582272040308.png" alt=""><br>
<strong>如果类定义了移动操作，则也必须定义拷贝操作</strong>，否则<strong>拷贝操作</strong>都会默认地被<strong>定义为删除的</strong><br>
如果一个类既有移动构造函数，也有拷贝构造函数，编译器使用普通的函数匹配规则<br>
来确定使用哪个构造函数，赋值操作的情况类似<br>
<img src="https://lixin-scut.github.io//post-images/1582272110377.png" alt=""><br>
如果一个类有一个拷贝构造函数但未定义移动构造函数，编译器不会合成移动构造函数，这意味着此类将有拷贝构造函数但不会有移动构造函数。如果一个类没有移动构造函数，函数匹配规则保证该类型的对象只会被拷贝，即使我们试图通过调用 move 來移动它们时也是如此<br>
值得注意的是，用拷贝构造函数代替移动构造函数几乎肯定是安全的</p>
<p>拷贝并交换赋值运算符和移动操作</p>
<p>对于同时定义了移动构造函数和拷贝构造函数的类，将其拷贝赋值运算符的参数改成非引用类型变为通用的赋值运算符，此时运算符有一个非引用参数.这意味着此参数要进行拷 贝初始化。依赖于实参的类型，拷贝初始化要么使用拷贝构造函数，要么使用移动构造函数——左值被拷贝，右值被移动。因此，单一的赋值运算符 就实现了拷贝赋值运算符和移动赋值运算符两种功能。<br>
<img src="https://lixin-scut.github.io//post-images/1582272138253.png" alt=""><br>
更新三/五法则<br>
所有五个应该看作一个整体：一般来说，如果一个类定义了任何一个拷贝操作，它就应该定义所有五个操作，并且某些类必须定义拷贝构造函数、拷贝赋值运算符和析构函数才能正确工作<br>
移动迭代器<br>
新标准库中定义了一种移动迭代器（move iterator )适配器<br>
一个移动迭代器通过改变给定迭代器的解引用运算符的行为来适配此迭代器<br>
一个普通迭代器的解引用运算符返回一个指向元素的左值。与其他迭代器不同，移动迭代器的，解引用运算符生成一个右值引用。<br>
通过调用标准库的 make_move_iterator 函数将一个普通迭代器转换为一个移动迭代器。此函数接受一个迭代器参数，返回一个移动迭代器。<br>
原迭代器的所有其他操作在移动迭代器中都照常工作。特别是，可以将移动迭代器传递给uninitialized_copy<br>
<img src="https://lixin-scut.github.io//post-images/1582272331524.png" alt=""><br>
uninitialized _ copy 对输入序列中的毎个元素调用 construct 来将元素&quot;拷贝&quot;到目的位置。此算法使用迭代器的解引用运算符从输入序列中提取元素。由于我们传递给它的是移动迭代器，因此解引用运算符生成的是一个右值引用，这意味着 construct 将使用移动构造函数来构造元素。<br>
值得注意的是，标准库不保证哪些算法适用移动迭代器，哪些不适用。由于移动一个对象可能销毁掉原对象，因此你只有在确信算法在为一个元素赋值或将其传递给一个用户 定义的函数后不再访问它时，才能将移动迭代器传递给算法。<br>
当我们调用move是，必须绝对确认移后源对象没有其他用户</p>
<p>注意：<br>
1.noexcept不能忘了，并且声明和定义的时候都需要<br>
2.不一定需要std::move<br>
3.自检使用<code>(&amp;rhs != this)</code>而不是<code>(rhs != *this)</code>或者<code>(rhs == *this)</code>，前者是指针可以直接比较，后者是类通常没有定义<br>
4.记得先free后转移，因为进行了自移动检查，所以可以直接free</p>
<p><strong>如果类定义了移动操作，则也必须定义拷贝操作</strong>，否则<strong>拷贝操作</strong>都会默认地被<strong>定义为删除的</strong></p>
<p>13.6.3右值引用和成员函数<br>
一个成员函数最好同时提供拷贝和移动版本，一个版本接受一个指向 const 的左值引用，第二个版本接受一个指向非const 的右值引用。<br>
一般来说，我们不需要为函数操作定义接受一个 constX &amp;&amp;或是一个（普通的）X&amp;参数的版本。<br>
当我们希望从实参&quot;窃取&quot;数据时，通常传递一个右值引用。为了达到这一目的，实参不能是const的。类似的，从一个对象进行拷贝的操作不应该改变该对象。因此，通常不需要定义一个接受一个（普通的） X &amp;参数的版本。<br>
区分移动和拷贝的重载函数通常有一个版本接受一个 const T&amp;,而另一个版本接受一个 T &amp;&amp;。</p>
<p>右值和左值引用成员函数<br>
<img src="https://lixin-scut.github.io//post-images/1582272484444.png" alt=""><br>
旧标准中允许对一个右值进行赋值，为了维持向后兼容性，新标准库类仍然允许向右值赋值。但是，我们可能希望在自己的类中阻止这种用法。<br>
引用限定符：强制左侧运算对象（即this 指向的对象）是一个左值/右值。<br>
<img src="https://lixin-scut.github.io//post-images/1582272518873.png" alt=""><br>
引用限定符可以是&amp;或&amp;&amp;，分别指出 this 可以指向一个左值或右值<br>
引用限定符只能用于（非 static )成员函数，且必须同时出现在函数的声明和定义中<br>
对于&amp;限定的函数，我们只能将它用于左值；对于&amp;&amp;限定的函数，只能用于右值:<br>
<img src="https://lixin-scut.github.io//post-images/1582272551649.png" alt=""><br>
一个函数可以同时用 const 和引用限定。在此情况下，引用限定符必须跟随在const限定符之后</p>
<p>重载和引用函数<br>
就像一个成员函数可以根据是否有 const 来区分其重载版本一样，引用限定符也可以区分重载版本。而且，我们可以综合引用限定符和 const 来区分一个成员函数的重载版本<br>
<img src="https://lixin-scut.github.io//post-images/1582272623950.png" alt=""><br>
当我们对一个右值执行 sorted 时，它可以安全地直接对 data 成员进行排序。对象是一个右值，意味着没有其他用户，因此我们可以改变对象。当对一个 const 右值或一个左值执行 sorted 时，我们不能改变对象，因此就需要在排序前拷贝 data 。<br>
<img src="https://lixin-scut.github.io//post-images/1582272662022.png" alt=""><br>
如果一个成员函数有引用限定符，则具有相同参数列表的所有版本都必须有引用限定符。</p>
<p>16.2.5 模板实参推断和引用<br>
编译器会应用正常的引用绑定规则；<strong>const是底层</strong>的，<strong>不是顶层</strong>的 <strong>（因为引用的本质就是指针，准确的说是一个常量指针，它本身不可能修改指向的对象，自带顶层）</strong><br>
<strong>注意const int&amp; 中的const是底层const 指int是const，而不是指引用</strong><br>
当一个函数参数是模板类型参数的一个<strong>普通（左值）引用</strong>时（即，形如T&amp;），绑定规则告诉我们，<strong>只能传递</strong>给它一个<strong>左值</strong>（如，一个变量或者一个返回引用类型的表达式）。实参可以是const类型，也可以不是，如果<strong>实参是const</strong>的，则<strong>T将会被推断为const类型</strong><br>
<img src="https://lixin-scut.github.io//post-images/1582272988605.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582272993157.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582273000713.png" alt=""><br>
<strong>通常</strong>我们<strong>不能将一个右值引用</strong>绑定到一个<strong>左值</strong>上，但是，c++语言在正常绑定规则之外定义了<strong>两个例外规则</strong>，允许这种绑定，这两个例外规则是move这种标准库设施正确工作的基础<br>
当我们将一个<strong>左值</strong>（如i）传递给函数的<strong>右值引用参数</strong>，且此右值引用指向模板类型参数（如T&amp;&amp;）时，编译器<strong>推断模板类型参数</strong>为实参的<strong>左值引用</strong>类型。因此，当我们调用f3（i）时，编译器推断<strong>T</strong>的类型为<strong>int&amp;，而非int</strong><br>
通常我们<strong>不能（直接）定义</strong>一个<strong>引用的引用</strong>，但是，通过<strong>类型别名</strong>或通过<strong>模板类型参数间接定义</strong>是可以的<br>
在这种情况下，我们可以使用第二个例外绑定规则：如果我们间接创建一个<strong>引用的引用</strong>，则这些<strong>引用</strong>形成了 <strong>“折叠”</strong>。在所有情况下（除了一个例外），引用会<strong>折叠成</strong>一个<strong>普通的左值引用类型</strong>。在新标准中，折叠规则扩展到右值引用。<strong>只在一种特殊情况下</strong>引用会<strong>折叠成右值引用：右值引用的右值引用</strong>。即，对于一个给定类型X：<br>
1.X&amp;、&amp;、X&amp; &amp;&amp;和X&amp;&amp; &amp;都折叠成类型X&amp;<br>
2.<strong>类型X&amp;&amp; &amp;&amp;折叠成X&amp;&amp;</strong><br>
引用折叠<strong>只能</strong>应用于<strong>间接创建的引用的引用</strong>，如类型别名或模板参数<br>
<img src="https://lixin-scut.github.io//post-images/1582273368906.png" alt=""><br>
即使f3的函数参数形式是一个右值引用（即，T&amp;&amp;），此调用也会用一个左值引用类型（即，int&amp;）实例化f3<br>
这两个规则导致了两个重要结果：<br>
1.如果一个函数参数是一个指向模板类型参数的右值引用（如，T&amp;&amp;），则它可以被绑定到一个左值；且<br>
2.如果实参是一个左值，则推断出的模板实参类型将是一个左值引用，且函数参数将会被实例化为一个（普通）左值引用参数（T&amp;）<br>
<img src="https://lixin-scut.github.io//post-images/1582273374564.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582273379208.png" alt=""><br>
T&amp;&amp; 等于拷贝 T&amp; 等于绑定引用<br>
当代码涉及的类型可能是普通（非引用）类型，也可能是引用类型时，编写正确的代码就变得异常困难（虽然remove_reference这样的类型转换类可能会有帮助）<br>
在实际中，<strong>右值引用</strong>通常用于两种情况：<strong>模板转发其实参（16.2.7）</strong> 或<strong>模板被重载（16.3）</strong><br>
目前应该注意的是，使用右值引用的函数模板通常使用我们在13.6.3节中看到的方式来进行重载（函数后添加引用限定符）<br>
<img src="https://lixin-scut.github.io//post-images/1582273477764.png" alt=""><br>
与非模板函数一样，第一个版本将绑定到可修改的右值，而第二个版本将绑定到左值或const右值。</p>
<p>注意，折叠是先观察实参的类型和形参的类型再决定T需要什么类型，而不是根据实参的类型直接决定T的类型</p>
<p>16.2.6理解std::move<br>
用途：移动操作 绑定到将要销毁的对象 1.转换的表达式<code>i*42</code> 2.字面值 42 3.返回右值的表达式<br>
标准库 move 函数（参见13.6.1节，第472页）是使用右值引用的模板的一个很好的例子。<br>
虽然不能直接将一个右值引用绑定到一个左值上，但可用 <strong>move 获得一个绑定到左值上的右值引用</strong>。由于 move 本质上可以<strong>接受任何类型的实参</strong>，因此我们不会惊讶于它是一个<strong>函数模板</strong>。<br>
<img src="https://lixin-scut.github.io//post-images/1582273516470.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582273953551.png" alt=""><br>
这正是我们所寻求的——我们希望将一个右值引用绑定到一个左值。这个实例的函数体返回 static cast &lt; string &amp;&amp;&gt;( t )。在此情况下，t的类型为 string&amp; , cast将其转换为string &amp;&amp;。</p>
<p>static _ cast 只能用于其他合法的类型转换（参见4.11.3节，第145页）。但是，这里又有一条针对右值引用的特许规则：虽然不能隐式地将一个左值转换为右值引用，但我们可以用 <strong>static _ cast 显式地将一个左值转换为一个右值引用</strong>。</p>
<p>16.2.7转发<br>
某些函数需要将其一个或多个实参连同类型不变地<strong>转发给其他函数（即在函数内部调用其他函数或自身）</strong>。在此情况下，我们需要<strong>保持</strong>被转发实参的<strong>所有性质</strong>，包括实参类型<strong>是否是 const</strong> 的以及实参是<strong>左值还是右值</strong>。<br>
<img src="https://lixin-scut.github.io//post-images/1582274032316.png" alt=""><br>
<img src="https://lixin-scut.github.io//post-images/1582274038078.png" alt=""><br>
F，T1不相互影响，但T1可用于F（int可以作为int&amp;的参数）<br>
f和j并不相互影响<br>
<strong>j的值被拷贝到t1中，f中的引用参数被绑定到t1，而非j，从而其改变不会影响j</strong>使其参数能保持给定实参的&quot;左值性&quot;。更进一步，可以想到我们也希望保持参数的 const 属性。<br>
通过将一个函数参数定义为一个<strong>指向模板类型参数的右值引用</strong>，我们可以保持其对应实参的所有类型信息。而使用<strong>引用参数</strong>（无论是左值还是右值）使得我们可以<strong>保持 const属性</strong>，因为在<strong>引用类型中的 const 是底层的</strong>。<br>
如果一个函数参数是指向模板类型参数的<strong>右值引用(如T&amp;&amp;)</strong>，它对应的实参的<strong>const属性和左值/右值属性将得到保持</strong>，但是只完成了一半工作，如果普通函数需要右值填充右值引用，而右值引用本身还是一个左值，所以必须保持右值这个性质<br>
可使用一个名为<strong>forward</strong>的新标准库设施来传递flip2的参数，它能保持原始实参的类型。类似move,forward定义在<strong>头文件utility</strong>中。与move不同，forward<strong>必须通过显式模板实参來调用</strong>（参见16.2.2节，第603页）。forward<strong>返回该显式实参类型的右值引用</strong>。即，<strong><code>forward&lt;T&gt;</code></strong> 的返回类型是<strong>T&amp;&amp;</strong>。<br>
通常情况下.我们使用forward传递那些定义为模板类型参数的右值引用的函数参数。通过其返回类型上的<strong>引用折叠</strong>，forward可以<strong>保持</strong>给定实参的<strong>左值/右值属性</strong>：<br>
如果实参是一个右值，则 Type 是一个普通（非引用）类型，<code>forward &lt; Type &gt;</code>将返回Types&amp;&amp;。如果实参是一个左值，则通过引用折叠， Type 本身是一个左值引用类型。在此情况下，返回类型是一个指向左值引用类型的右值引用。再次对 <code>forward &lt; Type &gt;</code>的返回类型进行引用折叠，将返同一个左值引用类型。<br>
当用于一个指向模板参数类型的右值引用函数参数（T &amp;&amp;)时， forward 会保持实参类型的所有细节。<br>
<code>f（std::forward&lt;T2&gt;（t2）,std::forward&lt;T1&gt;(t1)）;</code></p>
<p>习题感悟<br>
注意：虽然会忽视顶层const，但是首先需要判断实参的类型是否相同，再判断类型是否可转换，如果两参数一个为const一个非const，不能同用一个T<br>
解引用运算符首先检查curr是否仍在作用范围内，如果是，则返回curr所指元素的一个引用。<br>
注意 单引号的'a'就是char类型<br>
将sum返回的类型自动改为保证足够容纳其计算结果的类型，decltype会自动判断a+b需要什么类型才能容纳</p>
<pre><code>template &lt;typename T&gt; auto sum(const T&amp;a,const T&amp;b) -&gt;decltype(a+b)//将函数的返回类型指定为a+b的类型
{
	return a+b;
}
</code></pre>
<p>注意，折叠是先观察实参的类型和形参的类型再决定T需要什么类型，而不是根据实参的类型直接决定T的类型</p>
<p>博客<br>
<a href="https://blog.csdn.net/suchto/article/details/54947998">移动语义（move semantic）和完美转发（perfect forward）</a><br>
<a href="https://www.jianshu.com/p/d19fc8447eaa">[c++11]我理解的右值引用、移动语义和完美转发</a></p>
]]></content>
    </entry>
</feed>