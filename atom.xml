<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lixin-ee.github.io/</id>
    <title>Lixin-ee</title>
    <updated>2019-09-19T12:02:37.728Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lixin-ee.github.io/"/>
    <link rel="self" href="https://lixin-ee.github.io//atom.xml"/>
    <subtitle>好景在望。</subtitle>
    <logo>https://lixin-ee.github.io//images/avatar.png</logo>
    <icon>https://lixin-ee.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Lixin-ee</rights>
    <entry>
        <title type="html"><![CDATA[ C++ primer 第八章 笔记+习题 ]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-ba-zhang-bi-ji-xi-ti</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-ba-zhang-bi-ji-xi-ti">
        </link>
        <updated>2019-09-19T08:24:00.000Z</updated>
        <content type="html"><![CDATA[<p>8.1IO类<br>
之前我们使用的IO类型和对象都是操纵char数据，默认情况下关联到用户的控制台窗口。<br>
iostream定义了读写流的基本类型，fstream定义了读写命名文件的类型，sstream定义了读写内存string对象的类型<br>
8.1.1<br>
不能拷贝或对IO对象赋值，同时<strong>不能将形参或者返回类型</strong>设置为流类型（因为不能拷贝）<br>
进行IO操作的函数通常以<strong>引用方式传递和返回流</strong>，<strong>读写一个IO对象会改变它的状态</strong>，因此传递和返回的引用<strong>不能使用const</strong><br>
8.1.2<br>
访问和操纵流的条件状态<br>
一个流一旦发生错误，其上后续的IO操作都会失败。只有当一个流处于无错状态时，我们才可以从它读取数据。代码通常应该在使用一个流之前检查它是否处于良好状态<br>
确定一个流对象的状态最简单的方法是将它当做一个条件来使用：while(cin&gt;&gt;word)，while将会循环检查&gt;&gt;表达式返回的流的状态<br>
iostate类型，与机器无关，提供了表达流状态的完整功能，这个类型应作为一个位集合来使用<br>
IO库定义了四个iostate类型的constexpr值，表示特定的位模式<br>
badbit 系统级错误 如不可恢复的读写错误 failbit可恢复错误 eofbit 输出流达到文件结束位置 goodbit值为0，表示流未发生错误<br>
到达文件结束位置eofbit和failbit都会被置位，badbit被置位时failbit也会返回true<br>
所以我们可以使用goodbit或者failbit确定流的总体状态，eof和bad只代表特定的错误<br>
标准库定义了一组函数来查询这些标志位的状态<br>
rdstate( )返回一个iostate值，对应流的当前状态<br>
setstate()操作将给定条件的位置置位，表示发生了对应错误<br>
clear()是一个重载成员 不接受参数的版本用于复位所有错误标志位，带参数的clear接受一个iostate值，表示流的新状态</p>
<p>习题8.1+8.2</p>
<pre><code>int main() {
	RaP(cin);
}

istream &amp;RaP(istream &amp;is) {
	string s;
	while (is&gt;&gt;s) {
		cout &lt;&lt; s &lt;&lt; endl;
	}
	is.clear();
	return is;
}
</code></pre>
<p>习题8.3<br>
badbit :流已崩溃  eofbit :流达到了文件结束位置  failbit ：IO操作失败 这三者置位时循环会终止</p>
<p>8.1.3管理输出缓冲<br>
每个输出流都管理一个缓冲区，用来保存程序读写的数据<br>
缓冲机制使得操作系统可以将程序的多个输出操作组合成单一的系统级操作<br>
导致缓冲刷新的原因：1.程序正常结束。2.缓冲区满 3.使用操纵符endl等显式刷新缓冲区4.在输出操作后用操纵符unitbuf设置流的内部状态来清空缓冲区。默认情况下对cerr是设置unitbuf的，因此写到cerr的内容都是立即刷新的5.一个输出流可能被关联到另一个流，当读写到被关联的流时，关联到的流的缓冲区就会被刷新，比如cin、cerr被关联到cout<br>
使用unitbuf操纵符 每次输出操作后都刷新缓冲区，每次写操作之后都进行一次flush操作<br>
nounitbuf操纵符 重置流，使其恢复使用正常的系统管理的缓冲区刷新机制<br>
cout&lt;&lt;unitbuf; cout&lt;&lt;nounitbuf;<br>
程序崩溃后缓冲区不会自动刷新<br>
tie将输入流（）关联到一个输出流中，任何试图从输入流读取数据的操作都会先刷新输出流，保证用户提示信息在读操作操作之前被打印出来<br>
标准库将cin 和cout关联在一起<br>
tie( )返回关联的输出流的指针，tie(&amp;o)将调用对象绑定到输出流o</p>
<p>8.2文件输入输出<br>
ifstream 从给定文件读取数据<br>
ofstream 向给定文件写入数据<br>
fstream 读写给定文件<br>
使用文件流需要添加<code>#include&lt;fstream&gt;</code><br>
8.2.1使用文件流对象<br>
文件名既可以是库类型string对象，也可以是c风格字符数组 <strong>(意思是文件名用string，而不是用string代替文件) 例如 string file_name =file.txt; fstream strm(file_name);</strong><br>
可以用继承类型的对象来替代使用基类型对象的地方，所以可以用fstream代替iostream<br>
当一个fstream 对象被销毁的时候，close会被自动调用</p>
<p>习题8.4</p>
<pre><code>#include&lt;fstream&gt;
using namespace std;
fstream &amp;RaP(fstream &amp;is);

int main() {
	string f = &quot;test.txt&quot;;
	fstream fstrm(f);
	&amp;RaP(fstrm);
}

fstream &amp;RaP(fstream &amp;is) {
	vector&lt;string&gt; vs;
	string s;
	while (getline(is,s)) {
		cout &lt;&lt; s &lt;&lt; endl;
		vs.push_back(s);
	}
	return is;
</code></pre>
<p>习题8.5</p>
<pre><code>fstream &amp;RaP(fstream &amp;is) {
	vector&lt;string&gt; vs;
	string s;
	while (is&gt;&gt;s) {
		cout &lt;&lt; s &lt;&lt; endl;
		vs.push_back(s);
	}
	return is;
}
</code></pre>
<p>习题8.6<br>
其实就和284页一模一样，但是需要注意！<strong>main函数的形参只能通过命令行来输入</strong>，vs中的调试是没办法输入的<br>
<img src="https://lixin-ee.github.io//post-images/1568890886547.png" alt=""></p>
<p>8.2.2文件模式<br>
截断文件：清空当前文件的所有内容<br>
以out默认模式打开文件会丢失数据，因为其默认带上trunc模式<br>
保留文件已有内容必须显式指定in或者app配合out<br>
每次调用open都会（需要）设置模式<br>
习题8.7<br>
fstream out(argv[2])或者fstream out(argv[2]，ofstream::out )<br>
习题8.8<br>
fstream out(argv[2]，ofstream::app )<br>
fstream out(argv[2]，ofstream::out | ofstream::app )</p>
<p>8.3string流<br>
istringstream从string读取数据<br>
ostringstream 向string写入数据<br>
stringstream 读写数据<br>
istringstream 对整行文本进行分步操作<br>
ostringstream 逐步构造输出，最后一起打印</p>
<p>习题8.9</p>
<pre><code>istream &amp;RaP(istream &amp;is) {
	string s;
	getline(cin, s);
	istringstream ist(s);
	string output;
	while (ist &gt;&gt; output)
		cout &lt;&lt; output&lt;&lt;endl;
	return is;
}
</code></pre>
<p>习题8.10</p>
<pre><code>int main() {
	string file = &quot;test.txt&quot;;
	ifstream in(file);
	string s;
	vector&lt;string&gt; vs;
	while (in &gt;&gt; s)
		vs.push_back(s);
	for (auto i : vs) {
		istringstream is(i);
		string output;
		is &gt;&gt; output;
		cout &lt;&lt; output;
	}
}
</code></pre>
<p>习题8.11</p>
<pre><code>	istringstream is;
	for (auto i : vs) {
		is.str(i);
		string output;
		is &gt;&gt; output;
		cout &lt;&lt; output;
	}
</code></pre>
<p>知识点 如果在定义了istringstream而没有绑定string，可以在后面用str（s）绑定<br>
习题8.12<br>
<strong>PersonInfo是一个聚合类，此时不能定义初始值。</strong><br>
习题8.13<br>
其实把前面改成类似习题8.10就行了</p>
<pre><code>string file = &quot;test.txt&quot;;
	ifstream in(file);
	string s;
	while (getline(in,s))
</code></pre>
<p>习题8.14<br>
输出操作希望调用引用传递，但同时不希望拥有写入数据的权限</p>
<p>习题感悟<br>
badbit :流已崩溃  eofbit :流达到了文件结束位置  failbit ：IO操作失败 这三者置位时while(cin)会停止<br>
使用文件流需要添加<code>#include&lt;fstream&gt;</code><br>
main函数的形参只能通过命令行来输入<br>
如果在定义了istringstream而没有绑定string，可以在后面用str（s）绑定<br>
<strong>PersonInfo是一个聚合类，此时不能定义初始值。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一个通用方法团灭 6 道股票问题 bylabuladong]]></title>
        <id>https://lixin-ee.github.io//post/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-bylabuladong</id>
        <link href="https://lixin-ee.github.io//post/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-bylabuladong">
        </link>
        <updated>2019-09-18T10:45:43.000Z</updated>
        <content type="html"><![CDATA[<p>作者：labuladong<br>
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-w-5/<br>
来源：力扣（LeetCode）<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>这 6 道股票买卖问题是有共性的，我们通过对第四题（限制最大交易次数为 k）的分析一道一道解决。因为第四题是一个最泛化的形式，其他的问题都是这个形式的简化。</p>
<p>第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是最多只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。</p>
<p>#一、穷举框架<br>
首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。</p>
<p>递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。</p>
<p>而这里，我们不用递归思想进行穷举，而是利用「状态」进行穷举。我们具体到每一天，看看总共有几种可能的「状态」，再找出每个「状态」对应的「选择」。我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象，你只要记住「状态」和「选择」两个词就行，下面实操一下就很容易明白了。</p>
<pre><code>for 状态1 in 状态1的所有取值：
    for 状态2 in 状态2的所有取值：
        for ...
            dp[状态1][状态2][...] = 择优(选择1，选择2...)
</code></pre>
<p>比如说这个问题，每天都有三种「选择」：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择。但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k &gt; 0 的前提下操作。<strong>（这里我觉得是有问题的，下文会提及，应该为k&lt;限制次数的时候才能买入）</strong></p>
<p>很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。这个问题的「状态」有三个，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：</p>
<pre><code>dp[i][k][0 or 1]
0 &lt;= i &lt;= n-1, 1 &lt;= k &lt;= K
n 为天数，大 K 为最多交易数
此问题共 n × K × 2 种状态，全部穷举就能搞定。

for 0 &lt;= i &lt; n:
    for 1 &lt;= k &lt;= K:
        for s in {0, 1}:
            dp[i][k][s] = max(buy, sell, rest)
</code></pre>
<p>而且我们可以用自然语言描述出每一个状态的含义，比如说 dp[3][2][1] 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 dp[2][3][0] 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？</p>
<p>我们想求的最终答案是 dp[n - 1][K][0]，即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。</p>
<p>记住如何解释「状态」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。</p>
<p>#二、状态转移框架<br>
现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。<br>
<img src="https://lixin-ee.github.io//post-images/1568804331349.png" alt=""><br>
通过这个图可以很清楚地看到，每种状态（0 和 1）是如何转移而来的。根据这个图，我们来写一下状态转移方程：</p>
<pre><code>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
              max(   选择 rest  ,           选择 sell      )

解释：今天我没有持有股票，有两种可能：
要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；
要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。

dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
              max(   选择 rest  ,           选择 buy         )

解释：今天我持有着股票，有两种可能：
要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；
要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。
</code></pre>
<p>这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。<strong>（最大的问题在这里，我认为作者的本意是 buy 的时候，把 k 增加1）</strong><br>
现在，我们已经完成了动态规划中最困难的一步：状态转移方程。如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了。不过还差最后一点点，就是定义 base case，即最简单的情况。</p>
<pre><code>dp[-1][k][0] = 0
解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。
dp[-1][k][1] = -infinity
解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。
dp[i][0][0] = 0
解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。
dp[i][0][1] = -infinity
解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。
</code></pre>
<p>把上面的状态转移方程总结一下：</p>
<pre><code>base case：
dp[-1][k][0] = dp[i][0][0] = 0
dp[-1][k][1] = dp[i][0][1] = -infinity

状态转移方程：
dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
</code></pre>
<p>读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。</p>
<p>#三、秒杀题目<br>
第一题，k = 1</p>
<p>直接套状态转移方程，根据 base case，可以做一些化简：</p>
<pre><code>dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])
dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]) （注意 dp[i-1][0][0]等于第i-1天都还没买入过一次）
            = max(dp[i-1][1][1], -prices[i])
解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。

现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。
可以进行进一步化简去掉所有 k：
dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
dp[i][1] = max(dp[i-1][1], -prices[i])
</code></pre>
<p>直接写出代码：</p>
<pre><code>
int n = prices.length;
int[][] dp = new int[n][2];
for (int i = 0; i &lt; n; i++) {
    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);
}
return dp[n - 1][0];
</code></pre>
<p>显然 i = 0 时 dp[i-1] 是不合法的。这是因为我们没有对 i 的 base case 进行处理。可以这样处理：</p>
<pre><code>
for (int i = 0; i &lt; n; i++) {
    if (i - 1 == -1) {
        dp[i][0] = 0;
        // 解释：
        //   dp[i][0] 
        // = max(dp[-1][0], dp[-1][1] + prices[i])
        // = max(0, -infinity + prices[i]) = 0
        dp[i][1] = -prices[i];
        //解释：
        //   dp[i][1] 
        // = max(dp[-1][1], dp[-1][0] - prices[i])
        // = max(-infinity, 0 - prices[i]) 
        // = -prices[i]
        continue;
    }
    dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
    dp[i][1] = Math.max(dp[i-1][1], -prices[i]);
}
return dp[n - 1][0];
</code></pre>
<p>第一题就解决了，但是这样处理 base case 很麻烦，而且注意一下状态转移方程，新状态只和相邻的一个状态有关，其实不用整个 dp 数组，只需要一个变量储存相邻的那个状态就足够了，这样可以把空间复杂度降到 O(1):</p>
<pre><code>
// k == 1
int maxProfit_k_1(int[] prices) {
    int n = prices.length;
    // base case: dp[-1][0] = 0, dp[-1][1] = -infinity
    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;
    for (int i = 0; i &lt; n; i++) {
        // dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);
        // dp[i][1] = max(dp[i-1][1], -prices[i])
        dp_i_1 = Math.max(dp_i_1, -prices[i]);
    }
    return dp_i_0;
}
</code></pre>
<p>两种方式都是一样的，不过这种编程方法简洁很多。但是如果没有前面状态转移方程的引导，是肯定看不懂的。后续的题目，我主要写这种空间复杂度 O(1) 的解法。</p>
<p>第二题，k = +infinity</p>
<p>如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的。可以这样改写框架：</p>
<pre><code>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
            = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])
</code></pre>
<p>我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：</p>
<pre><code>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
</code></pre>
<p>直接翻译成代码：</p>
<pre><code>int maxProfit_k_inf(int[] prices) {
    int n = prices.length;
    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;
    for (int i = 0; i &lt; n; i++) {
        int temp = dp_i_0;
        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);
        dp_i_1 = Math.max(dp_i_1, temp - prices[i]);
    }
    return dp_i_0;
}
</code></pre>
<p>第三题，k = +infinity with cooldown</p>
<p>每次 sell 之后要等一天才能继续交易。只要把这个特点融入上一题的状态转移方程即可：</p>
<p>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])<br>
dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])<br>
解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。<br>
翻译成代码：</p>
<p>int maxProfit_with_cool(int[] prices) {<br>
int n = prices.length;<br>
int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;<br>
int dp_pre_0 = 0; // 代表 dp[i-2][0]<br>
for (int i = 0; i &lt; n; i++) {<br>
int temp = dp_i_0;<br>
dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>
dp_i_1 = Math.max(dp_i_1, dp_pre_0 - prices[i]);<br>
dp_pre_0 = temp;<br>
}<br>
return dp_i_0;<br>
}</p>
<p>第四题，k = +infinity with fee</p>
<p>每次交易要支付手续费，只要把手续费从利润中减去即可。改写方程：</p>
<pre><code>dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)
解释：相当于买入股票的价格升高了。
在第一个式子里减也是一样的，相当于卖出股票的价格减小了。
</code></pre>
<p>直接翻译成代码：</p>
<pre><code>int maxProfit_with_fee(int[] prices, int fee) {
    int n = prices.length;
    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;
    for (int i = 0; i &lt; n; i++) {
        int temp = dp_i_0;
        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);
        dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);
    }
    return dp_i_0;
}
</code></pre>
<p>第五题，k = 2</p>
<p>k = 2 和前面题目的情况稍微不同，因为上面的情况都和 k 的关系不太大。要么 k 是正无穷，状态转移和 k 没关系了；要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。</p>
<p>这道题 k = 2 和后面要讲的 k 是任意正整数的情况中，对 k 的处理就凸显出来了。我们直接写代码，边写边分析原因。</p>
<p>原始的动态转移方程，没有可化简的地方</p>
<pre><code>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
</code></pre>
<p>按照之前的代码，我们可能想当然这样写代码（错误的）：</p>
<pre><code>int k = 2;
int[][][] dp = new int[n][k + 1][2];
for (int i = 0; i &lt; n; i++)
    if (i - 1 == -1) { /* 处理一下 base case*/ }
    dp[i][k][0] = Math.max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);
    dp[i][k][1] = Math.max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);
}
return dp[n - 1][k][0];
</code></pre>
<p>为什么错误？我这不是照着状态转移方程写的吗？</p>
<p>还记得前面总结的「穷举框架」吗？就是说我们必须穷举所有状态。其实我们之前的解法，都在穷举所有状态，只是之前的题目中 k 都被化简掉了。这道题由于没有消掉 k 的影响，所以必须要对 k 进行穷举：</p>
<pre><code>int max_k = 2;
int[][][] dp = new int[n][max_k + 1][2];
for (int i = 0; i &lt; n; i++) {
    for (int k = max_k; k &gt;= 1; k--) { //**按照之前的问题，此处我认为k应从1开始递增**
        if (i - 1 == -1) { /*处理 base case */ }
        dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);
        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);
    }
}
// 穷举了 n × max_k × 2 个状态，正确。
return dp[n - 1][max_k][0];
</code></pre>
<p>如果你不理解，可以返回第一点「穷举框架」重新阅读体会一下。</p>
<p>这里 k 取值范围比较小，所以可以不用 for 循环，直接把 k = 1 和 2 的情况手动列举出来也可以：</p>
<pre><code>dp[i][2][0] = max(dp[i-1][2][0], dp[i-1][2][1] + prices[i])
dp[i][2][1] = max(dp[i-1][2][1], dp[i-1][1][0] - prices[i])
dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])
dp[i][1][1] = max(dp[i-1][1][1], -prices[i])

int maxProfit_k_2(int[] prices) {
    int dp_i10 = 0, dp_i11 = Integer.MIN_VALUE;
    int dp_i20 = 0, dp_i21 = Integer.MIN_VALUE;
    for (int price : prices) {
        dp_i20 = Math.max(dp_i20, dp_i21 + price);
        dp_i21 = Math.max(dp_i21, dp_i10 - price);
        dp_i10 = Math.max(dp_i10, dp_i11 + price);
        dp_i11 = Math.max(dp_i11, -price);
    }
    return dp_i20;
}
</code></pre>
<p>有状态转移方程和含义明确的变量名指导，相信你很容易看懂。其实我们可以故弄玄虚，把上述四个变量换成 a, b, c, d。这样当别人看到你的代码时就会一头雾水，大惊失色，不得不对你肃然起敬。</p>
<p>第六题，k = any integer<br>
有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。现在想想，交易次数 k 最多有多大呢？<br>
一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。<br>
直接把之前的代码重用：</p>
<pre><code>int maxProfit_k_any(int max_k, int[] prices) {
    int n = prices.length;
    if (max_k &gt; n / 2) 
        return maxProfit_k_inf(prices);

    int[][][] dp = new int[n][max_k + 1][2];
    for (int i = 0; i &lt; n; i++) 
        for (int k = max_k; k &gt;= 1; k--) {
            if (i - 1 == -1) { 
                /* 处理 base case */
                dp[i][k][0] = 0;
                dp[i][k][1] = -prices[i];
                continue;
            }
            dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);
            dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);     
        }
    return dp[n - 1][max_k][0];
}
</code></pre>
<p>四、最后总结<br>
本文给大家讲了如何通过状态转移的方法解决复杂的问题，用一个状态转移方程秒杀了 6 道股票买卖问题，现在想想，其实也不算难对吧？这已经属于动态规划问题中较困难的了。<br>
关键就在于列举出所有可能的「状态」，然后想想怎么穷举更新这些「状态」。一般用一个多维 dp 数组储存这些状态，从 base case 开始向后推进，推进到最后的状态，就是我们想要的答案。想想这个过程，你是不是有点理解「动态规划」这个名词的意义了呢？<br>
具体到股票买卖问题，我们发现了三个状态，使用了一个三维数组，无非还是穷举 + 更新，不过我们可以说的高大上一点，这叫「三维 DP」，怕不怕？这个大实话一说，立刻显得你高人一等，名利双收有没有。<br>
所以，大家不要被各种高大上的名词吓到，再多的困难问题，奇技淫巧，也不过是基本套路的不断升级组合产生的。只要把住算法的底层原理，即可举一反三，逐个击破。</p>
<p>作者：labuladong<br>
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-w-5/<br>
来源：力扣（LeetCode）<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组 188. 买卖股票的最佳时机 IV]]></title>
        <id>https://lixin-ee.github.io//post/188-mai-mai-gu-piao-de-zui-jia-shi-ji-iv</id>
        <link href="https://lixin-ee.github.io//post/188-mai-mai-gu-piao-de-zui-jia-shi-ji-iv">
        </link>
        <updated>2019-09-18T10:44:29.000Z</updated>
        <content type="html"><![CDATA[<p>原题目</p>
<blockquote>
<p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。<br>
设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。<br>
注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p>示例 1:<br>
输入: [2,4,1], k = 2<br>
输出: 2<br>
解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。<br>
示例 2:<br>
输入: [3,2,6,5,0,3], k = 2<br>
输出: 7<br>
解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。<br>
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>参考股票买卖问题的动态规划，可以得出本次与前面的题的差别在于k等于不定值，既可以等于无限，也可以等于特定值，坑也是在这个上面，由于和之前的差不多，我直接加工了之前的代码，主要是增加了k和n/2的对比，主要是想限制k的不合理值，降低维数：</p>
<pre><code>class Solution {
public:
    int maxProfit(int k, vector&lt;int&gt;&amp; prices) {
         const int n = prices.size();
        if(n==0||n==1)
            return 0;
	const int max_k = k&lt;n/2?k:n/2;
	vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; dp(n, vector&lt;vector&lt;int&gt;&gt;(max_k+1, vector&lt;int&gt;(2,0)));
	for (int i = 0; i &lt; n; i++) {
		for (int k = 1; k &lt;=max_k; k++) {
			if (i - 1 == -1) { 
				dp[0][k][0] = 0 ;
				dp[0][k][1] = - prices[0];
			}
			else {
				dp[i][k][0] = dp[i - 1][k][0]&gt;dp[i - 1][k][1] + prices[i] ? dp[i - 1][k][0] : dp[i - 1][k][1] + prices[i];
				dp[i][k][1] = dp[i - 1][k][1]&gt;dp[i - 1][k - 1][0] - prices[i] ? dp[i - 1][k][1] : dp[i - 1][k - 1][0] - prices[i];
			}
		}
	}
	return dp[n - 1][max_k][0];
    }
};
</code></pre>
<p>结果显示内存爆炸，出问题的用例是：<br>
1000000000<br>
[106,373,495,46,359,919,906,440,783,583,784,73,238,701,972,308,165,774,990,675,737,990,713,157,211,880,961,132,980,...]</p>
<p>k值我是处理过的，不应该是它的影响，然后翻看了题解中其他人也有这个问题，最后仔细思考了一下，发现一个比较奇葩的问题，虽然代码是对的，但是其实k&gt;n/2的时候已经等于无限购买次数的情况了，那就和题目二的情况一样了，完全可以使用题目二的代码来取消k的作用，降低维数，所以给出代码如下：</p>
<pre><code>class Solution {
public:
    int maxProfit(int k, vector&lt;int&gt;&amp; prices) {
         const int n = prices.size();
        if(n==0||n==1)
            return 0;
        if(k&gt;n/2){
            int len=prices.size();
        int max=0;
        vector&lt;int&gt; profit(len,0);
        for(int i=1;i&lt;len;++i)
            profit[i]=prices[i]-prices[i-1];
        for(int i=0;i&lt;len;++i)
            if(profit[i]&gt;0)
                max +=profit[i];
        return max;
            
        }
	const int max_k = k;
	vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; dp(n, vector&lt;vector&lt;int&gt;&gt;(max_k+1, vector&lt;int&gt;(2,0)));
	for (int i = 0; i &lt; n; i++) {
		for (int k = 1; k &lt;=max_k; k++) {
			if (i - 1 == -1) { 
				dp[0][k][0] = 0 ;
				dp[0][k][1] = - prices[0];
			}
			else {
				dp[i][k][0] = dp[i - 1][k][0]&gt;dp[i - 1][k][1] + prices[i] ? dp[i - 1][k][0] : dp[i - 1][k][1] + prices[i];
				dp[i][k][1] = dp[i - 1][k][1]&gt;dp[i - 1][k - 1][0] - prices[i] ? dp[i - 1][k][1] : dp[i - 1][k - 1][0] - prices[i];
			}
		}
	}
	return dp[n - 1][max_k][0];
    }
};
</code></pre>
<p>最后顺利通过，虽然花的时间还是比较多，不过通过这一次还是认识到不能简单地照搬代码，还是得老老实实地思考优化等方面的问题！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ primer 第七章 笔记+习题 7.4-7.6]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-qi-zhang-bi-ji-xi-ti-74-76</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-qi-zhang-bi-ji-xi-ti-74-76">
        </link>
        <updated>2019-09-17T11:33:12.000Z</updated>
        <content type="html"><![CDATA[<p>7.4<br>
一个类就是一个作用域<br>
一旦遇到类名，定义的剩余部分就在类的作用域之内了，包括<strong>参数列表和函数体</strong>，所以参数列表内的参数不需要再声明类<br>
但返回类型出现在类名之前，所以要想把类成员作为返回类型，<strong>必须在返回类型前加上类名</strong></p>
<p>习题7.33<br>
pos的作用域并不在类里面，需要改成Screen::pos</p>
<p>7.4.1名字查找与类的作用域<br>
编译器处理完类中的<strong>全部声明后才会处理成员函数的定义</strong>，所以成员函数体中可以使用类中定义的任何名字，<strong>但是类型名不同，必须定义在一开始，否则会找不到</strong><br>
如果某个成员的声明使用了类中尚未出现的名字，编译器将会在定义该类的作用域中继续查找<br>
如果成员使用了外层作用域中的某个名字，<strong>则该名字代表一种类型</strong>，类不可以在之后重新定义该名字，合法但不应该在类内重新定义<br>
typedef int type_out;  class C{ type_out i; typedef double type_out;//<strong>合法但不应该</strong>在类内重新定义}<br>
类型名的定义通常出现在类的开始处（using typedef）<br>
可以通过作用域运算符来访问不同作用域中的同名运算符</p>
<p>习题7.34<br>
有问题！！类型名和类数据成员名字不同，必须定义在一开始，否则会找不到<br>
习题7.35<br>
类内不应该再定义Type 但合法，所以内部的都是 double，但 外部定义的函数返回类型用的是string的Type</p>
<p>7.5.1构造函数初始值列表<br>
我们定义变量时习惯于立即对其进行初始化，而非先定义再赋值<br>
如果没有在构造函数的初始值列表中显式地初始化成员，则该成员将在构造函数体之前执行<strong>默认初始化</strong><br>
如果成员是<strong>const、引用，或者属于某种未提供默认构造函数的类类型</strong>，我们必须通过构造函数初始值列表为这些成员提供初值初始化，不能通过后续赋值<br>
在初始值列表中初始值的前后位置关系不会影响实际的初始化顺序<br>
最好令构造函数初始值列表中初始值的顺序与成员声明的顺序保持一致，而且尽量避免使用某些成员初始化其他成员，最好用构造函数的参数作为成员的初始值<br>
默认构造函数和提供了默认实参的构造函数功能相同<br>
如果一个构造函数为<strong>所有参数提供了默认实参，则它实际上也定义了默认构造函数</strong><br>
并非所有的参数都应该有一个默认值</p>
<p>习题7.36<br>
其实是合法的，只是不应该使用base，因为在初始值列表中初始值的前后位置关系不会影响实际的初始化顺序，所以base%J是未知的<br>
习题7.37<br>
第一种调用了第三个 next调用了第一个默认函数  last调用了第一个为&quot;9-999-99999-9&quot;<br>
知识点：如果一个构造函数为<strong>所有参数提供了默认实参，则它实际上也定义了默认构造函数</strong><br>
习题7.38<br>
Sales_data(std::istream &amp;is){ read(is,*this);}<br>
习题7.39<br>
不合法，这样子它就定义了两个默认构造函数，有二义性<br>
知识点：如果一个构造函数为<strong>所有参数提供了默认实参，则它实际上也定义了默认构造函数</strong><br>
习题7.40</p>
<pre><code> class Employee
{   
string EmployeeID;//员工号
string name;//员工姓名
int age;//员工年龄
char sex;//员工性别
string CompanyName;//所属公司
}
</code></pre>
<p>7.5.2委托构造函数<br>
委托构造函数，使用其所在类中的其他构造函数来执行它想要的初始化过程<br>
委托构造函数参数列表必须与类中的另外一个构造函数匹配<br>
当一个构造函数委托给另一个构造函数时，<strong>受委托的构造函数的初始值列表和函数体中的内容依次执行，然后控制权才会交还给委托着的函数体</strong>（例子中的{read(is,*this);}）</p>
<p>习题7.41</p>
<pre><code>Sales_Data(string &amp;s,int &amp;i,double &amp;p,double &amp;a):ISBN(s),units_sold(i),price(p),ave(a){ cout &lt;&lt; &quot;three parameters construction&quot; &lt;&lt; endl; }
		Sales_Data(string &amp;s) :Sales_Data(s, 0, 0) { cout &lt;&lt; &quot;string construction&quot; &lt;&lt; endl; }
		Sales_Data(istream &amp;is) :Sales_Data() { read(is, *this); cout &lt;&lt; &quot;istream construction&quot; &lt;&lt; endl;
		}
		Sales_Data() :Sales_Data(&quot; &quot;, 0, 0) { cout &lt;&lt; &quot;default construction&quot; &lt;&lt; endl; }
</code></pre>
<p>习题7.42<br>
其实就和7.41差不多啦！</p>
<p>7.5.3默认构造函数的作用<br>
value initialization<br>
那么如果在list initialization形式中，没有任何args，也就是<br>
[new] T [object] {};<br>
这时就称为值初始化。这个初始化类型的名字其实有点不明确，按我的理解，实质应该叫做“广义默认初始化”。因为值初始化一般是三种处理方式：<br>
如果T有用户定义的默认构造函数，直接调用；<br>
如果T有编译器生成的默认构造函数，先0值初始化再调用；<br>
如果T根本不是类，直接0值初始化。<br>
而以上三种其实都可以看作默认初始化。<br>
default initialization<br>
[new] T object;<br>
默认初始化除了在值初始化过程中可能进行之外，也可以以上面形式单独进行。这种初始化的独特地方在于，如果T是非class类型，则给出非确定值（不赋值），比如：<br>
int i; double d; bool b;<br>
其实这也就是兼容最早的C行为。<br>
zero initialization<br>
0值初始化除了在值初始化过程中可能进行之外，也可以单独作用于静态（或者线程局部）变量：<br>
static T object;</p>
<p>小结<br>
所有其他初始化形式都是list initialization的特殊表现形式或者与其相关。理解的要点在于，list中的参数要么按构造函数的参数声明顺序，要么按aggregate类型成员声明顺序，逐个赋值。当某些成员没有被这样显示给定值时，进行广义默认初始化（value initialization）：或调用默认构造函数，或赋0值。这么看来，这一堆初始化其实挺符合我们的一贯认知。<br>
习题 7.43</p>
<pre><code>class C{
	NoDefault D;
	C():D(0){}
}
</code></pre>
<p>习题7.44<br>
不合法，NoDefault是一个类，仅仅定义了有十个NoDefault类型的对象，而NoDefault没有默认构造函数，必须初始化<br>
习题7.45<br>
合法，有默认构造函数，可以进行值初始化<br>
习题7.46<br>
（a）错误 系统会自动合成（b）错误 所有形参都有默认实参的也是默认构造函数 （c）不对，应该提供 （d）错误，数据成员类型为类类型时，无法生成默认构造函数</p>
<p>7.5.4隐式的类类型转换<br>
如果构造函数只接受一个实参，则它实际上定义了转换为此类类型的隐式转换机制，并把这种构造函数称作转换构造函数。比如Sales_data类中，接受string的构造函数实际上定义了string向Sales_data隐式转换的规则，在需要使用Sales_data的地方可以使用string来代替。 比如 string s=”9-999-99999-9”; item.combine(s);//combine为Sales_data的成员<strong>可以给常量引用传递一个临时量！普通引用的话这里会报错</strong><br>
编译器只会自动地执行一步类型转换，而不能进行连续两次隐式类型转换,比如：item.combine(”9-999-99999-9”);//先转为string，再转为类类型。<strong>(注意此处是指需要类类型的地方，而不是指构造函数，Sales_data item(“9-999-99999-9”)还是正确的)</strong> 可以Sales_data item（string（“9-999-99999-9”））<br>
<strong>explicit</strong>抑制构造函数定义的隐式转换，只对一个实参的构造函数有效<br>
需要多个实参的构造函数不能用于执行隐式转换，所以无须将这些构造函数指定为explicit<br>
explicit只能在类内声明构造函数时使用，在类外部定义时不应该重复<br>
使用explicit关键字声明构造函数时只能以直接初始化的形式（括号）使用，而且编译器不会在自动转换过程中使用该构造函数<br>
仍可以对explicit声明的构造函数进行显式地强制转换 item.combine(Sales_data(s));</p>
<p>习题7.47<br>
优点：防止用户用了错误的类型进行初始化从而得到不符合初衷的值，保证了程序的严谨性，缺点就是可能要进行显式转换。<br>
习题7.48<br>
（a）const char* 到string的转换<br>
（b）string 到类类型的转换<br>
（c）正确，<br>
习题7.49<br>
（b）错误，无法从string向引用进行转换（a）和（c）都是正确的<br>
知识点：<strong>可以给常量引用传递一个临时量！</strong><br>
习题7.50<br>
单个参数的构造函数都可以设置为explicit<br>
习题7.51<br>
string需要向下兼容c语言，而vector不需要</p>
<p>7.5.5聚合类<br>
聚合类使得用户可以直接访问其成员，并且具有特殊的初始化语法<br>
聚合类的特性：1.所有成员都是public的2.没有定义任何构造函数3，<strong>没有类内初始值</strong>4.没有基类，也没有virtual函数<br>
对聚合类进行初始化的初始值的顺序<strong>必须与声明的顺序一致</strong>，且初始值列表的元素个数不能超过类的成员数量 例如 struct Data{int ival; string s}   Data val={0,”Anna”};//这里的顺序不可以反过来<br>
如果初始值列表中的元素个数<strong>少于</strong>类的成员数量，<strong>则靠后的成员被值初始化</strong></p>
<p>习题7.52<br>
下面的初始化希望将Sales_data 视为一个聚合类，但是Sales_data的数据成员具有初始值，所以无法当做聚合类进行初始化，并且没有合适的构造函数，两个解决办法 1.去掉初始值，变为聚合类 2.增加接受三个参数的构造函数</p>
<p>7.5.6字面值常量类<br>
构造函数<strong>不可以是const</strong>的，但<strong>字面值常量类的构造函数可以是constexpr函数</strong>，并且必须至少提供一个constexpr构造函数<br>
constexpr构造函数必须符合<strong>构造函数的要求（不能包含返回语句）</strong>，又要<strong>符合constexpr函数的要求（只能执行返回语句）</strong>，所以constexpr构造函数体<strong>一般为空</strong><br>
constexpr构造函数<strong>必须初始化所有数据成员</strong></p>
<p>习题7.53</p>
<pre><code>class Debug
{
public:
	constexpr Debug(bool b=true):hw(b),io(b),other(b){}
	constexpr Debug(bool h ,bool i,bool o) : hw(h),io(i), other(o) {}
	void set_hw(bool h = true) { hw = h; }
	void set_io(bool i = true) { io = i; }
	void set_other(bool o = true) { other = o; }
private:
	bool hw;
	bool io;
	bool other;

};
</code></pre>
<p>习题7.54<br>
不应该，set需要执行相应的赋值操作。同时constexpr函数必须有返回值和返回语句<br>
习题7.55<br>
不是。字面值常量类至少必须含有一个constexpr构造函数，同时string不是字面值类型</p>
<p>7.6 类的静态成员<br>
static 静态成员<strong>与类关联，而与特定的对象无关（等于每个对象都可以通用的成员）所以静态成员应该在类外定义，否则每创建一个对象就会被定义一次</strong><br>
静态成员可以是private或者public，静态数据成员的类型可以是常量、引用、指针、类类型等等。<br>
类的静态成员存在于任何对象之外，对象中不包含任何与静态数据成员有关的数据，同时静态成员函数<strong>也不与任何对象绑定在一起，不包含this 指针，不能被声明为const</strong><br>
使用作用域运算符来直接访问静态成员，也可以使用类的对象、引用或者指针来访问<br>
成员函数不用通过作用域运算符就能直接使用静态成员<br>
静态成员函数也可以在类外部进行定义，<strong>但不能重复static关键字</strong>，static只出现在类内部的声明语句<br>
<strong>静态成员不是由类的构造函数初始化的</strong>，不能在类的内部初始化静态成员，<strong>必须在类的外部定义和初始化每个静态成员</strong><br>
一个静态数据成员只能定义一次<br>
静态数据成员定义在任何函数之外，因此存在于程序的整个生命周期中<br>
把静态数据成员的定义和其他非内联函数的定义放在同一个文件中，确保对象只定义一次<br>
例外：可以在类内部初始化constexpr的静态成员，但必须提供const整数类型的类内初始值（常量表达式） 例如 static constexpr int i =10;//<strong>必须是constexpr，不能是const</strong><br>
如果仅仅用于类内，则在类内已经初始化的const或者constexpr static不需要分别定义，否则必须有一条定义语句<br>
特别地，<strong>静态数据成员的类型可以是它所属的类类型</strong>（等于不完全类型），而<strong>非静态数据成员只能声明成它所属的类的指针或引用</strong><br>
静态成员<strong>可以作为默认实参</strong>，非静态数据成员则不能</p>
<p>习题7.56<br>
类的静态成员只与类相关联，而与特定的对象无关，优点在于可以独立于特定的对象 ，其作用域存在与整个程序运行期间。<br>
习题7.57</p>
<pre><code>class Account
{
	static constexpr int period = 30;
	double daily_tbl[period];
	std::string owner;
	double amount;
	static double interestRate;
	static double initRate();
public:
	static double rate() { return interestRate; }
	static void rate(double);
};
</code></pre>
<p>习题7.58<br>
rate显示定义错误，必须为常量成员。需要加上const或者constexpr<br>
vec在类内的定义被误认为是要定义一个函数了，它的直接初始化和函数定义的括号是冲突的，从而显示从vecsize不是类型名，应该在外部声明时才使用example::vec(example::vecsize)<br>
vec显示声明不兼容，两个声明冲突了；</p>
<p>习题感悟<br>
类型名和类数据成员名字不同，必须定义在一开始，否则会找不到<br>
如果成员使用了外层作用域中的某个名字，<strong>则该名字代表一种类型</strong>，类不可以在之后重新定义该名字，合法但不应该<strong>在类内重新定义</strong><br>
在初始值列表中初始值的前后位置关系不会影响实际的初始化顺序，所以用一个成员来初始化另一个成员，结果是未知的<br>
如果一个构造函数为<strong>所有参数提供了默认实参，则它实际上也定义了默认构造函数</strong><br>
可以给常量引用传递一个临时量！<br>
可以在类内部初始化constexpr的静态成员，但必须提供const整数类型的类内初始值（常量表达式） 例如 static constexpr int i =10;//<strong>必须是constexpr，不能是const</strong><br>
<code>static constexpr int vecsize = 20; vector&lt;double&gt; vec(vecsize);</code><br>
vec在类内的定义被误认为是要定义一个函数了，它的直接初始化和函数定义的括号是冲突的，从而显示从vecsize不是类型名，应该在外部声明时才使用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组 123. 买卖股票的最佳时机 III]]></title>
        <id>https://lixin-ee.github.io//post/shu-zu-123-mai-mai-gu-piao-de-zui-jia-shi-ji-iii</id>
        <link href="https://lixin-ee.github.io//post/shu-zu-123-mai-mai-gu-piao-de-zui-jia-shi-ji-iii">
        </link>
        <updated>2019-09-17T07:04:48.000Z</updated>
        <content type="html"><![CDATA[<p>原题如下：</p>
<blockquote>
<p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。<br>
设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。<br>
注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p>示例 1:<br>
输入: [3,3,5,0,0,3,1,4]<br>
输出: 6<br>
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。<br>
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。<br>
示例 2:<br>
输入: [1,2,3,4,5]<br>
输出: 4<br>
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。  <br>
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。  <br>
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。<br>
示例 3:<br>
输入: [7,6,4,3,1]<br>
输出: 0<br>
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题的难度远远大于前面两道的难度，我尝试了从前面累加和后面累加都无效，主要是受到最大交易次数2的影响，以及存在着特殊例子如{ 1,2,4,2,5,7,2,4,9,0 }这种需要把两次购买合并成一次购买的情况，很明显感觉到自己的思路有缺陷，一开始给出的未能通过的代码如下：</p>
<pre><code>class Solution {
public:
    int maxProfit(vector&lt;int&gt;&amp; prices) {
        int len=prices.size();
        if(len==0||len==1){
            return 0;
        }
        int profit=0 ;
        int profit1=0,profit2=0;
        for(int i=0;i&lt;len-1;++i){
            if(prices[i+1]-prices[i]&gt;=0)
                profit +=prices[i+1]-prices[i];
            if(prices[i+1]-prices[i]&lt;0||i==len-2){
                if(profit&gt;profit1)
                    profit2=profit1,profit1=profit;
                else if(profit&gt;profit2)
                    profit2=profit;
                profit=0;
            }
        }
        return profit1+profit2;
    }
};
</code></pre>
<p>这一次没有官方题解，不过有一个比较精彩的个人题解，关于动态规划的，总结了所有的股票买卖问题的统一解题思路，我感觉还不错，不过篇幅过长，而且涉及后面多道题目，所以单独给出一篇文章吧<br>
符合动态规划的代码如下（注意，非最终代码，仍有很大的优化空间）：</p>
<pre><code>class Solution {
public:
    int maxProfit(vector&lt;int&gt;&amp; prices) {
        const int n = prices.size();
        if(n==0||n==1)
            return 0;
	const int max_k = 2;
	vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; dp(n, vector&lt;vector&lt;int&gt;&gt;(max_k+1, vector&lt;int&gt;(2,0)));
	for (int i = 0; i &lt; n; i++) {
		for (int k = 1; k &lt;=2 ; k++) {
			if (i - 1 == -1) { 
				dp[0][k][0] = 0 ;
				dp[0][k][1] = - prices[0];
			}
			else {
				dp[i][k][0] = dp[i - 1][k][0]&gt;dp[i - 1][k][1] + prices[i] ? dp[i - 1][k][0] : dp[i - 1][k][1] + prices[i];
				dp[i][k][1] = dp[i - 1][k][1]&gt;dp[i - 1][k - 1][0] - prices[i] ? dp[i - 1][k][1] : dp[i - 1][k - 1][0] - prices[i];
			}
		}
	}
	return dp[n - 1][max_k][0];
    }
};
</code></pre>
<p>优化版本，因为k比较小，完全可以直接穷举出来</p>
<pre><code>	vector&lt;int&gt; prices{ 1,2,4,2,5,7,2,4,9,0 };
	const int n = prices.size();
	const int max_k = 2;
	int dp_i10 = 0, dp_i11 = -9999999;
	int dp_i20 = 0, dp_i21 = -9999999;

	for (int i = 0; i &lt; n; i++) {
		
			dp_i20 = dp_i20&gt;dp_i21 + prices[i] ? dp_i20:dp_i21 + prices[i];
			dp_i21 = dp_i21&gt;dp_i10 - prices[i] ? dp_i21:dp_i10 - prices[i];
			dp_i10 = dp_i10&gt;dp_i11 + prices[i] ? dp_i10:dp_i11 + prices[i];
			dp_i11 = dp_i11&gt;-prices[i] ? dp_i11:-prices[i];
			
		}
	

	return  dp_i20;
</code></pre>
<p>感想：这道题可是足足搞了我两天，期间也算是有不少的事吧，特别是被原题解中有些不太恰当的地方误导了，足足花了一个上午的手写仿真和代码验证才纠正过来，同时这个误导也使得我中途好几次怀疑自我，没有坚持看下来，但是所幸最后还是坚持了下来了，还是继续加油吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ primer 第七章 笔记+习题 7.1-7.3]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-qi-zhang-bi-ji-xi-ti-71-73</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-qi-zhang-bi-ji-xi-ti-71-73">
        </link>
        <updated>2019-09-16T00:49:30.000Z</updated>
        <content type="html"><![CDATA[<p>7类<br>
类的基本思想是数据抽象和封装，数据抽象是一种依赖于接口和实现分离的编程技术。类的接口包括用户所能执行的操作，类的实现则包括类的数据成员、负责接口实现的函数体以及定义类所需的各种私有函数<br>
封装实现了类的接口和实现的分离，隐藏了类的实现细节<br>
类要想实现数据抽象和封装，需要首先定义一个抽象数据类型</p>
<p>习题7.1<br>
Sale_data.h</p>
<pre><code>#ifndef SALES_DATA_H
#define SALES_DATA_H

#include &lt;iostream&gt;
#include &lt;string&gt;

using std::string;
using std::cin;
using std::cout;
using std::istream;
using std::ostream;

struct Sales_Data {
	public:
		string ISBN;
		int units_sold = 0;
		double price = 0.00;
		double ave = 0.00;

		string isbn() {
			return ISBN;
		}

		bool equal_isbn(Sales_Data exam)const {
			return ((*this).ISBN == exam.ISBN);
		}

		Sales_Data&amp; combine(Sales_Data&amp; data) {
			if ((*this).equal_isbn(data)) {
				Sales_Data sum;
				sum.units_sold = (*this).units_sold + data.units_sold;
				sum.ave = ((*this).units_sold*(*this).price + data.units_sold*data.price) / sum.units_sold;
				sum.price = sum.ave;
				return sum;
			}
			else
			{
				std::cerr &lt;&lt; &quot;Data must have same ISBN&quot; &lt;&lt; std::endl;
			}
		}
};

bool read(istream &amp;in, Sales_Data&amp; data) {
	if (in &gt;&gt; data.ISBN &gt;&gt; data.units_sold &gt;&gt; data.price) {
		data.ave = data.price*data.units_sold / data.units_sold;
		return true;
	}
	return false;
}

Sales_Data&amp; add(Sales_Data&amp; data1, Sales_Data&amp; data2) {
	if (data1.equal_isbn(data2)) {
		Sales_Data sum;
		sum.units_sold = data1.units_sold + data2.units_sold;
		sum.ave = (data1.units_sold*data1.price + data2.units_sold*data2.price) / sum.units_sold;
		sum.price = sum.ave;
		return sum;
	}
	else
	{
		std::cerr &lt;&lt; &quot;Data must have same ISBN&quot; &lt;&lt; std::endl;
	}
}

void print(ostream &amp;os, Sales_Data&amp; data) {
	os &lt;&lt; data.ISBN &lt;&lt; ' ' &lt;&lt; data.price &lt;&lt; ' ' &lt;&lt; data.units_sold &lt;&lt; ' ' &lt;&lt; data.ave &lt;&lt; ' ';
}


#endif // !SALES_DATA_H
#pragma once
</code></pre>
<p>homework7.1.cpp</p>
<pre><code>#include &quot;Sales_data.h&quot;

using namespace std;

int main() {
	Sales_Data total;
	if (read(cin, total)) {
		Sales_Data trans;
		while (read(cin, trans)) {
			if (total.equal_isbn(trans))
				total.combine(trans);
			else {
				print(cout, total);
				total = trans;
			}
		}
		print(cout, total);
	}
	else {
		cerr &lt;&lt; &quot;No data?!&quot; &lt;&lt; endl;
		return -1;
	}
	return 0;
}
</code></pre>
<p>注意 total = trans；这里未处理好，应该重载符号=或者定义拷贝赋值函数。<br>
知识点：注意成员函数和非成员函数的选择和安排</p>
<p>7.1.2定义改进的Sales_data类<br>
成员函数的声明必须在类的内部，定义则既可以类内部也可以在类外部<br>
<strong>非成员函数定义和声明都在类的外部</strong><br>
定义在类内部的函数是隐式的<strong>inline函数</strong><br>
成员函数通过this这个额外的隐式参数来访问调用它的那个对象<br>
在成员函数内部，可以直接调用该函数的对象的成员，而无须通过成员访问运算符<br>
this是一个<strong>常量指针</strong>，不允许改变其保存的地址<br>
Type func() const { }紧跟在参数列表后的<strong>const表示this是一个指向常量的指针</strong>，这样使用const的成员函数被称为<strong>常量成员函数</strong>，用于表示常量成员函数不能改变调用它的对象的内容<br>
<strong>非成员函数不能使用const限定符</strong><br>
this不能够显式地定义<br>
常量对象及其引用或指针都只能调用常量成员函数<br>
类本身就是一个作用域<br>
成员函数可以调用<strong>后面才定义的数据成员</strong>，因为类编译首先编译成员声明，然后才轮到成员函数<br>
类外部定义的成员的名字必须包含它所属的类名</p>
<p>习题7.2<br>
如习题7.1所示，isbn和combine我都先设置为成员函数<br>
习题7.3<br>
如习题7.1所示，就是=号拷贝赋值函数还未重载<br>
习题7.4</p>
<pre><code>#ifndef PERSON_H
#define PERSON_H
#include &lt;string&gt;
#include &lt;iostream&gt;

using std::string;

class Person
{
public:

	string name;
	string adress;
#endif // !PERSON_H
#pragma once
</code></pre>
<p>知识点：别忘了头文件保护符（预处理变量），有效避免重复定义<br>
习题7.5<br>
应该是const的，因为这些返回操作不应该有修改数据的权限</p>
<p>7.1.3定义类相关的非成员函数<br>
非成员函数在操作上从概念上属于类的接口的组成部分，但是他们<strong>实际并不属于类的本身</strong>，定义的时候也不需要作用域符 class：：<br>
如果非成员函数是类接口的组成部分，则这些函数的声明应该与类（的声明）在同一个头文件内<br>
在形参列表中IO类属于不能被拷贝的类型，<strong>只能通过引用来传递</strong>它们，同时读取写入都会改变流的内容，<strong>所以不能用常量引用</strong><br>
输出输入的非成员函数应该<strong>返回输出输入流的引用</strong> 例如 istream&amp; func(){}</p>
<p>习题7.6</p>
<pre><code>istream&amp; read(istream &amp;is, Sales_Data&amp; data) {
	is &gt;&gt; data.ISBN &gt;&gt; data.units_sold &gt;&gt; data.price;
	data.ave = data.price*data.units_sold / data.units_sold;
	return is;
}

ostream&amp; print(ostream &amp;os, const Sales_Data&amp; data) {
	os &lt;&lt; data.ISBN &lt;&lt; ' ' &lt;&lt; data.price &lt;&lt; ' ' &lt;&lt; data.units_sold &lt;&lt; ' ' &lt;&lt; data.ave &lt;&lt; ' ';
	return os;
}


Sales_Data&amp; add(Sales_Data&amp; data1, Sales_Data&amp; data2) {
	if (data1.equal_isbn(data2)) {
		Sales_Data sum;
		sum.units_sold = data1.units_sold + data2.units_sold;
		sum.ave = (data1.units_sold*data1.price + data2.units_sold*data2.price) / sum.units_sold;
		sum.price = sum.ave;
		return sum;
	}
	else
	{
		std::cerr &lt;&lt; &quot;Data must have same ISBN&quot; &lt;&lt; std::endl;
	}
}
</code></pre>
<p>知识点：输出输入的非成员函数应该<strong>返回输出输入流的引用</strong><br>
习题7.7<br>
上面已经用到了（有点疑惑习题的安排）<br>
习题7.8<br>
read 需要改动类数据成员，而print不应该对类进行改动<br>
知识点：非成员函数不能使用const限定符<br>
习题7.9<br>
上面已经用到了<br>
习题7.10<br>
对data1 和data2的输入操作进行判断</p>
<p>7.1.4 构造函数<br>
构造函数 属于<strong>成员函数</strong>，用于初始化类对象的<strong>数据成员</strong><br>
只要类的对象被<strong>创建</strong>，就会执行构造函数<br>
构造函数 <strong>没有返回类型</strong><br>
类可以包含多个构造函数<br>
构造函数<strong>不能被声明成const</strong>，但是构造函数可以在构造过程中<strong>对const对象写值</strong>，因为直到构造函数<strong>完成初始化过程后对象才能真正获得const属性</strong><br>
如果没有定义构造函数，就会使用默认构造函数<br>
编译器创建的构造函数又被称为合成的默认构造函数，如果存在类内初始值，用来初始化成员，否则默认初始化<br>
1.只有当类没有声明任何构造函数时，编译器才会自动生成默认构造函数<br>
2.内置类型或复合类型（数组或指针）默认初始化为<strong>未定义</strong>，只有当这些成员全都被赋予了类内的初始值时，这个类才适合于使用合成的默认构造函数（否则使用默认构造函数时这些类型很危险）<br>
3.编译器不能为某些类合成默认的构造函数，比如类中包含其他类类型的成员并且这个成员的类型没有默认构造函数，<br>
= default 要求编译器生成构造函数 既可以和声明一起出现在类的内部，也可以作为定义出现在类的外部 例子 Sales_data() = default;<br>
如果 = default 在类的内部，则默认构造函数是内联函数，可以直接展开，在类的外部则默认情况下不是内联的<br>
如果编译器不支持类内初始值，那么默认构造函数应该使用构造函数初始值列表<br>
构造函数初始值列表<br>
<code>Sales_data(const std::string &amp;s,unsigned n,double p): bookNo(s),units_sold(n),revenue(p\*n) { }</code><br>
没有包含在构造函数初始值列表中的数据成员将会使用与<strong>合成默认构造函数相同的方式</strong>被隐式初始化<br>
只要定义了其他构造函数，都必须使用 = default;，<strong>保证所有成员都被初始化</strong></p>
<p>习题7.11</p>
<pre><code>Sales_Data() = default;
		Sales_Data(string &amp;s,int &amp;i,double &amp;p,double &amp;a):ISBN(s),units_sold(i),price(p),ave(a){}
		Sales_Data(string &amp;s) :ISBN(s) {}
</code></pre>
<p>习题7.12</p>
<pre><code>Sales_Data(istream &amp;is) { read(is, *this); }
</code></pre>
<p>习题7.13<br>
<code>Sales_Data total(cin);</code><br>
习题7.14<br>
<code>Sales_Data():units_sold(0), price(0.00), ave(0.00) {}</code><br>
知识点：显式默认初始化是不需要形参列表的<br>
习题7.15</p>
<pre><code>	Person()=default;
	Person(string&amp; n, string&amp;a) :name(n),address(a){};
</code></pre>
<p>7.1.5 拷贝、赋值和析构<br>
拷贝、赋值、销毁对象时发生的行为也需要定义，如果不主动定义，编译器会替我们合成它们</p>
<p>7.2 访问控制与封装<br>
使用<strong>访问说明符</strong>来加强类的封装性<br>
public：在整个程序内都可被访问，用于<strong>定义类的接口</strong><br>
private：可以被类的成员函数访问，但是不能被使用该类的代码访问，封装了类的实现细节<br>
访问说明符可以只用一次声明一堆对象，因为其有效范围直到出现下一个访问说明符或者到达类的结尾处，也可以在每个对象前添加<br>
public可用于构造函数和部分成员函数，private一般用于数据成员和显示部分的函数<br>
class和struct都可以用于定义类，唯一区别是定义对象的默认访问权限不同，在class中，无访问说明符的成员定义默认为private，<strong>struct中则默认为public</strong><br>
<strong>构造函数也可以设置为private</strong>，但是一旦设置为private，只有本类内部可以调用构造函数，就只能通过public的成员函数来构造这个类了</p>
<p>习题7.16<br>
没有限定，类的接口应该定义在public后，具体的实现应该封装在private内部<br>
习题7.17<br>
如果没有定义访问说明符的话，class的默认访问说明符为private，struct则为public<br>
习题7.18<br>
封装实现了类的接口和实现的分离，封装后的类隐藏了它的实现细节，累的用户只能使用接口而无法访问实现部分<br>
习题7.19<br>
暂时所有都是public，因为这些操作都属于接口，用户对其进行访问是对类无害的</p>
<p>7.2.1友元<br>
友元 允许其他类或者函数访问它的非公有成员<br>
在类内增加一条以friend关键字开头的函数声明<br>
友元声明只能出现在类定义的内部，但是在类内出现的具体位置不限（可以最前可以最后，一般在最前），友元不是类的成员，也不受所在区域访问控制级别的约束<br>
友元的声明仅仅指定了访问的权限，并非一个通常意义上的函数声明，所以如果希望类的用户能够调用某个友元的函数，那么就必须在友元声明之外专门对函数进行一次声明，通常会把友元的声明和类本身放置在同一个头文件中（类的外部）<br>
友元会破坏封装性</p>
<p>习题7.20<br>
主要给非成员函数使用，利在于增强了非成员函数的功能和便利性，弊处在于破坏了类的封装性<br>
习题7.21<br>
Sales_data的实现都是可以公开的，所以可以全部设置为public，但是注意，构造函数也可以设置为private，但是一旦设置为private，只有本类内部可以调用构造函数，就只能通过public的成员函数来构造这个类了<br>
习题7.22<br>
如题7.19</p>
<p>7.3 类的其他特性<br>
7.3.1类成员再谈<br>
类型成员：自定义某种类型在类中的别名引用 using typedef也可以设置访问限制<br>
使用类型别名可以隐藏类实现的细节，增加封装性<br>
类型别名必须先定义后使用，类型成员通常出现在类开始的地方<br>
成员函数也可以重载<br>
mutable 可变数据成员 永远不会是const，即使它是const对象的成员<br>
mutable int acess_num; void func() const{ ++acess_num;} //记录函数调用次数<br>
const成员函数也可以改变一个可变成员的值<br>
类内初始值必须用=或者花括号来初始化</p>
<p>习题7.23</p>
<pre><code>class Screen
{
private:
	typedef string::size_type pos;
	typedef string str;

public:
	pos cursor = 0;
	pos height = 0, width = 0;
	string contents;
};
</code></pre>
<p>习题7.24</p>
<pre><code>Screen()=default;
	Screen(pos ht, pos wd) :height(ht), width(wd), contents(ht*wd, ' ') {}
	Screen(pos ht, pos wd, char c) :height(ht), width(wd), contents(ht*wd, c) {}
</code></pre>
<p>习题7.25<br>
可以，数据成员主要是int和string，其都定义了相应的拷贝和赋值操作，如果是类就不行了。<br>
习题7.26<br>
内联成员函数直接在函数前面加上inline就好，声明定义、内部外部都可以</p>
<p>7.3.2返回*this的成员函数<br>
返回当前对象 *this的引用可以使程序连续执行，比如myScreen.move().set()<br>
当返回的类型<strong>不是引用</strong>时，将会返回其<strong>拷贝的副本</strong>, 比如move直接返回Screen 而非&amp;Screen的话，set()只能改变一个临时副本的值，而不能改变myScrenn的值，<strong>但是注意副本的值也会进行set</strong>，只是本身没有改变<br>
<strong>const成员函数只能返回const 引用</strong>，比如如果move()改为常量成员函数，则返回常量引用，set()将引发错误<br>
<strong>注意！引用没有顶层const和底层const之分，引用可以说是天生有顶层const（引用必须初始化，初始化后不能更改绑定的对象）</strong><br>
当一个成员函数内部调用另一个成员函数时，this指针在其中隐式地传递，<br>
如果类内重载函数中含有完全相同的操作，最好把相同的操作定义为一个内联私有函数</p>
<p>习题7.27</p>
<pre><code>Screen &amp;move(pos r, pos c) {
		pos row = r*width;
		cursor = row + c;
		return *this;
	}

	inline Screen &amp;set(char c) {
		contents[cursor]=c;
		return *this;
	}

	ostream &amp;display(ostream &amp;os) const {
		os &lt;&lt; contents;
		return os;
	}
	ostream &amp;display(ostream &amp;os)  {
		os &lt;&lt; contents;
		return os;
	}
</code></pre>
<p>知识点：注意要记得return *this;<br>
习题7.28<br>
move和set完全不起作用，因为返回的是一个拷贝的副本，所以后续的函数都只是对整个副本进行操作，对原对象本身不会有变动，所以第一个输出有#号，第二个没有！！！<br>
习题7.29<br>
正确<br>
习题7.30<br>
1使用this可以返回对调用该函数的对象的引用。<br>
2：可以非常明确地指出访问的是调用该函数的对象的成员，且可以在成员函数中使用与数据成员同名的形参。<br>
缺点：不必要使用，代码多余。（参考CSDN MISAYAONE）</p>
<p>7.3.3类类型<br>
即使两个类内部完全一样，也是<strong>不同的类型，不可以互相拷贝赋值</strong><br>
类可以先声明再定义，先声明未定义的时候称为<strong>前向声明</strong>，此时是一个<strong>不完全类型</strong>，只能用于1.<strong>定义</strong>指向这种类型的<strong>指针或者引用</strong>2.<strong>声明（不能定义）</strong> 以不完全类型作为<strong>参数或者返回类型的函数</strong><br>
类必须先定义才能创建对象<br>
只有当类全部完成后类才算被定义，所以<strong>类的成员类型不可以是该类自己</strong>，但是声明后的类允许包含指向它自身类型的<strong>引用或指针</strong>。</p>
<p>习题7.31</p>
<pre><code>class X
{
public:
	Y *y;
};

class Y
{
public:
	X x;
};
</code></pre>
<p>7.3.4再探友元<br>
可以将非成员函数、其他类、其他类的成员函数定义为友元<br>
将其他类的成员函数定义为友元的步骤：1.首先定义类a的，其中声明函数a1，但不能定义它2.定义类b，包括对于函数a1的友元声明3.最后定义a1，才能使用类b的成员<br>
重载函数等同于<strong>不同的多个函数</strong>，需要对每一个函数<strong>单独进行声明</strong><br>
就算是在类内部定义使用的友元函数，也必须在类的外部提供声明从而使得函数可见，因为<strong>友元声明并非普通意义上的声明</strong>，作用只是影响访问权限</p>
<p>习题7.32</p>
<pre><code>class Window_mgr
{
public:
	void clear();
};

class Screen
{
public:
	friend void Window_mgr::clear();
};

void Window_mgr::clear() {
}
</code></pre>
<p>习题感悟：知识点：注意成员函数和非成员函数的选择和安排<br>
知识点：别忘了头文件保护符（预处理变量），有效避免重复定义<br>
输出输入的非成员函数应该<strong>返回输出输入流的引用</strong><br>
知识点：非成员函数不能使用const限定符<br>
<strong>显式</strong>默认初始化是不需要形参列表的：<br>
<code>Sales_Data():units_sold(0), price(0.00), ave(0.00) {}</code><br>
构造函数也可以设置为private，但是一旦设置为private，只有本类内部可以调用构造函数，就只能通过public的成员函数来构造这个类了<br>
内联成员函数直接在函数前面加上inline就好，声明定义、内部外部都可以<br>
注意要记得return *this;<br>
当连续函数返回的是一个拷贝的副本，后续的函数都仍会对整个副本进行操作，只是对原对象本身不会有变动，所以第一个输出可以有#号，第二个没有！！！myScreen.move(4, 0).set('#').display(cout);//副本输出仍会有#号的改动</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组 122. 买卖股票的最佳时机 II]]></title>
        <id>https://lixin-ee.github.io//post/shu-zu-122-mai-mai-gu-piao-de-zui-jia-shi-ji-ii</id>
        <link href="https://lixin-ee.github.io//post/shu-zu-122-mai-mai-gu-piao-de-zui-jia-shi-ji-ii">
        </link>
        <updated>2019-09-15T13:15:44.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>官方题目：<br>
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。<br>
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p>示例 1:<br>
输入: [7,1,5,3,6,4]<br>
输出: 7<br>
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。<br>
示例 2:<br>
输入: [1,2,3,4,5]<br>
输出: 4<br>
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。<br>
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题一开始还是有有点难倒我的，老是想着怎么找最大差值，但是转念一想，既然可以参加多次交易，那岂不是可以穿越到第二天发现升值了就马上回到前一天买下来？那就是非常简单的正差值相加了，代码如下：</p>
<pre><code>class Solution {
public:
    int maxProfit(vector&lt;int&gt;&amp; prices) {
        int len=prices.size();
        int max=0;
        vector&lt;int&gt; profit(len,0);
        for(int i=1;i&lt;len;++i)
            profit[i]=prices[i]-prices[i-1];
        for(int i=0;i&lt;len;++i)
            if(profit[i]&gt;0)
                max +=profit[i];
        return max;
    }
};
</code></pre>
<p>这一题也是一次过，不过其实看了官方题解发现还是可以有很多可以提升的地方的，比如profit这个数组提高了空间复杂度，完全可以将差值作为判断条件。以下是官方题解：<br>
摘要<br>
我们必须确定通过交易能够获得的最大利润（对于交易次数没有限制）。为此，我们需要找出那些共同使得利润最大化的买入及卖出价格。</p>
<blockquote>
<p>解决方案<br>
方法一：暴力法<br>
这种情况下，我们只需要计算与所有可能的交易组合相对应的利润，并找出它们中的最大利润。</p>
</blockquote>
<pre><code>Java
class Solution {
    public int maxProfit(int[] prices) {
        return calculate(prices, 0);
    }

    public int calculate(int prices[], int s) {
        if (s &gt;= prices.length)
            return 0;
        int max = 0;
        for (int start = s; start &lt; prices.length; start++) {
            int maxprofit = 0;
            for (int i = start + 1; i &lt; prices.length; i++) {
                if (prices[start] &lt; prices[i]) {
                    int profit = calculate(prices, i + 1) + prices[i] - prices[start];
                    if (profit &gt; maxprofit)
                        maxprofit = profit;
                }
            }
            if (maxprofit &gt; max)
                max = maxprofit;
        }
        return max;
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n^n)，调用递归函数 n^n次。<br>
空间复杂度：O(n)，递归的深度为 n。</p>
<p>方法二：峰谷法<br>
算法<br>
假设给定的数组为：<br>
[7, 1, 5, 3, 6, 4]<br>
如果我们在图表上绘制给定数组中的数字，我们将会得到<br>
如果我们分析图表，那么我们的兴趣点是连续的峰和谷。<br>
用数学语言描述为：<br>
TotalProfit= ∑ (height(peaki)−height(valleyi))<br>
关键是我们需要考虑到紧跟谷的每一个峰值以最大化利润。如果我们试图跳过其中一个峰值来获取更多利润，那么我们最终将失去其中一笔交易中获得的利润，从而导致总利润的降低。<br>
例如，在上述情况下，如果我们跳过 peak_i	 和 valley_j<br>
试图通过考虑差异较大的点以获取更多的利润，获得的净利润总是会小与包含它们而获得的静利润，因为 C 总是小于 A+B。</p>
</blockquote>
<pre><code>Java
class Solution {
    public int maxProfit(int[] prices) {
        int i = 0;
        int valley = prices[0];
        int peak = prices[0];
        int maxprofit = 0;
        while (i &lt; prices.length - 1) {
            while (i &lt; prices.length - 1 &amp;&amp; prices[i] &gt;= prices[i + 1])
                i++;
            valley = prices[i];
            while (i &lt; prices.length - 1 &amp;&amp; prices[i] &lt;= prices[i + 1])
                i++;
            peak = prices[i];
            maxprofit += peak - valley;
        }
        return maxprofit;
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n)。遍历一次。<br>
空间复杂度：O(1)。需要常量的空间。</p>
<p>方法三：简单的一次遍历<br>
算法<br>
该解决方案遵循 方法二 的本身使用的逻辑，但有一些轻微的变化。在这种情况下，我们可以简单地继续在斜坡上爬升并持续增加从连续交易中获得的利润，而不是在谷之后寻找每个峰值。最后，我们将有效地使用峰值和谷值，但我们不需要跟踪峰值和谷值对应的成本以及最大利润，但我们可以直接继续增加加数组的连续数字之间的差值，如果第二个数字大于第一个数字，我们获得的总和将是最大利润。这种方法将简化解决方案。<br>
这个例子可以更清楚地展现上述情况：<br>
[1, 7, 2, 3, 6, 7, 6, 7]<br>
与此数组对应的图形是：<br>
从上图中，我们可以观察到 A+B+C 的和等于差值 D 所对应的连续峰和谷的高度之差。</p>
</blockquote>
<pre><code>Java
class Solution {
    public int maxProfit(int[] prices) {
        int maxprofit = 0;
        for (int i = 1; i &lt; prices.length; i++) {
            if (prices[i] &gt; prices[i - 1])
                maxprofit += prices[i] - prices[i - 1];
        }
        return maxprofit;
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n)，遍历一次。<br>
空间复杂度：O(1)，需要常量的空间。</p>
</blockquote>
<p>暴力解就没啥好说的了，太暴力啦！，题解三就是和我给出的解一致，同时也给了我提示可以直接直接对差值进行判断，而不用再声明一个新的数组。然后题解二虽然过程比题解三复杂，但是它可以定位到最后取值的峰值和谷值所在，也算是一种取舍吧</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组 121. 买卖股票的最佳时机]]></title>
        <id>https://lixin-ee.github.io//post/shu-zu-121-mai-mai-gu-piao-de-zui-jia-shi-ji</id>
        <link href="https://lixin-ee.github.io//post/shu-zu-121-mai-mai-gu-piao-de-zui-jia-shi-ji">
        </link>
        <updated>2019-09-15T13:01:40.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>题目如下：<br>
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>
如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。<br>
注意你不能在买入股票前卖出股票。</p>
<p>示例 1:<br>
输入: [7,1,5,3,6,4]<br>
输出: 5<br>
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>
注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。<br>
示例 2:<br>
输入: [7,6,4,3,1]<br>
输出: 0<br>
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这一题还是相对简单很多的，一开始我的想法比较钻牛角尖，总是想着找出最小值再找相应的最大值，然后如果差值不是最大的话再找次小值，还得考虑先后blabla~然后突然发现其实值得大小其实和下标关系不大，完全可以记录一个最大值，然后不断地更新当前最小值和当前值的差，甚至于不管最小值是啥时候出现，反正你要是出现的时候能够推翻当前最大值，那之前出现的次小值也肯定比不上你呀，所以给出了如下题解，一次过！棒棒哒！：</p>
<pre><code>class Solution {
public:
    int maxProfit(vector&lt;int&gt;&amp; prices) {
        int len=prices.size();
        if(len==0||len==1)
            return 0;
        int min=prices[0];
        int max=0;
        for(int i=0;i&lt;len;++i){
            min=prices[i]&lt;min?prices[i]:min;
            max=prices[i]-min&gt;max?prices[i]-min:max;
        }
        return max; 
    }
};
</code></pre>
<p>官方题解如下:</p>
<blockquote>
<p>解决方案<br>
我们需要找出给定数组中两个数字之间的最大差值（即，最大利润）。此外，第二个数字（卖出价格）必须大于第一个数字（买入价格）。<br>
形式上，对于每组 i 和 j（其中 j &gt; i）我们需要找出max(prices[j]−prices[i])。<br>
方法一：暴力法</p>
</blockquote>
<pre><code>Java
public class Solution {
    public int maxProfit(int prices[]) {
        int maxprofit = 0;
        for (int i = 0; i &lt; prices.length - 1; i++) {
            for (int j = i + 1; j &lt; prices.length; j++) {
                int profit = prices[j] - prices[i];
                if (profit &gt; maxprofit)
                    maxprofit = profit;
            }
        }
        return maxprofit;
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n^2)。循环运行n(n−1)/2 次。<br>
空间复杂度：O(1)O(1)。只使用了两个变量 —— maxprofit 和profit。<br>
方法二：一次遍历<br>
算法<br>
假设给定的数组为：<br>
[7, 1, 5, 3, 6, 4]</p>
<p>如果我们在图表上绘制给定数组中的数字，我们将会得到：<br>
使我们感兴趣的点是上图中的峰和谷。我们需要找到最小的谷之后的最大的峰。<br>
我们可以维持两个变量——minprice 和 maxprofit，它们分别对应迄今为止所得到的最小的谷值和最大的利润（卖出价格与最低价格之间的最大差值）。</p>
</blockquote>
<pre><code>Java
public class Solution {
    public int maxProfit(int prices[]) {
        int minprice = Integer.MAX_VALUE;
        int maxprofit = 0;
        for (int i = 0; i &lt; prices.length; i++) {
            if (prices[i] &lt; minprice)
                minprice = prices[i];
            else if (prices[i] - minprice &gt; maxprofit)
                maxprofit = prices[i] - minprice;
        }
        return maxprofit;
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n)，只需要遍历一次。<br>
空间复杂度：O(1)，只使用了两个变量。</p>
</blockquote>
<p>暴力法就没啥好讲的了，我的方法和官方题解二吻合，然后比较有趣的是有个精选题解，从数学的角度分析了题解二的可行性，非常有趣，就是牛顿莱布尼茨公式666，有时间的话复习的时候应该看一下！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组 45. 跳跃游戏 II]]></title>
        <id>https://lixin-ee.github.io//post/45-tiao-yue-you-xi-ii</id>
        <link href="https://lixin-ee.github.io//post/45-tiao-yue-you-xi-ii">
        </link>
        <updated>2019-09-15T12:44:57.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个非负整数数组，你最初位于数组的第一个位置。<br>
数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>
你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>
<p>示例:<br>
输入: [2,3,1,1,4]<br>
输出: 2<br>
解释: 跳到最后一个位置的最小跳跃数是 2。<br>
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。<br>
说明:<br>
假设你总是可以到达数组的最后一个位置。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/jump-game-ii<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>其实本来这道题应该蛮简单的，难点主要在于最小跳跃数这个限制，一开始我总想着从后往前推，但是一直无法把握好跳跃点增加的时机，所以一直是解答出错，加上一直被奇葩的特殊情况干扰，最终确定想法有比较大的缺陷，决定观看官方题解，首先给出最后的错解：</p>
<pre><code>int len = nums.size();
        int jump=0;
        if(len==0||nums[0]==0||len==1)
            return 0;
        for(int i=len-2;i&gt;0;--i){
            while(i&gt;=0&amp;&amp;nums[i]&gt;=len-i-1)
                --i;
            ++jump;
        }
        return jump;
</code></pre>
<p>我觉得我做题比较严重的一个问题就是老是从某些比较简单的解出发，所以总是会被例外的情况所击倒，现在回头看来代码还是很有问题的，更应该去寻找能够达到当前位置的最小值，而不是遇到不可达值就停下来。下面是官方题解：</p>
<blockquote>
<p>解题思路：<br>
从数组的第 0 个位置开始跳，跳的距离小于等于数组上对应的数。求出跳到最后个位置需要的最短步数。比如上图中的第 0 个位置是 2，那么可以跳 1 个距离，或者 2 个距离，我们选择跳 1 个距离，就跳到了第 1 个位置，也就是 3 上。然后我们可以跳 1，2，3 个距离，我们选择跳 3 个距离，就直接到最后了。所以总共需要 2 步。</p>
<p>解法一 ：顺藤摸瓜<br>
LeetCode 讨论里，大部分都是这个思路，贪婪算法，我们每次在可跳范围内选择可以使得跳的更远的位置。<br>
如下图，开始的位置是 2，可跳的范围是橙色的。然后因为 3 可以跳的更远，所以跳到 3 的位置。<br>
如下图，然后现在的位置就是 3 了，能跳的范围是橙色的，然后因为 4 可以跳的更远，所以下次跳到 4 的位置。<br>
写代码的话，我们用 end 表示当前能跳的边界，对于上边第一个图的橙色 1，第二个图中就是橙色的 4，遍历数组的时候，到了边界，我们就重新更新新的边界。</p>
</blockquote>
<pre><code>Java
public int jump(int[] nums) {
    int end = 0;
    int maxPosition = 0; 
    int steps = 0;
    for(int i = 0; i &lt; nums.length - 1; i++){
        //找能跳的最远的
        maxPosition = Math.max(maxPosition, nums[i] + i); 
        if( i == end){ //遇到边界，就更新边界，并且步数加一
            end = maxPosition;
            steps++;
        }
    }
    return steps;
}
</code></pre>
<blockquote>
<p>时间复杂度：O(n)。<br>
空间复杂度：O(1)。<br>
这里要注意一个细节，就是 for 循环中，i &lt; nums.length - 1，少了末尾。因为开始的时候边界是第 0 个位置，steps 已经加 1 了。如下图，如果最后一步刚好跳到了末尾，此时 steps 其实不用加 1 了。如果是 i &lt; nums.length，i 遍历到最后的时候，会进入 if 语句中，steps 会多加 1。</p>
<p>解法二：顺瓜摸藤<br>
我们知道最终要到达最后一个位置，然后我们找前一个位置，遍历数组，找到能到达它的位置，离它最远的就是要找的位置。然后继续找上上个位置，最后到了第 0 个位置就结束了。<br>
至于离它最远的位置，其实我们从左到右遍历数组，第一个满足的位置就是我们要找的。</p>
</blockquote>
<pre><code>Java
public int jump(int[] nums) {
    int position = nums.length - 1; //要找的位置
    int steps = 0;
    while (position != 0) { //是否到了第 0 个位置
        for (int i = 0; i &lt; position; i++) {
            if (nums[i] &gt;= position - i) {
                position = i; //更新要找的位置
                steps++;
                break;
            }
        }
    }
    return steps;
}
</code></pre>
<blockquote>
<p>时间复杂度：O(n²)，因为最坏的情况比如 1 1 1 1 1 ，position 会从 5 更新到 0，并且每次更新都会经历一个 for 循环。<br>
空间复杂度：O(1)。</p>
<p>这种想法看起来更简单了，为什么奏效呢？我们可以这样想。<br>
从左到右跳的话，2 -&gt; 3 -&gt; 4 -&gt; 1。<br>
从右到左的话，我们找能跳到 11 的最左边的位置，我们找的只能是 44 或者是 44 左边的。<br>
找到 4 的话，不用说，刚好完美。<br>
如果是中间范围 3 和 4 之间的第 2 个 1 变成了 3，那么这个位置也可以跳到末尾的 1，按我们的算法我们就找到了这个 3，也就是 4 左边的位置。但其实并不影响我们的 steps，因为这个数字是 3 到 4 中间范围的数，左边界 3 也可以到这个数，所以下次找的话，会找到边界 3，或者边界 3 左边的数。 会不会直接找到上个边界 2 呢？不会的，如果找到了上一个边界 2，那么意味着从 2 直接跳到 3 和 4 之间的那个数，再从这个数跳到末尾就只需 2 步了，但是其实是需要 3 步的。</p>
</blockquote>
<p>官方题解一这个最大范围end非常奇妙，其实和1中的非常相似，用end来作为标志递增steps刚刚好能够得到最小的steps，妙啊！（其实如果我能好好运用上一题<br>
的知识也能得到这个解，一种醍醐灌顶的感觉），题解二就是我一直在挣扎的倒推解题法了，还是那句话，找到最左边的能到达当前点的位置才是正解。最后给出解答：</p>
<pre><code>class Solution {
public:
    int jump(vector&lt;int&gt;&amp; nums) {
       int len = nums.size();
        if(len==0||nums[0]==0||len==1)
            return 0;
        int jump=0;
        int max_reach=0;
        int end=0;
        for(int i=0;i&lt;len-1;++i){
            max_reach= max_reach&gt;nums[i]+i?max_reach:nums[i]+i;
            if(i==end){
                ++jump;
                end=max_reach;
            }
        }
        return jump;
            
    }
};
</code></pre>
<p>最后感想还是得好好整理复习前面的题，这样后面的题才能把知识灵活应用起来！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ primer 第六章 笔记+习题 6.3-6.7]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-liu-zhang-bi-ji-xi-ti-63-67</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-liu-zhang-bi-ji-xi-ti-63-67">
        </link>
        <updated>2019-09-12T11:48:50.000Z</updated>
        <content type="html"><![CDATA[<p>6.3.1无返回值函数<br>
return语句终止当前正在执行的函数并将控制权返回到调用函数的地方<br>
void函数会在最后隐式执行return语句，<br>
void函数可以return另一个返回值为void的函数，不能返回其他类型的表达式<br>
6.3.2有返回值函数<br>
编译器不一定能发现漏掉return语句的错误<br>
返回值用于初始化调用点的一个临时量<br>
最好返回的是对象的引用，否则会返回返回值的拷贝副本<br>
不要返回局部对象的引用或指针<br>
如果返回类型是引用，不能返回局部对象的引用或者局部临时量如“abc”但可以直接返回对象（区分局部对象）而不是必须是引用（因为原则上引用就是一个别名）<br>
调用返回引用的函数得到左值，其他返回类型得到右值<br>
函数可以返回花括号包围的值的类型，比如vector，如果是内置类型则花括号包围的列表最多包含一个值，如果是类类型，由类本身定义。<br>
主函数main可以没有return语句，会在结尾隐式插入return 0；<br>
返回非0值的具体含义由机器决定，所以cstdlib 头文件中定义了两个通用的预处理变量 EXIT_FAILURE和EXIT_SUCCESS，其与机器无关，两者皆为预处理变量既不能加上std::，也不能用using声明<br>
递归 函数自己调用自己<br>
main函数不能调用自己</p>
<p>习题6.30<br>
error C2561: “str_subrange”: 函数必须返回值<br>
习题6.31<br>
返回的引用指向了函数中定义的局部变量或者局部常量<br>
习题6.32<br>
合法，将ia的每个元素赋值为相应的下标值<br>
习题6.33</p>
<pre><code>void print(vector&lt;int&gt; v, int index);

int main() {
	vector&lt;int&gt; ia = { 1,2,3,4,5,6,7,8,9,0 };
	print(ia, 0);
};
void print(vector&lt;int&gt; v,int index){
	if (index &lt; v.size())
		cout &lt;&lt; v[index] &lt;&lt; endl,print(v,++index);
}
</code></pre>
<p>习题6.34<br>
如果输入一个负数，将陷入死循环直至内存崩溃。<br>
习题6.35<br>
val--是对val递减后传入val原本值的副本，会造成无限循环</p>
<p>6.3.3 返回数组指针<br>
无法返回数组，但可以返回指向大小确定的数组的引用或指针<br>
返回数组指针的函数声明为 type （*函数名（形参列表））[数组维度]<br>
所以建议使用类型别名，decltype 或尾置返回类型<br>
<code>int array[10]; decltype(array) *func(int); auto func(int) -&gt;int(*)[10]；</code></p>
<p>习题6.36<br>
<code>string(&amp;func())[10]</code><br>
习题6.37</p>
<pre><code>typedef string re[10]; using re=string[10];re &amp;func();
decltype(string [10]) &amp;func();
auto func()-&gt;string(&amp;)[10]
</code></pre>
<p>声明时尾置返回最好，定义时类型别名和decltype最好，这样可读性高<br>
知识点：注意尾置返回中指针和引用必须加括号string(&amp;)[10] string(*)[10]<br>
习题6.38<br>
其实就是把*号换成&amp;号 函数体内的&amp;去除</p>
<p>6.4函数重载<br>
函数重载 名字相同形参列表不同（<strong>返回类型可以不同，但不能只有返回类型的不同</strong>）<br>
main函数不能重载<br>
不允许两个函数除了返回类型外其他要素都相同，如果其他要素都相同只有返回类型不同则后一个函数声明是错误的<br>
<strong>形参有无名字不影响判断，形参的名字不同类型相同的话，仍视为同一函数</strong><br>
如果仅仅是函数名不同，则视为类型别名，也视为与原名相同<br>
<strong>形参无视顶层const</strong> 所以有顶层const形参和没有顶层const的形参是<strong>等价的</strong><br>
所以func(int *param) 和func(int * const param) 是相同的，注意const的位置<br>
func(const int * param) 则是新函数<br>
指向常量的指针只能传递给底层const形参，<strong>不能传给普通指针形参</strong><br>
使用const_cast在重载中对变量进行强制转换，去除底层const</p>
<p>习题6.39<br>
（a）形参是顶层const 然而形参会无视const，所以等于重复声明<br>
（b）返回值改为double 但是仅仅有返回类型不同，所以等于重复声明<br>
（c）形参类型和返回类型改变了，是合法的</p>
<p>6.4.1重载与作用域<br>
在内层作用域中无法进行重载，只会隐藏外层作用域中声明的同名实体<br>
c++中 名字查找发生在类型检查之前，一旦在当前作用域找到了所需的名字，编译器就会忽略掉外层作用域的同名实体，再进行类型检测确认函数调用是否有效</p>
<p>6.5.1默认实参<br>
默认实参 就是缺省值<br>
通常应该在函数声明中指定默认实参，并将该声明放在合适的头文件中,例如：<br>
<code>void func(int param1=1,int param2=10,char param3 = 'p');</code><br>
注意一旦某个形参被赋予默认值，<strong>后面的所有形参都必须有默认值</strong><br>
如果想覆盖右侧的默认值，必须也覆盖前面的默认值<br>
在给定的作用域中一个形参<strong>只能被赋予一次</strong>默认实参，函数的后续声明只能为之前那些没有默认值的形参添加默认实参<br>
默认实参的<strong>初始化</strong>可以是表达式，不能是局部变量，变量的声明必须出现在函数之外<br>
用作默认实参的名字在函数声明的作用域内解析，<strong>可以通过实参名改变默认实参值，但是新定义的同名变量无法隐藏外层的默认实参变量</strong>，例如在另外一个函数中用于默认实参值的变量值a变化了，同时会改变默认实参的a，但是如果在内层作用域定义一个新的a，并不会影响外层声明中的a<br>
<strong>经常使用默认实参的变量放在后面，不常使用的放在前面</strong></p>
<p>习题6.40<br>
b是错误的，默认实参应该在后面，否则只要有实参就不能使用默认实参<br>
习题6.41<br>
a错误，至少需要一个参数，c合法但初衷不符，wd会被赋予'*'的ASCII码，不能越过某个默认实参改变后面的默认实参。<br>
习题6.42</p>
<pre><code>string make_plural(size_t ctr, const string &amp;word, const string &amp;ending = &quot;s&quot;);

int main() {
	cout &lt;&lt; &quot;两单词的单数形式：&quot; &lt;&lt; make_plural(1, &quot;success&quot;, &quot;es&quot;) &lt;&lt; &quot;  &quot; &lt;&lt; make_plural(1, &quot;failure&quot;) &lt;&lt; endl;
	cout &lt;&lt; &quot;两单词的复数形式：&quot; &lt;&lt; make_plural(2, &quot;success&quot;, &quot;es&quot;) &lt;&lt; &quot;  &quot; &lt;&lt; make_plural(2, &quot;failure&quot;) &lt;&lt; endl;
};

string make_plural(size_t ctr, const string &amp;word, const string &amp;ending) {
	return (ctr &gt; 1) ? word + ending : word;
}
</code></pre>
<p>知识点：默认实参定义在函数的声明，不需要定义在函数的定义！！！</p>
<p>6.5.2内联函数和constexpr函数<br>
内联函数 在调用点上召开为一段程序 避免函数调用的开销<br>
内联函数关键字inline 适用于规模小频繁调用的函数<br>
Constexpr函数<strong>返回类型和形参类型都是字面值类型</strong>（引用 指针 算术类型）（自定义类、IO库、string类等就不是字面值类型），函数体内有且只有一条return语句，被隐式地指定为内联函数<br>
比如 constexpr int func() { return 42; }<br>
Constexpr函数<strong>允许返回值并非一个常量</strong>，所以不一定返回常量表达式(传入常量表达式，返回常量表达式，反之则返回非常量表达式)<br>
与其他函数不同，内联函数和Constexpr函数 <strong>可以多次定义，但需要保持一致</strong>，所以通常定义在头文件中</p>
<p>习题6.43<br>
（a）声明和定义都在头文件<br>
（b）声明在头文件，定义在源文件<br>
知识点：因为内联函数可以定义多次，万一以后错手定义会很麻烦，为了保证一致最好定义在头文件，普通函数则只能定义一次，所以只需要放在源文件。<br>
习题6.44<br>
直接在返回类型前面加上inline就vans了<br>
习题6.45<br>
简短而且常用的函数可以定义为内联函数<br>
习题6.46<br>
不可以，string不是字面值类型</p>
<p>6.5.3调试帮助<br>
arrest 预处理宏 一个预处理变量，arrest宏定义在carrest头文件中<br>
arrest（expr），判断为假则输出信息终止程序，输出为真则什么都不做，用于检查不能发生的条件，例如<br>
assert(word.size() &gt; threshold)；<br>
宏名字在程序内必须唯一，所以不能定义与宏名字相同的变量、函数等<br>
NDEBUG决定了 arrest是否执行检查，是否开启调试状态，如果定义了就等于关闭，未定义就等于开启。<br>
详细例子可看笔记</p>
<p>习题6.47</p>
<pre><code>void print(vector&lt;int&gt; v, int index);

int main() {
	vector&lt;int&gt; ia = { 1,2,3,4,5,6,7,8,9,0 };
	print(ia, 0);
};
void print(vector&lt;int&gt; v, int index) {
	if (index &lt; v.size()) {
#ifndef NDEBUG
		cout &lt;&lt; v.size() &lt;&lt; endl;
#endif // !NDEBUG
		cout &lt;&lt; v[index] &lt;&lt; endl, print(v, ++index);
	}	
}
</code></pre>
<p>习题6.48<br>
不合理，while已经对cin进行判断了，并且只要cin有输入就为真，并非不能发生的条件</p>
<p>6.6 函数匹配<br>
第一步 候选函数（一与被调用函数同名，二其声明在调用点可见）<br>
第二步 考察本次调用提供的实参，选出能被实参调用的可行函数（一是形参与本次调用提供的实参数量相等，二是实参类型与对应的形参类型相同，或者能转换成形参的类型）<br>
第三步 最佳匹配<br>
实参类型和形参类型越接近匹配得越好<br>
该函数每个实参的匹配都不劣于其他可行函数需要的匹配<br>
至少有一个实参的匹配优于其他可行函数提供的匹配</p>
<p>习题6.49<br>
候选函数：本次调用对应的重载函数集 1.与被调用函数同名 2.其声明在调用点可见。<br>
可行函数，从候选函数中选出的能被实参调用的函数 1.实参形参数量匹配 2.类型匹配或可转换<br>
习题6.50<br>
（a）二义性了，可以选择转化为double或者int<br>
（b）f（int）<br>
（c）f（int，int）<br>
（d）f（double，double）<br>
习题6.51</p>
<pre><code>void f();
void f(int);
void f(int, int);
void f(double, double = 3.14);
int main() {
	//f(2.56, 42);//有多个重载函数示例与实参列表匹配
	f(42);
	f(42, 0);
	f(2.56, 3.14);
};
void f(){
	cout &lt;&lt; &quot;f()&quot; &lt;&lt; endl;
}
void f(int){
	cout &lt;&lt; &quot;f(int)&quot; &lt;&lt; endl;
}
void f(int, int){
	cout &lt;&lt; &quot;f(int, int)&quot; &lt;&lt; endl;
}
void f(double, double ){
	cout &lt;&lt; &quot;f(double,double = 3.14)&quot; &lt;&lt; endl;
}
</code></pre>
<p>6.6.1实参类型转换<br>
const转换:可以将指向类型T的指针或引用转换成指向const T的指针或引用，例如 int i; const int &amp;j=i;<br>
类型提升：也就是short、char等提升为int等<br>
算术类型转换：运算过程中 小对象的类型转化为另外一个大的对象的类型<br>
指针转换：0和nullptr能够转换成任意指针类型，指向任意非常量的指针可以转换成void*，指向任意常量的指针可以转换成const void*，派生继承关系中的派生类和基类的指针转换<br>
小整型short一般会提升到int类型，使用short类型的函数反而会导致类型转换<br>
所有算数类型转换的级别一样</p>
<p>习题6.52<br>
（a）3.类型提升匹配 （b）4.算术类型转换<br>
习题6.53<br>
（a）重载<br>
（b）重载<br>
（c）忽略顶层const，和第一句其实一样，不合法</p>
<p>6.7函数指针<br>
声明一个指向函数的指针，<strong>只需要用指针替换函数名即可（不要漏掉括号）</strong><br>
<code>void (*pointer)(int ,int);</code><br>
使用函数名时<strong>会自动转换成指针</strong><br>
可以直接使用指向函数的指针调用，<strong>无须提前解引用指针</strong><br>
函数指针可以赋<strong>nullptr或者值为0的常量表达式</strong><br>
函数指针之间不存在转换规则<br>
指针类型<strong>必须</strong>与重载函数中的某一个精确匹配<br>
形参<strong>不能是函数类型</strong>，但<strong>可以是指向函数的指针</strong>，此时形参看起来是函数类型，实际上是被当作指针来使用<br>
函数作为实参时会自动转换成指针<br>
Decltype 返回<strong>函数类型</strong>，而不是自动转换成指针类型<br>
返回指向函数的指针<code>int (*f1(int))(int*,int); 或者 using PF = int(*)(int*,int);PF</code> f1(int)或者用尾置返回 <code>auto f1(int)-&gt;int(*)(int*,int)</code><br>
明确知道返回函数时用decltype<br>
<code>decltype(func1) *func2();</code>//注意，func1为函数名</p>
<p>习题6.54</p>
<pre><code>int func(int, int);
int main() {
	vector&lt;int (*)(int,int)&gt; v;
};
int func(int, int) {
	return 1;
}
</code></pre>
<p>知识点：函数类型与函数名无任何关系，int func(int, int)的函数指针类型是int (*)(int,int)，换个名字也一样<br>
习题6.55</p>
<pre><code>int func(int, int);
int add(int a, int b);
int minuss(int a, int b);
int multi(int a, int b);
int divide(int a, int b);
int main() {
	vector&lt;int(*)(int, int)&gt; v{add,minuss,multi,divide};
};
int func(int, int) {
	return 1;
}
int add(int a, int b) {
	return a+b;
}
int minuss(int a, int b) {
	return a - b;
}
int multi(int a, int b) {
	return a * b;
}
int divide(int a, int b) {
	return a / b;
}
</code></pre>
<p>知识点：貌似minus不能用<br>
习题6.56</p>
<pre><code>int func(int, int);
int add(int a, int b);
int minuss(int a, int b);
int multi(int a, int b);
int divide(int a, int b);
int main() {
	vector&lt;int(*)(int, int)&gt; v{add,minuss,multi,divide};
	cout &lt;&lt; v[0](10, 2) &lt;&lt; endl;
	cout &lt;&lt; v[1](10, 2) &lt;&lt; endl;
	cout &lt;&lt; v[2](10, 2) &lt;&lt; endl;
	cout &lt;&lt; v[3](10, 2) &lt;&lt; endl;
};
int func(int, int) {
	return 1;
}
int add(int a, int b) {
	return a+b;
}
int minuss(int a, int b) {
	return a - b;
}
int multi(int a, int b) {
	return a * b;
}
int divide(int a, int b) {
	return a / b;
}
</code></pre>
<p>知识点:可以直接调用函数的指针 pointer（int，int）</p>
<p>习题感悟<br>
注意尾置返回中 指针和引用必须加括号string(&amp;)[10] string(*)[10]<br>
默认实参定义只能在函数的声明，不需要定义在函数的定义！！！<br>
因为内联函数可以定义多次，万一以后错手定义会很麻烦，为了保证一致最好定义在头文件，普通函数则只能定义一次，所以只需要放在源文件。<br>
返回类型和形参中包含字面值类型的函数不可以定义为constexpr<br>
实参类型转换是有等级差异的<br>
函数类型与函数名无任何关系，int func(int, int)的函数指针类型是int (*)(int,int)，换个名字也一样<br>
貌似minus不能用<br>
可以直接调用函数的指针 pointer（int，int）</p>
]]></content>
    </entry>
</feed>