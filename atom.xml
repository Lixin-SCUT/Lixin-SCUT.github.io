<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lixin-ee.github.io/</id>
    <title>Lixin-ee</title>
    <updated>2019-10-09T03:37:09.410Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lixin-ee.github.io/"/>
    <link rel="self" href="https://lixin-ee.github.io//atom.xml"/>
    <subtitle>好景在望。</subtitle>
    <logo>https://lixin-ee.github.io//images/avatar.png</logo>
    <icon>https://lixin-ee.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Lixin-ee</rights>
    <entry>
        <title type="html"><![CDATA[字符串 38 报数]]></title>
        <id>https://lixin-ee.github.io//post/zi-fu-chuan-38-bao-shu</id>
        <link href="https://lixin-ee.github.io//post/zi-fu-chuan-38-bao-shu">
        </link>
        <updated>2019-10-09T03:01:52.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：</p>
<pre><code>1.     1
2.     11
3.     21
4.     1211
5.     111221
</code></pre>
<p>1 被读作  &quot;one 1&quot;  (&quot;一个一&quot;) , 即 11。<br>
11 被读作 &quot;two 1s&quot; (&quot;两个一&quot;）, 即 21。<br>
21 被读作 &quot;one 2&quot;,  &quot;one 1&quot; （&quot;一个二&quot; ,  &quot;一个一&quot;) , 即 1211。</p>
<p>给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。</p>
<p>注意：整数顺序将表示为一个字符串。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/count-and-say<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>题目也是比较抽象，但是细看的话其实就是“对于上一个字符串，将其重复的数字变为 数量+数字，比如111变成 3+1，单独一个数字的话就只有 1+数字了<br>
一开始我在想会不会是像金字塔那种形状有规律的，但是想想昨天的教训，还是不去钻牛角尖了，直接上最简单的循环法吧！<br>
那么主要的思路就在于正整数n为外循环，内循环则是字符串的长度。然后就是考虑如何检测重复的数字（本质是字符）<br>
（1）一开始我想到的是当前字符和下一字符比较，相等的话num+1，否则就写入字符串递增。<br>
但是这里有个问题是 必须经常检测下一字符是不是尾后位置了，同时有需要维护num。造成很臃肿的判断结构<br>
（2）第二个就是我耍智障了，想用find寻找到最近的重复函数，想法是好的，但是必须重新定义find的比较方式<br>
（3）最后的结果就是使用一个num，如果检测到相同的数字就num++，直到不相同的数字就写入字符串temp，然后直接讲循环量+num跳过相同的数字，虽然也需要检测+num到达尾后迭代位置与否，但是判断结构明显没那么臃肿了。</p>
<pre><code>class Solution {
public:
    string countAndSay(int n) {
	string cur = &quot;1&quot;;
	for (int j = 1; j&lt; n; ++j) {
		string temp;
		for (int i = 0; i &lt; cur.size(); ) {
			int num = 1;
			while(i+num&lt; cur.size()&amp;&amp;cur[i + num] == cur[i])
				++num;
			temp += to_string(num) + cur[i];
			i += num;

		}
		cur = temp;
	}
        return cur;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 6. Z 字形变换]]></title>
        <id>https://lixin-ee.github.io//post/6-z-zi-xing-bian-huan</id>
        <link href="https://lixin-ee.github.io//post/6-z-zi-xing-bian-huan">
        </link>
        <updated>2019-10-08T09:18:24.000Z</updated>
        <content type="html"><![CDATA[<p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>
<blockquote>
<p>比如输入字符串为 &quot;LEETCODEISHIRING&quot; 行数为 3 时，排列如下：<br>
L   C   I   R<br>
E T O E S I I G<br>
E   D   H   N<br>
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&quot;LCIRETOESIIGEDHN&quot;。<br>
请你实现这个将字符串进行指定行数变换的函数：<br>
string convert(string s, int numRows);<br>
示例 1:<br>
输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 3<br>
输出: &quot;LCIRETOESIIGEDHN&quot;<br>
示例 2:<br>
输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 4<br>
输出: &quot;LDREOEIIECIHNTSG&quot;<br>
解释:<br>
L     D     R<br>
E   O E   I I<br>
E C   I H   N<br>
T     S     G<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/zigzag-conversion<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题一开始还是被我吐槽了hhh，因为很奇葩，不像汉语的描述风格，同时好像“实用性”不大啊，但是就像谢扬同学所说，还是蛮有趣的。<br>
我一开始的想法是找它们的下标的对应关系，但是写着写着自己都晕了，因为这两天要做报告，没有太多时间给我思考了，所以还是直接看题解吧！<br>
首先是网友们的暴力解法，设立一个二维数组在相应的位置存储相应的元素，这个应该是最简单的了吧，只是空间复杂度比较高。<br>
然后是官方题解。</p>
<blockquote>
<p>方法一：按行排序<br>
思路<br>
通过从左向右迭代字符串，我们可以轻松地确定字符位于 Z 字形图案中的哪一行。</p>
<p>算法<br>
我们可以使用min(numRows,len(s)) 个列表来表示 Z 字形图案中的非空行。<br>
从左到右迭代 s，将每个字符添加到合适的行。可以使用当前行和当前方向这两个变量对合适的行进行跟踪。<br>
只有当我们向上移动到最上面的行或向下移动到最下面的行时，当前方向才会发生改变。</p>
</blockquote>
<pre><code>class Solution {
public:
    string convert(string s, int numRows) {
        int len=s.size();
        if(numRows==1||numRows==0)
            return s;
        bool godown=false;
        int r_size=len&lt;numRows?len:numRows;
        vector&lt;string&gt; rows(r_size);
        int r=0;
        for(auto c:s){
            rows[r]+=c;
            if(r==0||r==r_size-1) godown=!godown;
            if(godown)
                ++r;
            else
                --r;
        }
        string s_res;
        for(auto c:rows)
            s_res+=c;
        return s_res;
        
    }
};
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n)，其中n==len(s)<br>
空间复杂度：O(n)</p>
<p>方法二：按行访问<br>
思路<br>
按照与逐行读取 Z 字形图案相同的顺序访问字符串。</p>
<p>算法<br>
首先访问 行 0 中的所有字符，接着访问 行 1，然后 行 2，依此类推...<br>
对于所有整数 k，<br>
行 0 中的字符位于索引k(2⋅numRows−2) 处;<br>
行 numRows−1 中的字符位于索引 k(2⋅numRows−2)+numRows−1 处;<br>
内部的 行 i 中的字符位于索引k(2⋅numRows−2)+i 以及(k+1)(2⋅numRows−2)−i 处;</p>
</blockquote>
<pre><code>class Solution {
public:
    string convert(string s, int numRows) {

        if (numRows == 1) return s;

        string ret;
        int n = s.size();
        int cycleLen = 2 * numRows - 2;

        for (int i = 0; i &lt; numRows; i++) {
            for (int j = 0; j + i &lt; n; j += cycleLen) {
                ret += s[j + i];
                if (i != 0 &amp;&amp; i != numRows - 1 &amp;&amp; j + cycleLen - i &lt; n)
                    ret += s[j + cycleLen - i];
            }
        }
        return ret;
    }
};
</code></pre>
<p>复杂度分析</p>
<p>时间复杂度：O(n)，其中 n==len(s)。每个索引被访问一次。<br>
空间复杂度：O(n)。对于 C++ 实现，如果返回字符串不被视为额外空间，则复杂度为 O(1)。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 179. 最大数]]></title>
        <id>https://lixin-ee.github.io//post/zi-fu-chuan-179-zui-da-shu</id>
        <link href="https://lixin-ee.github.io//post/zi-fu-chuan-179-zui-da-shu">
        </link>
        <updated>2019-10-07T10:40:18.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。</p>
<p>示例 1:<br>
输入: [10,2]<br>
输出: 210<br>
示例 2:<br>
输入: [3,30,34,5,9]<br>
输出: 9534330</p>
<p>说明: 输出结果可能非常大，所以你需要返回一个字符串而不是整数。<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/largest-number<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题刚好是在面经里面见过的题目<br>
一开始没什么想法，因为如果是int元素的话，其排序是按位数的排序的。<br>
然后分析了一下最大数的组成，首先对于个位数，不用想了肯定是单个9是最好的数，无脑放在前面就行了。然后对于多位数，重点就是其第一位的值，其次从左到右看它的值而确定它的结果中的位置。<br>
然后受到题目说明的影响，诶！字符串不就是按从左到右的位数来排序的吗？！比如30和9相比，9是比30大的！<br>
然而开心了不到一分钟就凉了，因为字符串的排序也是有缺陷的，在位数不相等的情况下，默认位数多的比较大，比如902和99，会认为902比99大，但是99902明显比90299大嘛，所以还需要攻克这最后一个问题<br>
然后白天没啥思路就先回学校了，傍晚打开题目时突然想到一个stl源码剖析中反复提到的点：泛型算法的条件是可以自己设定的！然后我就想到在排序比较时，将位数不同的字符串的位数补齐，然后再进行比较<br>
然后在中途遇到了一些问题，直接在sort后面插入自定义比较函数的时候发生了错误，后来查阅后发现是因为leetcode默认把解答放在类里面，类里面的成员函数在类成员构造出来之前是无法直接调用的，所以必须声明称static函数在编译阶段就初始化，我会在后面单独写一篇博文进行简介<br>
然后在寻找解决方法的过程中发现了更加绝妙的比较方法</p>
<pre><code>  string ab = s1 + s2;
        string ba = s2 + s1;
        return ab &gt; ba; 
</code></pre>
<p>哈哈妙啊，刚好不就是题目的核心思路嘛<br>
于是最后代码如下</p>
<pre><code>class Solution {
public:
    string largestNumber(vector&lt;int&gt;&amp; nums) {
        vector&lt;string&gt; str_nums;
        for(auto i:nums)
            str_nums.push_back(to_string(i));
        sort(str_nums.begin(),str_nums.end(),compare_str);
        string s;
        if(str_nums[0]==&quot;0&quot;)
            return &quot;0&quot;;
        for(auto str:str_nums)
            s+=str;
        return s;
        
    }
    
    static bool compare_str(const string &amp;s1,const string &amp;s2){
        string ab = s1 + s2;
        string ba = s2 + s1;
        return ab &gt; ba;  
    }
};
</code></pre>
<p>最后官方题解和我的思路一致，本来以为没法解决这个棘手的问题了，结果还蛮顺利的嘛！（不要停下来啊！hhhh）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 87. 扰乱字符串]]></title>
        <id>https://lixin-ee.github.io//post/zi-fu-chuan-87-rao-luan-zi-fu-chuan</id>
        <link href="https://lixin-ee.github.io//post/zi-fu-chuan-87-rao-luan-zi-fu-chuan">
        </link>
        <updated>2019-10-06T08:40:27.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个字符串 s1，我们可以把它递归地分割成两个非空子字符串，从而将其表示为二叉树。</p>
<p>下图是字符串 s1 = &quot;great&quot; 的一种可能的表示形式。<br>
great<br>
/    <br>
gr    eat<br>
/ \    /  <br>
g   r  e   at<br>
/ <br>
a   t<br>
在扰乱这个字符串的过程中，我们可以挑选任何一个非叶节点，然后交换它的两个子节点。</p>
<p>例如，如果我们挑选非叶节点 &quot;gr&quot; ，交换它的两个子节点，将会产生扰乱字符串 &quot;rgeat&quot; 。</p>
<pre><code>rgeat
</code></pre>
<p>/    <br>
rg    eat<br>
/ \    /  <br>
r   g  e   at<br>
/ <br>
a   t<br>
我们将 &quot;rgeat” 称作 &quot;great&quot; 的一个扰乱字符串。</p>
<p>同样地，如果我们继续交换节点 &quot;eat&quot; 和 &quot;at&quot; 的子节点，将会产生另一个新的扰乱字符串 &quot;rgtae&quot; 。</p>
<pre><code>rgtae
</code></pre>
<p>/    <br>
rg    tae<br>
/ \    /  <br>
r   g  ta  e<br>
/ <br>
t   a<br>
我们将 &quot;rgtae” 称作 &quot;great&quot; 的一个扰乱字符串。</p>
<p>给出两个长度相等的字符串 s1 和 s2，判断 s2 是否是 s1 的扰乱字符串。</p>
<p>示例 1:</p>
<p>输入: s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;<br>
输出: true<br>
示例 2:</p>
<p>输入: s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;<br>
输出: false</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/scramble-string<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题还是没读懂。。。直接看的网友题解<br>
看了题解后比较明白了，就是对字符串不断地进行二等分，同时二等分的区域可以交换，这样的话其实可以进行递归操作，对两个字符串的所有可能的分割点进行遍历并进行排序再比较（当然首先进行相等比较），这里的比较我直接用了泛型算法sort，STL源码剖析中提及sort的核心其实也是快速排序（但当规模较小的时候会使用插入排序或者堆排序）。<br>
代码如下：主要需要注意的点在于需要进行两次递归调用（相当于对字符串分割出来的两部分进行调换）</p>
<pre><code>class Solution {
public:
    bool isScramble(string s1, string s2) {
        if(s1==s2)
            return true;
        string ss1(s1);
        string ss2(s2);
        sort(ss1.begin(),ss1.end());
        sort(ss2.begin(),ss2.end());
        if(ss1!=ss2)
            return false;
        for(int i=1;i&lt;s1.size();++i){
            if(isScramble(s1.substr(0,i),s2.substr(0,i))&amp;&amp;isScramble(s1.substr(i,s1.size()-i),s2.substr(i,s2.size()-i)))
                return true;
            if(isScramble(s1.substr(0,i),s2.substr(s2.size()-i,i))&amp;&amp;isScramble(s1.substr(i,s1.size()-i),s2.substr(0,s2.size()-i)))
                return true;
        
        }  
        return false;
    }
};
</code></pre>
<p>下面是网友题解：</p>
<blockquote>
<p>把一个字符串按照树的形状，分成两部分，分成两部分...直到达到叶子节点。并且可以多次交换非叶子节点的两个子树，最后从左到右读取叶子节点，记为生成的字符串。题目是给两个字符串 S1 和 S2，然后问 S2 是否是 S1 经过上述方式生成的。</p>
<p>解法一 递归<br>
开始的时候，由于给出的图示很巧都是平均分的，我以为只能平均分字符串，看了这里，明白其实可以任意位置把字符串分成两部分，这里需要注意一下。</p>
<p>这道题很容易想到用递归的思想去解，假如两个字符串 great 和 rgeat。考虑其中的一种切割方式。</p>
<p>第 1 种情况：S1 切割为两部分，然后进行若干步切割交换，最后判断两个子树分别是否能变成 S2 的两部分。<br>
第 2 种情况：S1 切割并且交换为两部分，然后进行若干步切割交换，最后判断两个子树是否能变成 S2 的两部分。<br>
上边是一种切割方式，我们只需要遍历所有的切割点即可。</p>
</blockquote>
<pre><code>public boolean isScramble(String s1, String s2) {
    if (s1.length() != s2.length()) {
        return false;
    }
    if (s1.equals(s2)) {
        return true;
    }

    //判断两个字符串每个字母出现的次数是否一致
    int[] letters = new int[26];
    for (int i = 0; i &lt; s1.length(); i++) {
        letters[s1.charAt(i) - 'a']++;
        letters[s2.charAt(i) - 'a']--;
    }
    //如果两个字符串的字母出现不一致直接返回 false
    for (int i = 0; i &lt; 26; i++) {
        if (letters[i] != 0) {
            return false;
        }
    }
    
    //遍历每个切割位置
    for (int i = 1; i &lt; s1.length(); i++) {
        //对应情况 1 ，判断 S1 的子树能否变为 S2 相应部分
        if (isScramble(s1.substring(0, i), s2.substring(0, i)) &amp;&amp; isScramble(s1.substring(i), s2.substring(i))) {
            return true;
        }
        //对应情况 2 ，S1 两个子树先进行了交换，然后判断 S1 的子树能否变为 S2 相应部分
        if (isScramble(s1.substring(i), s2.substring(0, s2.length() - i)) &amp;&amp;
           isScramble(s1.substring(0, i), s2.substring(s2.length() - i)) ) {
            return true;
        }
    }
    return false;
}
</code></pre>
<blockquote>
<p>时间复杂度：<br>
空间复杂度：</p>
<p>当然，我们可以用 memoization 技术，把递归过程中的结果存储起来，如果第二次递归过来，直接返回结果即可，无需重复递归。</p>
</blockquote>
<pre><code>public boolean isScramble(String s1, String s2) {
    HashMap&lt;String, Integer&gt; memoization = new HashMap&lt;&gt;();
    return isScrambleRecursion(s1, s2, memoization);
}

public boolean isScrambleRecursion(String s1, String s2, HashMap&lt;String, Integer&gt; memoization) {
    	//判断之前是否已经有了结果
		int ret = memoization.getOrDefault(s1 + &quot;#&quot; + s2, -1);
		if (ret == 1) {
			return true;
		} else if (ret == 0) {
			return false;
		}
		if (s1.length() != s2.length()) {
			memoization.put(s1 + &quot;#&quot; + s2, 0);
			return false;
		}
		if (s1.equals(s2)) {
			memoization.put(s1 + &quot;#&quot; + s2, 1);
			return true;
		}

		int[] letters = new int[26];
		for (int i = 0; i &lt; s1.length(); i++) {
			letters[s1.charAt(i) - 'a']++;
			letters[s2.charAt(i) - 'a']--;
		}
		for (int i = 0; i &lt; 26; i++)
			if (letters[i] != 0) {
				memoization.put(s1 + &quot;#&quot; + s2, 0);
				return false; 
			}

		for (int i = 1; i &lt; s1.length(); i++) {
			if (isScramble(s1.substring(0, i), s2.substring(0, i)) &amp;&amp; isScramble(s1.substring(i), s2.substring(i))) {
				memoization.put(s1 + &quot;#&quot; + s2, 1);
				return true;
			}
			if (isScramble(s1.substring(0, i), s2.substring(s2.length() - i))
					&amp;&amp; isScramble(s1.substring(i), s2.substring(0, s2.length() - i))) {
				memoization.put(s1 + &quot;#&quot; + s2, 1);
				return true;
			}
		}
		memoization.put(s1 + &quot;#&quot; + s2, 0);
		return false;
	}
</code></pre>
<blockquote>
<p>解法二 动态规划<br>
既然是递归，压栈压栈压栈，出栈出栈出栈，我们可以利用动态规划的思想，省略压栈的过程，直接从底部往上走。</p>
<p>我们用 dp [ len ][ i ] [ j ] 来表示 s1[ i, i + len ) 和 s2 [ j, j + len ) 两个字符串是否满足条件。换句话说，就是 s1 从 i 开始的 len 个字符是否能转换为 S2 从 j 开始的 len 个字符。那么解法一的两种情况，递归式可以写作。</p>
<p>第 1 种情况，参考下图： 假设左半部分长度是 q，dp [ len ][ i ] [ j ] = dp [ q ][ i ] [ j ] &amp;&amp; dp [ len - q ][ i + q ] [ j + q ] 。也就是 S1 的左半部分和 S2 的左半部分以及 S1 的右半部分和 S2 的右半部分。<br>
第 2 种情况，参考下图： 假设左半部分长度是 q，那么 dp [ len ][ i ] [ j ] = dp [ q ][ i ] [ j + len - q ] &amp;&amp; dp [ len - q ][ i + q ] [ j ] 。也就是 S1 的右半部分和 S2 的左半部分以及 S1 的左半部分和 S2 的右半部分。</p>
</blockquote>
<pre><code>public boolean isScramble4(String s1, String s2) {
    if (s1.length() != s2.length()) {
        return false;
    }
    if (s1.equals(s2)) {
        return true;
    }

    int[] letters = new int[26];
    for (int i = 0; i &lt; s1.length(); i++) {
        letters[s1.charAt(i) - 'a']++;
        letters[s2.charAt(i) - 'a']--;
    }
    for (int i = 0; i &lt; 26; i++) {
        if (letters[i] != 0) {
            return false;
        }
    }

    int length = s1.length();
    boolean[][][] dp = new boolean[length + 1][length][length];
	//遍历所有的字符串长度
    for (int len = 1; len &lt;= length; len++) {
        //S1 开始的地方
        for (int i = 0; i + len &lt;= length; i++) {
            //S2 开始的地方
            for (int j = 0; j + len &lt;= length; j++) {
                //长度是 1 无需切割
                if (len == 1) {
                    dp[len][i][j] = s1.charAt(i) == s2.charAt(j);
                } else {
                    //遍历切割后的左半部分长度
                    for (int q = 1; q &lt; len; q++) {
                        dp[len][i][j] = dp[q][i][j] &amp;&amp; dp[len - q][i + q][j + q]
                            || dp[q][i][j + len - q] &amp;&amp; dp[len - q][i + q][j];
                        //如果当前是 true 就 break，防止被覆盖为 false
                        if (dp[len][i][j]) {
                            break;
                        }
                    }
                }
            }
        }
    }
    return dp[length][0][0];
}
</code></pre>
<blockquote>
<p>时间复杂度：O(n^4)<br>
空间复杂度：O(n^3)</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 49. 字母异位词分组]]></title>
        <id>https://lixin-ee.github.io//post/zi-fu-chuan-49-zi-mu-yi-wei-ci-fen-zu</id>
        <link href="https://lixin-ee.github.io//post/zi-fu-chuan-49-zi-mu-yi-wei-ci-fen-zu">
        </link>
        <updated>2019-10-05T04:42:01.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。<br>
示例:<br>
输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],<br>
输出:<br>
[<br>
[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],<br>
[&quot;nat&quot;,&quot;tan&quot;],<br>
[&quot;bat&quot;]<br>
]<br>
说明：<br>
所有输入均为小写字母。<br>
不考虑答案输出的顺序</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/group-anagrams<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题相当于上一道题的进阶版<br>
上一题有两种方案可以选择，一种是排序，一种是map或26字母数组<br>
这一题则需要结合排序和map，因为需要同时记录某种异位词在新数组中的位置<br>
整体算法的处理过程就是<br>
1.读入单词，将单词进行排序<br>
2.判断排序结果是否存在于map中，如果不存在的话，就将其排序结果和位置插入map中，并且！<strong>创建临时对象</strong>插入结果序列中<code>vvs.push_back(vector&lt;string&gt;({strs[i]}));</code>（因为结果序列一开始为空，是无法使用位置进行下标插入的）<br>
3.循环上述直至结束<br>
代码如下：</p>
<pre><code>class Solution {
public:
    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) {
        vector&lt;vector&lt;string&gt;&gt; vvs;
        map&lt;string,int&gt; nums;
        int num=0;
        for(int i=0;i&lt;strs.size();++i){
            string s=strs[i];
            Qsort(0,s.size()-1,s);
            if(nums.count(s))
                vvs[nums[s]].push_back(strs[i]);
            else{
                nums.insert(make_pair(s,num));
                vvs.push_back(vector&lt;string&gt;({strs[i]}));
                ++num;
            }        
        }
        return vvs;
    }
    
        void Qsort(int beg,int end,string &amp;s){
        if(beg&lt;end){
         int middle=partition(beg,end,s);
         Qsort(beg,middle-1,s);
         Qsort(middle+1,end,s);
        }
    }
    
    int partition(int beg,int end,string &amp;s){
        int flag=s[beg];
        while(beg&lt;end){
            while(beg&lt;end&amp;&amp;s[end]&gt;=flag)
                --end;
            swap(s[beg],s[end]);
            while(beg&lt;end&amp;&amp;s[beg]&lt;=flag)
                ++beg;
            swap(s[beg],s[end]);
        }
        return beg;
    }
};
</code></pre>
<p>主要需要注意的点在于<br>
1.快速排序一般是需要引用传递的，会改变原值，需要一个temp变量的协助<br>
2.迭代的vector除非提前定义好元素数量，否则需要创建临时变量，无法直接访问下标。<br>
然后来看一下官方题解和网友题解：</p>
<blockquote>
<p>方法一：排序数组分类<br>
思路<br>
当且仅当它们的排序字符串相等时，两个字符串是字母异位词。</p>
<p>算法<br>
维护一个映射 ans : {String -&gt; List}，其中每个键 K 是一个排序字符串，每个值是初始输入的字符串列表，排序后等于 K。<br>
在 Java 中，我们将键存储为字符串，例如，code。 在 Python 中，我们将键存储为散列化元组，例如，('c', 'o', 'd', 'e')。<br>
复杂度分析<br>
时间复杂度：O(NKlogK)，其中 N 是 strs 的长度，而 K 是 strs 中字符串的最大长度。当我们遍历每个字符串时，外部循环具有的复杂度O(N)。然后，我们在O(KlogK) 的时间内对每个字符串排序。<br>
空间复杂度：O(NK)，排序存储在 ans 中的全部信息内容。</p>
</blockquote>
<blockquote>
<p>方法二：按计数分类<br>
思路<br>
当且仅当它们的字符计数（每个字符的出现次数）相同时，两个字符串是字母异位词。</p>
<p>算法<br>
我们可以将每个字符串 s 转换为字符数 count，由26个非负整数组成，表示 a，}b，c 的数量等。我们使用这些计数作为哈希映射的基础。</p>
<p>在 Java 中，我们的字符数 count 的散列化表示将是一个用 <strong>＃</strong> 字符分隔的字符串。 例如，abbccc 将表示为 ＃1＃2＃3＃0＃0＃0 ...＃0，其中总共有26个条目。 在 python 中，表示将是一个计数的元组。 例如，abbccc 将表示为 (1,2,3,0,0，...，0)，其中总共有 26 个条目<br>
时间复杂度：O(NK)，其中 N 是 strs 的长度，而 K 是 strs 中字符串的最大长度。计算每个字符串的字符串大小是线性的，我们统计每个字符串。<br>
空间复杂度：O(NK)，排序存储在 ans 中的全部信息内容。</p>
</blockquote>
<p>官方题解一和我的思路一致，然后题解二就是26字母表的变形，适用于单个元素特别长的情况。</p>
<p>然后看一下网友题解：</p>
<blockquote>
<p>解法一<br>
最通用的一种解法，对于每个字符串，比较它们的每个字符出现的个数是否相等，相等的话就把它们放在一个 list 中去，作为一个类别。最外层写一个 for 循环然后一一比较就可以，还可以用一个等大的布尔型数组来记录当前字符串是否已经加入的了 list 。比较两个字符串的字符出现的次数可以用一个 HashMap，具体看代码吧。</p>
</blockquote>
<pre><code>public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) {
    List&lt;List&lt;String&gt;&gt; ans = new ArrayList&lt;&gt;();
    boolean[] used = new boolean[strs.length];
    for (int i = 0; i &lt; strs.length; i++) {
        List&lt;String&gt; temp = null;
        if (!used[i]) {
            temp = new ArrayList&lt;String&gt;();
            temp.add(strs[i]);
            //两两比较判断字符串是否符合
            for (int j = i + 1; j &lt; strs.length; j++) {
                if (equals(strs[i], strs[j])) {
                    used[j] = true;
                    temp.add(strs[j]);
                }
            }
        }
        if (temp != null) {
            ans.add(temp);

        }
    }
    return ans;

}
private boolean equals(String string1, String string2) {
    Map&lt;Character, Integer&gt; hash = new HashMap&lt;&gt;();
    //记录第一个字符串每个字符出现的次数，进行累加
    for (int i = 0; i &lt; string1.length(); i++) {
        if (hash.containsKey(string1.charAt(i))) {
            hash.put(string1.charAt(i), hash.get(string1.charAt(i)) + 1);
        } else {
            hash.put(string1.charAt(i), 1);
        }
    }
     //记录第一个字符串每个字符出现的次数，将之前的每次减 1
    for (int i = 0; i &lt; string2.length(); i++) {
        if (hash.containsKey(string2.charAt(i))) {
            hash.put(string2.charAt(i), hash.get(string2.charAt(i)) - 1);
        } else {
            return false;
        }
    }
    //判断每个字符的次数是不是 0 ，不是的话直接返回 false
    Set&lt;Character&gt; set = hash.keySet();
    for (char c : set) {
        if (hash.get(c) != 0) {
            return false;
        }
    }
    return true;
}
</code></pre>
<blockquote>
<p>时间复杂度：虽然看起来外层用了两个 for 循环，但是我们通过 used 数组保证了每个字符串只会访问 1 次，所以外层的复杂度是字符串数组的长度O（n），判断两个字符串相等的函数 equal 函数，时间复杂度是字符串的最长长度 O（K）。所以总共就是 O（nK）。<br>
空间复杂度：O（NK），用来存储结果。<br>
解法一算是比较通用的解法，不管字符串里边是大写字母，小写字母，数字，都可以用这个算法解决。这道题的话，题目告诉我们字符串中只有小写字母，针对这个限制，我们可以再用一些针对性强的算法。</p>
<p>解法三<br>
算术基本定理，又称为正整数的唯一分解定理，即：每个大于1的自然数，要么本身就是质数，要么可以写为2个以上的质数的积，而且这些质因子按大小排列之后，写法仅有一种方式。<br>
利用这个，我们把每个字符串都映射到一个正数上。<br>
用一个数组存储质数 prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103}。<br>
然后每个字符串的字符减去 ' a ' ，然后取到 prime 中对应的质数。把它们累乘。<br>
例如 abc ，就对应 'a' - 'a'， 'b' - 'a'， 'c' - 'a'，即 0, 1, 2，也就是对应素数 2 3 5，然后相乘 2 * 3 * 5 = 30，就把 &quot;abc&quot; 映射到了 30。</p>
</blockquote>
<pre><code>public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) {
    HashMap&lt;Integer, List&lt;String&gt;&gt; hash = new HashMap&lt;&gt;();
    //每个字母对应一个质数
    int[] prime = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103 };
    for (int i = 0; i &lt; strs.length; i++) {
        int key = 1;
        //累乘得到 key
        for (int j = 0; j &lt; strs[i].length(); j++) {
            key *= prime[strs[i].charAt(j) - 'a'];
        } 
        if (hash.containsKey(key)) {
            hash.get(key).add(strs[i]);
        } else {
            List&lt;String&gt; temp = new ArrayList&lt;String&gt;();
            temp.add(strs[i]);
            hash.put(key, temp);
        }

    }
    return new ArrayList&lt;List&lt;String&gt;&gt;(hash.values());
}
</code></pre>
<blockquote>
<p>时间复杂度：O（n * K），K 是字符串的最长长度。<br>
空间复杂度：O（NK），用来存储结果。<br>
这个解法时间复杂度，较解法二有提升，但是有一定的局限性，因为求 key 的时候用的是累乘，可能会造成溢出，超出 int 所能表示的数字。</p>
</blockquote>
<p>题解一是通用算法，使得不是26字母也能用，题解三是比较巧妙的算法，颇似原地swap等，但是同样地也有溢出的风险</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 242. 有效的字母异位词]]></title>
        <id>https://lixin-ee.github.io//post/zi-fu-chuan-242-you-xiao-de-zi-mu-yi-wei-ci</id>
        <link href="https://lixin-ee.github.io//post/zi-fu-chuan-242-you-xiao-de-zi-mu-yi-wei-ci">
        </link>
        <updated>2019-10-05T02:57:12.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p>
<p>示例 1:<br>
输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;<br>
输出: true<br>
示例 2:<br>
输入: s = &quot;rat&quot;, t = &quot;car&quot;<br>
输出: false<br>
说明:<br>
你可以假设字符串只包含小写字母。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/valid-anagram<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题也是简单题，非常适合用来夯实基础<br>
我一开始的思路是对于s每个存在的字母，都分别对s和t中该字母的数量进行count，注意顺序容器不像关联容器的count，没有自带的count，必须使用泛型算法中的count</p>
<pre><code>class Solution {
public:
    bool isAnagram(string s, string t) {
        int lens=s.size(),lent=t.size();
        if(lens!=lent)
            return false;
        for(auto c:s)
            if(count(s.begin(),s.end(),c)!=count(t.begin(),t.end(),c))
                return false;
        return true;
    }
};
</code></pre>
<p>提交的时候发现超时了，想想也是哦，count算法看起来很方便，其实背后是需要循环一遍字符串的，再加上外部的循环，等于时间复杂度位o(n^2)，实在不是一个好解法<br>
然后我想到了hashmap，可以先循环s，用map记录出现的单词和相应的次数，再循环t递减次数并监督是否有小于0的情况。但是后来转念一想，假设都是小写字母的话，一个大小为26的vector就足以应付了，所以得到代码如下</p>
<pre><code>class Solution {
public:
    bool isAnagram(string s, string t) {
        int lens=s.size(),lent=t.size();
        if(lens!=lent)
            return false;
        vector&lt;int&gt; vi(26,0);
        for(auto c:s)
            ++vi[c-'a'];
        for(auto c:t)
            if(--vi[c-'a']&lt;0)
                return false;
        return true;
    }
};
</code></pre>
<p>然后最后复习一遍快速排序吧，如果对空间复杂度有要求的话还是必须用快速排序，桶排序就不如前一种算法了。</p>
<pre><code>class Solution {
public:
    bool isAnagram(string s, string t) {
        int lens=s.size(),lent=t.size();
        if(lens!=lent)
            return false;
        Qsort(0,s.size()-1,s);
        Qsort(0,t.size()-1,t);
        if(s!=t)
            return false;
        return true;
    }
    
    void Qsort(int beg,int end,string &amp;s){
        if(beg&lt;end){
         int middle=partition(beg,end,s);
         Qsort(beg,middle-1,s);
         Qsort(middle+1,end,s);
        }
    }
    
    int partition(int beg,int end,string &amp;s){
        int flag=s[beg];
        while(beg&lt;end){
            while(beg&lt;end&amp;&amp;s[end]&gt;=flag)
                --end;
            swap(s[beg],s[end]);
            while(beg&lt;end&amp;&amp;s[beg]&lt;=flag)
                ++beg;
            swap(s[beg],s[end]);
        }
        return beg;
    }
};
</code></pre>
<p>快速排序有不少需要注意的地方，比如判断条件的设置和返回值的设置。<br>
最后看了一下官方题解，和我的思路一致。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 290. 单词规律]]></title>
        <id>https://lixin-ee.github.io//post/zi-fu-chuan-290-dan-ci-gui-lu</id>
        <link href="https://lixin-ee.github.io//post/zi-fu-chuan-290-dan-ci-gui-lu">
        </link>
        <updated>2019-10-04T04:57:13.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。<br>
这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。</p>
<p>示例1:<br>
输入: pattern = &quot;abba&quot;, str = &quot;dog cat cat dog&quot;<br>
输出: true<br>
示例 2:<br>
输入:pattern = &quot;abba&quot;, str = &quot;dog cat cat fish&quot;<br>
输出: false</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/word-pattern<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>又是一道让我无力吐槽的题目翻译，也太抽象了吧，真的是逼得我去看题解才看得明白</p>
<blockquote>
<p>首先要正确理解题目的意思，举例说明：<br>
pattern = &quot;abba&quot;, str = &quot;dog cat cat dog&quot;<br>
意思是a-&gt;dog,b-&gt;cat,由于a！=b,所以dog也应该!=cat，满足返回true；</p>
</blockquote>
<p>这就很明显了，其实和昨天的题<a href="">同构字符串</a>是一模一样的思路，只是最好先把str中的单词抽出来放到<code>vector&lt;string&gt;</code>里面，和Java等语言不同，c++没有按空格分割string单词的函数，只能自己分割一下了，然后就两种方法，昨天已经实现了map的方法，今天就来实现下下标检查法吧：</p>
<pre><code>class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        map&lt;char,int&gt; alpha;
        for(auto c:magazine){
            if(!alpha.insert(make_pair(c,1)).second)
                ++alpha[c];
        }        
        for(auto c:ransomNote)
            if(!alpha.count(c))
                return false;
            else if(alpha[c]&gt;0)
                --alpha[c];
            else
                return false;
        return true;
        
    }
};
</code></pre>
<p>主要注意的点就在于string分割，特别是最后一个单词，必须考虑只有一个单词的情况，所以必须引入temp，然后将最后一个单词的提取放到循环外。<br>
然后我的string分割可能复杂了一点，网友题解中有一个不错的贴上了供日后参考：</p>
<pre><code>// 分割字符串
vector&lt;string&gt; words;
string s;
for (int i = 0; i &lt; str.size(); i++)
    if (str[i] == ' ') {
        if (s.size())
            words.push_back(s);
            s = &quot;&quot;;
    } else
        s += str[i];

if (s.size())
    words.push_back(s);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 205. 同构字符串]]></title>
        <id>https://lixin-ee.github.io//post/zi-fu-chuan-205-tong-gou-zi-fu-chuan</id>
        <link href="https://lixin-ee.github.io//post/zi-fu-chuan-205-tong-gou-zi-fu-chuan">
        </link>
        <updated>2019-10-03T02:50:19.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个字符串 s 和 t，判断它们是否是同构的。<br>
如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。<br>
所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p>
<p>示例 1:<br>
输入: s = &quot;egg&quot;, t = &quot;add&quot;<br>
输出: true<br>
示例 2:<br>
输入: s = &quot;foo&quot;, t = &quot;bar&quot;<br>
输出: false<br>
示例 3:<br>
输入: s = &quot;paper&quot;, t = &quot;title&quot;<br>
输出: true</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/isomorphic-strings<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题也是简单题，第一感觉就是使用哈希map，但是有个细节问题需要解决，题目描述得不够清楚，下面通过我的几次错误提交来分析吧<br>
第一方案：一个map stot<br>
只使用一个map从s映射到t，但此时是无法保存t中的情况，所以错误的测试用例是&quot;ab&quot;-&quot;aa&quot;，因为对于s来说两个都是不同元素，但是t中则是相同的元素<br>
第二方案：使用map同时记录s-t和t-s，这时有个问题是如果s中的a对应t中的b，那t中的a需不需要对应s中的b呢？这里我首先猜测是需要的，所以将所有字符对映射到map中，然后也出现了错误测试用例&quot;ab&quot;-&quot;bc&quot;，说明是这个映射是分离的<br>
最终方案：那就无话可说啦，必须上两个map了，代码如下：</p>
<pre><code>class Solution {
public:
    bool isIsomorphic(string s, string t) {
        int lens=s.size(),lent=t.size();
        if(lens!=lent)
            return false;
        if(!lens)
            return true;
        map&lt;char,char&gt; stot;
        map&lt;char,char&gt; ttos;
        for(int i=0;i&lt;lens;++i){
            if(stot.count(s[i])||ttos.count(t[i])){
                if(t[i]!=stot[s[i]]||s[i]!=ttos[t[i]])
                    return false;
            }
            else{
                stot.insert(make_pair(s[i],t[i]));
                ttos.insert(make_pair(t[i],s[i]));
            }
        }
        return true;
    }
};
</code></pre>
<p>然后网友题解中有一个很秀的操作，向我们诠释了为啥这是一道简单题：</p>
<blockquote>
<p>同构代表两个字符串中每个位置上字符在自身第一次出现的索引相同</p>
</blockquote>
<p>这就很简单了，太秀了吧！</p>
<pre><code>class Solution {
public:
    bool isIsomorphic(string s, string t) {
       if(s.size()!=t.size())
            return false;
       for(int i=0;i&lt;s.size();++i)
           if(s.find(s[i])!=t.find(t[i]))
               return false;
        return true;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 345. 反转字符串中的元音字母]]></title>
        <id>https://lixin-ee.github.io//post/345-fan-zhuan-zi-fu-chuan-zhong-de-yuan-yin-zi-mu</id>
        <link href="https://lixin-ee.github.io//post/345-fan-zhuan-zi-fu-chuan-zhong-de-yuan-yin-zi-mu">
        </link>
        <updated>2019-10-03T01:51:15.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p>
<p>示例 1:<br>
输入: &quot;hello&quot;<br>
输出: &quot;holle&quot;<br>
示例 2:<br>
输入: &quot;leetcode&quot;<br>
输出: &quot;leotcede&quot;<br>
说明:<br>
元音字母不包含字母&quot;y&quot;。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/reverse-vowels-of-a-string<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题也是简单题（因为上一道中等题被锁了...）这道题的位置其实可以放在前面一点，用的方法也是比较简单，主要还是使用find_first_of和find_last_of 主要需要注意的点还是重新搜索的点必须是left+1和right-1，否则会原地打转。<br>
然后来复习一下fin_first_of吧，在stl源码剖析中使用的是迭代器的版本，返回的也是最简单的迭代器。然后其内部实现其实时间复杂度是<code>o(n*m)</code>，其中m是vowel的长度，内部是两次迭代，所以看起来程序很简单，但是其实花的时间也不少。<br>
看了一下网友题解，基本都是使用 set和双指针的结合，其实就和我这个思路一致了。</p>
<pre><code>class Solution {
public:
    string reverseVowels(string s) {
        string vowel=&quot;aeiouAEIOU&quot;;
        int left=s.find_first_of(vowel);
        int right=s.find_last_of(vowel);
        while(left!=string::npos&amp;&amp;right!=string::npos&amp;&amp;left&lt;right){
            swap(s[left],s[right]);
            left=s.find_first_of(vowel,left+1);
            right=s.find_last_of(vowel,right-1);
        }
        return s;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 151. 翻转字符串里的单词]]></title>
        <id>https://lixin-ee.github.io//post/zi-fu-chuan-151-fan-zhuan-zi-fu-chuan-li-de-dan-ci</id>
        <link href="https://lixin-ee.github.io//post/zi-fu-chuan-151-fan-zhuan-zi-fu-chuan-li-de-dan-ci">
        </link>
        <updated>2019-10-02T10:28:28.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个字符串，逐个翻转字符串中的每个单词。</p>
<p>示例 1：<br>
输入: &quot;the sky is blue&quot;<br>
输出: &quot;blue is sky the&quot;<br>
示例 2：<br>
输入: &quot;  hello world!  &quot;<br>
输出: &quot;world! hello&quot;<br>
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<br>
示例 3：<br>
输入: &quot;a good   example&quot;<br>
输出: &quot;example good a&quot;<br>
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/reverse-words-in-a-string<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题一开始没看清楚，上来就是想直接reverse，结果输出一直很奇怪，才发现是将单词的位置进行翻转，而单词内部不需要进行翻转（当然输出错误的主要原因也在于我一直把s当作space拿去匹配了...）<br>
这个整体还是和前一题一样，对元素进行翻转，但是这一次需要自己进行元素的搜索，所以可以看作<a href="https://lixin-ee.github.io/post/zi-fu-chuan-344fan-zhuan-zi-fu-chuan/">反转字符串</a>和<a href="https://lixin-ee.github.io/post/zi-fu-chuan-58-zui-hou-yi-ge-dan-ci-de-chang-du/">最后一个单词的长度</a>这两道题的结合吧。<br>
但是因为这一次没有对空间复杂度作出要求，所以我直接使用了额外的字符串进行保存。一开始老是没想起来怎么插入比较好，然后翻阅了笔记发现append这个函数最适合，比较类似可以设置范围的push_back，注意string的push_back只能以单个字符char作为参数的！然后还需要注意的是append参数的迭代器范围都是左闭右开的，所以右边的迭代器还需要额外+1.剩下的就是判断和空格插入的世纪问题了。<br>
最后结果如下：</p>
<pre><code>class Solution {
public:
    string reverseWords(string s) {
        int len=s.size();
        string space=&quot; &quot;;
        if(len==0)
            return s;
        string s_copy;
        int beg=s.find_last_not_of(space);
        int end=s.find_last_of(space,beg);
        while(beg!=string::npos){
            cout&lt;&lt;beg&lt;&lt;&quot; &quot;&lt;&lt;end&lt;&lt;endl;
            if(end==string::npos){
                s_copy.append(s.begin(),s.begin()+beg+1);
                break;
            }
            else
                 s_copy.append(s.begin()+end+1,s.begin()+beg+1);
            beg=s.find_last_not_of(space,end);
            end=s.find_last_of(space,beg);
            if(beg!=string::npos)
                s_copy.push_back(' ');
        }
        return s_copy;
    } 
};
</code></pre>
<p>然后来考虑原地算法，原地算法的难点不在反转，反转其实可以考虑<a href="https://lixin-ee.github.io/post/shu-zu-189xuan-zhuan-shu-zu/">数组189 旋转数组</a>，先对数组整体进行reverse，再对单个单词进行reverse。难点在于如何检测并去除多余的空格，我看了一下网友题解，基本是将元素进行移动或者将首尾的空格无视掉（使用substr），还是牺牲一点空间舒服一点啊hhh</p>
]]></content>
    </entry>
</feed>