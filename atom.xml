<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lixin-ee.github.io/</id>
    <title>Lixin-ee</title>
    <updated>2019-11-10T15:02:46.198Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lixin-ee.github.io/"/>
    <link rel="self" href="https://lixin-ee.github.io//atom.xml"/>
    <subtitle>好景在望。</subtitle>
    <logo>https://lixin-ee.github.io//images/avatar.png</logo>
    <icon>https://lixin-ee.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Lixin-ee</rights>
    <entry>
        <title type="html"><![CDATA[树 101. 对称二叉树[简单]]]></title>
        <id>https://lixin-ee.github.io//post/shu-101-dui-cheng-er-cha-shu-jian-dan</id>
        <link href="https://lixin-ee.github.io//post/shu-101-dui-cheng-er-cha-shu-jian-dan">
        </link>
        <updated>2019-11-10T14:59:58.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个二叉树，检查它是否是镜像对称的。</p>
<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>
<pre><code>1
</code></pre>
<p>/ <br>
2   2<br>
/ \ / <br>
3  4 4  3<br>
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>
<pre><code>1
</code></pre>
<p>/ <br>
2   2<br>
\   <br>
3    3</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/symmetric-tree<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>我的思路是1.先进行层次遍历 2.对层次遍历得到的vector中的vector进行对称性检验<br>
主要需要注意的地方是必须把null也算进去，等于强行构造一棵满二叉树，我的处理方法是null插入值-1，其实这是不严谨的，如果被知道了很容易就被攻破了<br>
代码如下：</p>
<pre><code>class Solution {
    vector&lt;vector&lt;int&gt;&gt; ol;
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)
            return true;
        orderlevel(root,0);
        for(auto vi:ol){
            for(auto beg=vi.begin(),end=vi.end()-1;beg&lt;end;++beg,--end){
                if(beg==end)
                    return false;
                if(*beg!=*end)
                    return false;
            }
        }
        return true;
    }
    
    void orderlevel(TreeNode* cur,int level){
        if(ol.size()==level)
            ol.push_back(vector&lt;int&gt;());
        if(cur==NULL){
            ol[level].push_back(-1);
            return;
        }
        ol[level].push_back(cur-&gt;val);
        orderlevel(cur-&gt;left,level+1);
        orderlevel(cur-&gt;right,level+1);
        return;
    }   
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ primer 第十四章 笔记]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-shi-si-zhang-bi-ji</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-shi-si-zhang-bi-ji">
        </link>
        <updated>2019-11-10T01:58:42.000Z</updated>
        <content type="html"><![CDATA[<p>14.重载运算与类型转换<br>
当运算符作用于类类型的运算对象时，可以通过运算符重载重新定义该运算符的含义，明智地使用运算符重载能令我们的成语更易于编写和阅读<br>
14.1基本概念<br>
重载的运算符是具有特殊名字的<strong>函数</strong>，它们的名字由关键字operator和其后要定义的运算符共同组成，重载运算符也包含返回类型、参数列表以及函数体<br>
重载运算符函数参数的数量与该运算符作用的运算对象数量一样多（一元一个，二元两个）<br>
除了重载的<strong>函数调用运算符operator（）之外</strong>，其他重载运算符<strong>不能含有默认实参</strong><br>
如果一个运算符函数是<strong>成员函数</strong>，则它的<strong>第一个（左侧）运算对象绑定到隐式的this指针</strong>上，因此，成员运算符函数的（显式）参数数量比运算对象总数少一个<br>
对于一个运算符函数来说，它必须自身是类的成员，或者必须运算对象中至少含有一个类类型的参数。这意味着当运算符只作用于内置类型的运算对象时，我们无法改变该运算符的含义</p>
<p>我们只能<strong>重载已有的运算符</strong>，而无权定义声明新的运算符号<br>
有四个符号既是一元运算符也是二元运算符：+ - * &amp;，从参数的数量我们可以推断到底定义的是哪种运算符<br>
对于一个重载的运算符来说，其<strong>优先级和结合律与对应的内置运算符一致</strong></p>
<p>对于<strong>非成员函数</strong>的<strong>重载运算符</strong>1.既可以讲运算符作用于类型正确（相同类型或可转换类型）的实参从而间接调用重载的运算符函数2.也能直接调用运算符函数<br>
对于<strong>成员函数</strong>的重载运算符，我们像<strong>调用其他成员函数一样显式地调用</strong>成员运算符函数</p>
<p><strong>部分运算符不应该被重载</strong>，因为重载运算符本质上是函数调用，所以运算对象<strong>求值顺序的规则无法应用</strong>到重载的运算符上，例如（<strong>逻辑与&amp;&amp;、逻辑或||、逗号运算符，</strong>）的运算对象求值顺序规则无法保留下来。除此以外，<strong>&amp;&amp;和||运算符</strong>的重载版本也无法保留内置运算符的<strong>短路求值</strong>属性（<strong>先求左边值再求右边值</strong>），<strong>总是会两边都被求值</strong><br>
一般不重载逗号运算符和取地址运算符，因为c++语言已经定义了这两种运算符用于类类型对象时的特殊含义<br>
通常情况下不应该重载逗号、取地址、逻辑与和逻辑或运算符<br>
当你开始设计一个类时，首先应该考虑类提供的操作，再根据操作考虑哪些操作需要重载的运算符</p>
<p><strong>赋值运算符</strong>返回它<strong>左侧运算对象的一个引用</strong><br>
如果类含有算数运算符或者位运算符，则最好也提供相应的复合赋值运算符+=等，<br>
当我们定义重载的运算符时，必须<strong>首先决定</strong>是将其声明为类的<strong>成员函数</strong>还是声明为一个普通的<strong>非成员函数</strong></p>
<p>在含有<strong>混合类型</strong>的表达式中应当使用<strong>对称性</strong>的运算符（例如加法是具有对称型的，求int和double的和时<strong>两者的位置可以是任意的</strong>），此时重载运算符<strong>必须定义成非成员函数</strong><br>
当我们把运算符重载为<strong>成员函数</strong>时，它的<strong>左侧运算对象</strong>必须是运算符<strong>所属类</strong>的一个对象<br>
3.2.2中string的+相连之所以必须有一个是string形参就是因为string重载了+运算符，并且将其定义为非成员函数。</p>
<p>14.3算术和关系运算符<br>
通常情况下，我们把算术和关系运算符定义成<strong>非成员函数</strong>以允许对左侧或右侧的运算对象<strong>进行转换</strong>。因为这些运算符一般不需要改变运算对象的状态，所以<strong>形参都是常量的引用</strong><br>
算术运算符完成<strong>计算后得到的新值</strong>有别于任何一个运算对象，常常<strong>位于一个局部变量之内</strong>，操作完成后<strong>返回该局部变量的副本</strong>作为其结果。如果类定义了算术运算符，则它一般也会定义一个对应的<strong>复合赋值运算符</strong>。此时，最有效的方式是<strong>使用复合赋值来定义算术运算符</strong><br>
如果类<strong>同时定义</strong>了算术运算符和相关的复合赋值运算符，则通常情况下<strong>应该使用复合赋值来实现算术运算符</strong><br>
14.3.1 相等运算符<br>
c++中的类通过定义相等运算符来检验两个对象是否相等。他们<strong>会比较对象的每一个数据成员</strong>，只有当所有对应的成员<strong>都相等时</strong>才认为两个对象相等</p>
<p>14.3.2关系运算符<br>
定义了相等运算符的类通常（但不总是）包含关系运算符。特别是，因为关联容器和一些算法要用到小于运算符，所以定义<strong>operator&lt;会比较有用</strong></p>
<p>如果存在唯一一种逻辑可靠的&lt;定义，则应该考虑为这个类定义&lt;运算符。如果类同时还包含==，则<strong>当且仅当&lt;的定义和==产生的结果一致时才定义&lt;运算符。</strong><br>
14.4赋值运算符<br>
类还可以定义其他赋值运算符以使用别的类型作为右侧运算对象。<br>
标准库vector还定义了第三种赋值运算符，该运算符接受花括号内的元素列表作为参数。我们能使用如下形式使用该运算符：</p>
<p><strong>花括号的本质</strong></p>
<p>为了与内置类型的赋值运算符保持一致（也与我们已经定义的拷贝赋值和移动赋值运算一致），这个新的赋值运算符将<strong>返回其左侧运算对象的引用</strong></p>
<p>和拷贝赋值及移动赋值运算符一样，其他重载的赋值运算符也<strong>必须先释放当前内存空间，再创建一片新空间</strong>不同之处是，这个运算符无须检查对象向自身的赋值，这是因为它的形参<code>initializer_list&lt;string&gt;</code> 确保il和this所指向的不是同一个对象<br>
我们可以重载赋值运算符，不论形参的类型是什么，<strong>赋值运算符都必须定义为成员函数</strong>。<br>
复合赋值运算符<strong>不非得</strong>是类的成员，不过我们还是倾向于把包括复合赋值在内的所有赋值运算符都定义在类的内部。为了与内置类型的复合赋值保持一致，类中的复合赋值运算符也要返回其左侧运算对象的引用。<br>
赋值运算符必须定义成类的成员，复合赋值运算符通常情况下也应该这么做，这两类运算符都应该返回左侧运算对象的引用</p>
<p>14.5下标运算符<br>
下标运算符<strong>必须是成员函数</strong><br>
为了与下标的原始定义兼容，下标运算符通常以<strong>所访问元素的引用作为返回值</strong>，这样做的好处是下标可以<strong>出现在赋值运算符的任意一端</strong>。我们最好<strong>同时定义</strong>下标运算符的<strong>常量版本和非常量版本</strong>。当作用于一个常量对象时，下标运算符返回常量引用以确保我们不会给返回的对象赋值<br>
如果一个类包含下标运算符，则它通常会定义两个版本：一个返回普通引用，另一个是类的常量成员并且返回常量引用。<br>
14.6 递增和递减运算符<br>
c++语言并不要求递增和递减运算符必须是类的成员，但是因为它们改变的正好是所操作对象的状态，所以<strong>建议将其设定为成员函数</strong><br>
定义递增和递减运算符<strong>应该同时定义其前置版本和后置版本</strong>。这些运算符通常应该被定义为类的成员<br>
为了与内置版本一致，前置运算符应该返回递增或递减后<strong>对象的引用</strong></p>
<p>区分前置和后置运算符：<strong>后置版本接受一个额外的（不被使用）int类型的形参</strong>。当我们使用后置运算符时，<strong>编译器为这个形参提供一个值为0的实参</strong>。这个形参的唯一作用就是区分前置版本和后置版本的函数，而不是真的要在实现后置版本时参与运算</p>
<p>为了与内置版本保持一致，<strong>后置运算符应该返回对象的原值（递增或递减之前的值），返回的形式是一个值而非引用</strong><br>
对于后置版本来说，<strong>在递增对象之前需要首先记录对象的状态</strong></p>
<p>我们的<strong>后置运算符调用各自的前置版本来完成实际的工作</strong>，例如后置递增运算符执行<br>
<code>++*this</code><br>
后置函数返回事先存好的ret副本。因此最终的结果是，<strong>对象本身向前移动了一个元素，而返回的结果仍然反映对象在未递增之前原始的值</strong>。<br>
因为我们<strong>不会用到int形参，所以无需为其命名</strong><br>
如果我们<strong>想通过函数调用的方式调用后置版本，则必须为它的整形参数传递一个值</strong></p>
<p>尽管<strong>传入的值通常会被运算符函数忽略，但却必不可少</strong>，因为编译器只有通过它才能知道应该使用后置版本。<br>
14.7成员访问运算符<br>
解引用运算符<strong>首先检查curr是否仍在作用范围内</strong>，如果是，则<strong>返回curr所指元素的一个引用</strong>。箭头运算符<strong>不执行任何自己的操作</strong>，而是<strong>调用解引用运算符并返回解引用结果元素的地址</strong>。<br>
<strong>箭头运算符必须是类的成员。解引用运算符通常也是类的成员</strong>，尽管并非必须如此。<br>
值得注意的是，我们将这两个运算符定义成了** const成员**，这是因为与递增和递减<br>
运算符不一样，获取一个元素并不会改变StrBlobPtr对象的状态。同时，<strong>它们的返回值分别是非常量string的引用或指针，因为一个StrBlobPtr只能绑定到非常量的StrBlob对象</strong><br>
和大多数其他运算符一样（尽管这么做不太好)，我们能令<code>operator *</code>完成任何我们<br>
指定的操作。<br>
箭头运算符则不是这样，它永远不能丢掉成员访问这个最基本的含义<br>
point -&gt; mem 的执行过程如下所示:</p>
<ol>
<li>如果 point 是指针，则我们应用内置的箭头运算符，表达式等价（*point ) .memo<br>
首先解引用该指针，然后从所得的对象中获取指定的成员。如果 point 所指的类型没有名为 mem 的成员，程序会发生错误。</li>
<li>如果 point 是定义了 operator –&gt;的类的一个对象，则我们使用 point . operator-&gt; ()<br>
的结果来获取 mem 。其中，如果该结果是一个指针，则执行第1步：如果该结果本身含有重载的 operator -&gt;()，则重复调用当前步驟。最终，当这一过程结束时程序或者返回了所需的内容，或者返回一些表示程序错误的信息<br>
重载的箭头运算符<strong>必须返回类的指针</strong>或者自定义了箭头运算符的某个类的对象</li>
</ol>
<p>14.8函数调用运算符 也就是（）括号<br>
如果<strong>类重载了</strong>函数调用运算符，则我们可以像<strong>使用函数一样使用该类的对象</strong>。因为这样的类<strong>同时也能存储状态</strong>，与普通函数相比它们更加灵活</p>
<p>调用对象实际上是在<strong>运行重载的调用运算符。</strong><br>
函数调用运算符<strong>必须是成员函教</strong>。一个类可以定义多个不同版本的调用运算符，相互之间应该在参数数量或类型上有所匹别。<br>
如果类定义了调用运算符，则<strong>该类的对象称作函数对象（function object）</strong>。因为可以调用这种对象，所以我们说这些对象的&quot;行为像函数一样&quot;。<br>
14.8.1 lambda是<strong>函数对象</strong><br>
当我们编写了一个 lambda 后，编译器将该表达式<strong>翻译成一个未命名类的未命名对象</strong>（参见10.3.3节，第349页）。在<strong>lambda 表达式产生的类</strong>中<strong>含有一个重载的函数调用运算符</strong><br>
默认情况下 lambda <strong>不能改变它捕获的变量</strong>。因此在默认情况下，<strong>由 lambda 产生的类当中的函数调用运算符是一个 const 成员函数</strong>。如果 lambda 被声明为可变的，则调用运算符就不是 const 的了。<br>
如我们所知，当一个 lambda 表达式通过<strong>引用捕获</strong>变量时，将由程序负责确保lambda执行时引用所引的对象确实存在（参见10.3.3节，第350页）。因此，<strong>编译器可以直接使用该引用而无须在 lambda 产生的类中将其存储为数据成员。</strong><br>
相反，通过<strong>值捕获</strong>的变量被拷贝到 lambda 中（参见10.3.3节，第350页）。因此，这种 lambda 产生的类<strong>必须为每个值捕获的变量建立对应的数据成员，同时创建构造函数，令其使用捕获的变量的值来初始化数据成员。</strong></p>
<p>lambda 表达式产生的类不含<strong>默认构造函数</strong>、赋值运算符及<strong>默认析构函数</strong>；它是否含有默认的拷贝/移动构造函数则通常要视捕获的数据成员类型而定<br>
14.8.2标准库定义的函数对象<br>
标准库定义了一组表示算术运算符、关系运算符和逻辑运算符的类，<strong>每个类分别定义了一个执行命名操作的调用运算符。</strong><br>
这些类都被定义成模板的形式，我们可为其指定具体的应用类型，这里的类型即调用运算符的形参类型</p>
<p>表14.2所列的类型定文在 functional 头文件中。</p>
<p><strong>表示运算符的函数对象类常用来替换算法中的默认运算符（比如for_each等等的泛型算法）</strong><br>
需要特别注意的是，标准库规定其<strong>函数对象对于指针同样适用</strong>。我们之前曾经介绍过<strong>比较两个无关指针将产生未定义的行为</strong>（参见3.5.3节，第107页），然而我们可能会希望通过比较指针的内存地址来 sort 指针的 vector 。直接这么做将产生未定义的行为，因此我们<strong>可以使用一个标准库函数对象来实现该目的</strong>：</p>
<p><strong>关联容器使用 less &lt; key _ type &gt;对元素排序</strong>，因此我们可以定义一个<strong>指针的 set 或者在map 中使用指针作为关键值而无须直接声明 less 。</strong><br>
14.8.3可调用对象与function<br>
C ++语言中有几种可调用的对象：函数、函数指针、 lambda 表达式（参见10.3.2节，第346页)、 bind 创建的对象（参见10.3.4节，第354页）以及重载了函数调用运算符类。<br>
和其他对象一样，<strong>可调用的对象也有类型</strong>。<br>
然而，两个<strong>不同类型</strong>的可调用对象却可能<strong>共享同一种调用形式</strong>（call signature ),调用形式<strong>指明了调用返回的类型以及传递给调用的实参类型</strong>，<strong>一种调用形式对应一个函数类型</strong>，<br>
例如 int（int，int）<br>
对于<strong>几个可调用对象共享同一种调用形式</strong>的情况，有时我们会希望把它们<strong>看成具有相同的类型。</strong><br>
<strong>函数表（functiontable)</strong> <strong>用于存储指向这些可调用对象的&quot;指针&quot;</strong>。当程序需要执行某个特定的操作时，从表中查找该调用的函数。<br>
在 C++语言中，函数表很容易通过<strong>map</strong>来实现</p>
<p>// 构建从<strong>运算符到函数指针的映射关系</strong>，其中函数接受两个 int 、运回一个 int<br>
<code>map&lt;string, int (*) (int,int)&gt; binops;</code><br>
我们可以按照下面的形式将 add 的指针添加到 binops 中：<br>
// 正确； add 是一个指向正确类型函数的指针<br>
binops.insert({&quot; + &quot;, add}) ;  //  {“+”，add} 是一个 pair  (参见 11.2.3 节， 379 巧）<br>
但是我们不能将 mod 或者 divide 存入 binops<br>
binops . insert ({“%”, mod}) ;  //  错误： mod  不是一个函数指针<br>
问题在于<strong>mod是个 lambda 表达式，而每个 lambda 有它自己的类类型，该类型与存储在binops 中的值的类型不匹配</strong>。<br>
我们可以使用一个名为<strong>function 的新的标准库类型</strong>解决上述问题， function 定义在<strong>functional 头文件</strong>中，表14.3列举出了  function 定义的操作</p>
<p>function是一个<strong>模板</strong>，和我们使用过的其他模板一样，当创建一个具体的function类型时我们必须提供额外的信息。在此例中，所谓额外的信息是指该function类型能够表示的<strong>对象的调用形式</strong>。参考其他模板，我们在一对尖括号内指定类型：</p>
<p>我们<strong>不能（直接）将重载函数的名字存入</strong>function 类型的对象中：</p>
<p>解决上述二义性问题的一条途径是<strong>存储函数指针</strong></p>
<p>同样，我们也能使用 lambda 来消除二义性：</p>
<p>新版本标准库中的function类与旧版本中的<strong>unary_function和binary_function没有关联，后两个类已经被更通用的bind函数替代了</strong>（参见10.3.4节，第357页）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写树算法的套路框架]]></title>
        <id>https://lixin-ee.github.io//post/xie-shu-suan-fa-de-tao-lu-kuang-jia</id>
        <link href="https://lixin-ee.github.io//post/xie-shu-suan-fa-de-tao-lu-kuang-jia">
        </link>
        <updated>2019-11-09T12:36:19.000Z</updated>
        <content type="html"><![CDATA[<p>解题思路：<br>
二叉树算法 设计的总路线：明确一个节点要做的事情，然后剩下的事抛给框架。</p>
<pre><code>void traverse(TreeNode root) {
    // root 需要做什么？在这做。
    // 其他的不用 root 操心，抛给框架
    traverse(root.left);
    traverse(root.right);
}
</code></pre>
<p>举两个简单的例子体会一下这个思路，热热身。</p>
<ol>
<li>如何把二叉树所有的节点中的值加一？</li>
</ol>
<pre><code>void plusOne(TreeNode root) {
    if (root == null) return;
    root.val += 1;

    plusOne(root.left);
    plusOne(root.right);
}
</code></pre>
<ol start="2">
<li>如何判断两棵二叉树是否完全相同？</li>
</ol>
<pre><code>boolean isSameTree(TreeNode root1, TreeNode root2) {
    // 都为空的话，显然相同
    if (root1 == null &amp;&amp; root2 == null) return true;
    // 一个为空，一个非空，显然不同
    if (root1 == null || root2 == null) return false;
    // 两个都非空，但 val 不一样也不行
    if (root1.val != root2.val) return false;

    // root1 和 root2 该比的都比完了
    return isSameTree(root1.left, root2.left)
        &amp;&amp; isSameTree(root1.right, root2.right);
}
</code></pre>
<p>借助框架，上面这两个例子不难理解吧？如果可以理解，那么所有二叉树算法你都能解决。</p>
<p>二叉搜索树（Binary Search Tree，简称 BST）是一种很常用的的二叉树。它的定义是：一个二叉树中，任意节点的值要大于等于左子树所有节点的值，且要小于等于右边子树的所有节点的值。</p>
<p>如下就是一个符合定义的 BST：<br>
<img src="https://lixin-ee.github.io//post-images/1573303241790.png" alt=""><br>
下面实现 BST 的基础操作：判断 BST 的合法性、增、删、查。其中“删”和“判断合法性”略微复杂。</p>
<p>零、判断 BST 的合法性</p>
<p>这里是有坑的哦，我们按照刚才的思路，每个节点自己要做的事不就是比较自己和左右孩子吗？看起来应该这样写代码：</p>
<pre><code>boolean isValidBST(TreeNode root) {
    if (root == null) return true;
    if (root.left != null &amp;&amp; root.val &lt;= root.left.val) return false;
    if (root.right != null &amp;&amp; root.val &gt;= root.right.val) return false;

    return isValidBST(root.left)
        &amp;&amp; isValidBST(root.right);
}
</code></pre>
<p>但是这个算法出现了错误，BST 的每个节点应该要小于右边子树的所有节点，下面这个二叉树显然不是 BST，但是我们的算法会把它判定为 BST。<br>
<img src="https://lixin-ee.github.io//post-images/1573303293742.png" alt=""><br>
出现错误，不要慌张，框架没有错，一定是某个细节问题没注意到。我们重新看一下 BST 的定义，root 需要做的不只是和左右子节点比较，而是要整个左子树和右子树所有节点比较。怎么办，鞭长莫及啊！</p>
<p>这种情况，我们可以使用辅助函数，增加函数参数列表，在参数中携带额外信息，请看正确的代码：</p>
<pre><code>boolean isValidBST(TreeNode root) {
    return isValidBST(root, null, null);
}

boolean isValidBST(TreeNode root, TreeNode min, TreeNode max) {
    if (root == null) return true;
    if (min != null &amp;&amp; root.val &lt;= min.val) return false;
    if (max != null &amp;&amp; root.val &gt;= max.val) return false;
    return isValidBST(root.left, min, root) 
        &amp;&amp; isValidBST(root.right, root, max);
}
</code></pre>
<p>一、在 BST 中查找一个数是否存在<br>
根据我们的指导思想，可以这样写代码：</p>
<pre><code>boolean isInBST(TreeNode root, int target) {
    if (root == null) return false;
    if (root.val == target) return true;

    return isInBST(root.left, target)
        || isInBST(root.right, target);
}
</code></pre>
<p>这样写完全正确，充分证明了你的框架性思维已经养成。现在你可以考虑一点细节问题了：如何充分利用信息，把 BST 这个“左小右大”的特性用上？<br>
很简单，其实不需要递归地搜索两边，类似二分查找思想，根据 target 和 root.val 的大小比较，就能排除一边。我们把上面的思路稍稍改动：</p>
<pre><code>boolean isInBST(TreeNode root, int target) {
    if (root == null) return false;
    if (root.val == target)
        return true;
    if (root.val &lt; target) 
        return isInBST(root.right, target);
    if (root.val &gt; target)
        return isInBST(root.left, target);
    // root 该做的事做完了，顺带把框架也完成了，妙
}
</code></pre>
<p>于是，我们对原始框架进行改造，抽象出一套针对 BST 的遍历框架：<br>
void BST(TreeNode root, int target) {<br>
if (root.val == target)<br>
// 找到目标，做点什么<br>
if (root.val &lt; target)<br>
BST(root.right, target);<br>
if (root.val &gt; target)<br>
BST(root.left, target);<br>
}<br>
二、在 BST 中插入一个数</p>
<p>对数据结构的操作无非遍历 + 访问，遍历就是“找”，访问就是“改”。具体到这个问题，插入一个数，就是先找到插入位置，然后进行插入操作。</p>
<p>上一个问题，我们总结了 BST 中的遍历框架，就是“找”的问题。直接套框架，加上“改”的操作即可。一旦涉及“改”，函数就要返回 TreeNode 类型，并且对递归调用的返回值进行接收。</p>
<pre><code>TreeNode insertIntoBST(TreeNode root, int val) {
    // 找到空位置插入新节点
    if (root == null) return new TreeNode(val);
    // if (root.val == val)
    //     BST 中一般不会插入已存在元素
    if (root.val &lt; val) 
        root.right = insertIntoBST(root.right, val);
    if (root.val &gt; val) 
        root.left = insertIntoBST(root.left, val);
    return root;
}
</code></pre>
<p>三、在 BST 中删除一个数</p>
<p>这个问题稍微复杂，不过你有框架指导，难不住你。跟插入操作类似，先“找”再“改”，先把框架写出来再说：</p>
<p>Java<br>
TreeNode deleteNode(TreeNode root, int key) {<br>
if (root.val == key) {<br>
// 找到啦，进行删除<br>
} else if (root.val &gt; key) {<br>
root.left = deleteNode(root.left, key);<br>
} else if (root.val &lt; key) {<br>
root.right = deleteNode(root.right, key);<br>
}<br>
return root;<br>
}<br>
找到目标节点了，比方说是节点 A，如何删除这个节点，这是难点。因为删除节点的同时不能破坏 BST 的性质。有三种情况，用图片来说明。</p>
<p>情况 1：A 恰好是末端节点，两个子节点都为空，那么它可以当场去世了。<br>
<img src="https://lixin-ee.github.io//post-images/1573303391897.png" alt=""></p>
<pre><code>if (root.left == null &amp;&amp; root.right == null)
    return null;
</code></pre>
<p>情况 2：A 只有一个非空子节点，那么它要让这个孩子接替自己的位置。<br>
<img src="https://lixin-ee.github.io//post-images/1573303420844.png" alt=""></p>
<pre><code>// 排除了情况 1 之后
if (root.left == null) return root.right;
if (root.right == null) return root.left;
</code></pre>
<p>情况 3：A 有两个子节点，麻烦了，为了不破坏 BST 的性质，A 必须找到左子树中最大的那个节点，或者右子树中最小的那个节点来接替自己。我们以第二种方式讲解。<br>
<img src="https://lixin-ee.github.io//post-images/1573303458702.png" alt=""></p>
<pre><code>if (root.left != null &amp;&amp; root.right != null) {
    // 找到右子树的最小节点
    TreeNode minNode = getMin(root.right);
    // 把 root 改成 minNode
    root.val = minNode.val;
    // 转而去删除 minNode
    root.right = deleteNode(root.right, minNode.val);
}
</code></pre>
<p>三种情况分析完毕，填入框架，简化一下代码：</p>
<pre><code>TreeNode deleteNode(TreeNode root, int key) {
    if (root == null) return null;
    if (root.val == key) {
        // 这两个 if 把情况 1 和 2 都正确处理了
        if (root.left == null) return root.right;
        if (root.right == null) return root.left;
        // 处理情况 3
        TreeNode minNode = getMin(root.right);
        root.val = minNode.val;
        root.right = deleteNode(root.right, minNode.val);
    } else if (root.val &gt; key) {
        root.left = deleteNode(root.left, key);
    } else if (root.val &lt; key) {
        root.right = deleteNode(root.right, key);
    }
    return root;
}

TreeNode getMin(TreeNode node) {
    // BST 最左边的就是最小的
    while (node.left != null) node = node.left;
    return node;
} 
</code></pre>
<p>删除操作就完成了。注意一下，这个删除操作并不完美，因为我们一般不会通过 root.val = minNode.val 修改节点内部的值来交换节点，而是通过一系列略微复杂的链表操作交换 root 和 minNode 两个节点。因为具体应用中，val 域可能会很大，修改起来很耗时，而链表操作无非改一改指针，而不会去碰内部数据。</p>
<p>但这里忽略这个细节，旨在突出 BST 基本操作的共性，以及借助框架逐层细化问题的思维方式。<br>
四、最后总结</p>
<p>通过这篇文章，你学会了如下几个技巧：<br>
1.二叉树算法设计的总路线：把当前节点要做的事做好，其他的交给递归框架，不用当前节点操心。<br>
2.如果当前节点会对下面的子节点有整体影响，可以通过辅助函数增长参数列表，借助参数传递信息。<br>
3.在二叉树框架之上，扩展出一套 BST 遍历框架：</p>
<pre><code>void BST(TreeNode root, int target) {
    if (root.val == target)
        // 找到目标，做点什么
    if (root.val &lt; target) 
        BST(root.right, target);
    if (root.val &gt; target)
        BST(root.left, target);
}
</code></pre>
<p>掌握了 BST 的基本操作。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树 100. 相同的树[简单]]]></title>
        <id>https://lixin-ee.github.io//post/shu-100-xiang-tong-de-shu-jian-dan</id>
        <link href="https://lixin-ee.github.io//post/shu-100-xiang-tong-de-shu-jian-dan">
        </link>
        <updated>2019-11-09T11:58:46.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个二叉树，编写一个函数来检验它们是否相同。<br>
如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。<br>
示例 1:<br>
输入:   1         1<br>
/ \       / <br>
2   3     2   3<br>
[1,2,3],   [1,2,3]<br>
输出: true<br>
示例 2:<br>
输入:   1          1<br>
/           <br>
2             2<br>
[1,2],     [1,null,2]<br>
输出: false<br>
示例 3:<br>
输入:    1         1<br>
/ \       / <br>
2   1     1   2<br>
[1,2,1],   [1,1,2]<br>
输出: false<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/same-tree<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题的难点在于如果单纯地分开判断前中后序的遍历顺序的话是无法得到结果的，只有<br>
1、同时遍历前序<br>
2、利用前序+中序或者中序+后序可以唯一确定一棵二叉树（注意，前序+后序无法唯一确定一棵二叉树）</p>
<p>我还是使用了第一种方法，并且使用递归，会方便很多，主要的难点就在于应付三种情况<br>
1.两者同时为NULL<br>
2.两者其一为NULL<br>
同时因为使用迭代法，所以需要使用一个函数外的bool变量作为返回值</p>
<p>最后代码为：</p>
<pre><code>class Solution {
bool res=true;
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL&amp;&amp;q==NULL)
            return res;
        if(p==NULL||q==NULL&amp;&amp;!(p==NULL&amp;&amp;q==NULL)){
            res=false;
            return res;
        }
        if(p-&gt;val!=q-&gt;val){
            res=false;
            return res;
        } 
        isSameTree(p-&gt;left, q-&gt;left);
        isSameTree(p-&gt;right, q-&gt;right);
        return res;
    }
};
</code></pre>
<p>然后来看一下官方题解</p>
<blockquote>
<p>方法一：递归<br>
直觉<br>
最简单的策略是使用递归。首先判断 p 和 q 是不是 None，然后判断它们的值是否相等。<br>
若以上判断通过，则递归对子结点做同样操作。</p>
</blockquote>
<pre><code>class Solution {
  public boolean isSameTree(TreeNode p, TreeNode q) {
    // p and q are both null
    if (p == null &amp;&amp; q == null) return true;
    // one of p and q is null
    if (q == null || p == null) return false;
    if (p.val != q.val) return false;
    return isSameTree(p.right, q.right) &amp;&amp;
            isSameTree(p.left, q.left);
  }
}
</code></pre>
<p>官网题解这里比我好很多，特别是返回值的处理，我用了一个全局变量，但是官方题解直接返回</p>
<blockquote>
<p>方法二：迭代<br>
直觉<br>
从根开始，每次迭代将当前结点从双向队列中弹出。然后，进行方法一中的判断：<br>
p 和 q 不是 None,<br>
p.val 等于 q.val,<br>
若以上均满足，则压入子结点。</p>
</blockquote>
<pre><code>class Solution {
 public boolean check(TreeNode p, TreeNode q) {
   // p and q are null
   if (p == null &amp;&amp; q == null) return true;
   // one of p and q is null
   if (q == null || p == null) return false;
   if (p.val != q.val) return false;
   return true;
 }

 public boolean isSameTree(TreeNode p, TreeNode q) {
   if (p == null &amp;&amp; q == null) return true;
   if (!check(p, q)) return false;

   // init deques
   ArrayDeque&lt;TreeNode&gt; deqP = new ArrayDeque&lt;TreeNode&gt;();
   ArrayDeque&lt;TreeNode&gt; deqQ = new ArrayDeque&lt;TreeNode&gt;();
   deqP.addLast(p);
   deqQ.addLast(q);

   while (!deqP.isEmpty()) {
     p = deqP.removeFirst();
     q = deqQ.removeFirst();

     if (!check(p, q)) return false;
     if (p != null) {
       // in Java nulls are not allowed in Deque
       if (!check(p.left, q.left)) return false;
       if (p.left != null) {
         deqP.addLast(p.left);
         deqQ.addLast(q.left);
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度 : O(N)，其中 N 是树的结点数，因为每个结点都访问一次。<br>
空间复杂度 : 最优情况（完全平衡二叉树）时为 O(log(N))，最坏情况下（完全不平衡二叉树）时为 O(N)，用于维护双向队列。</p>
</blockquote>
<p>网友解析：第二种方法是层次遍历的非递归算法</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树 102. 二叉树的层次遍历[中等]]]></title>
        <id>https://lixin-ee.github.io//post/shu-102-er-cha-shu-de-ceng-ci-bian-li-zhong-deng</id>
        <link href="https://lixin-ee.github.io//post/shu-102-er-cha-shu-de-ceng-ci-bian-li-zhong-deng">
        </link>
        <updated>2019-11-08T11:53:23.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。<br>
例如:<br>
给定二叉树: [3,9,20,null,null,15,7],<br>
3<br>
/ <br>
9  20<br>
/  <br>
15   7<br>
返回其层次遍历结果：</p>
</blockquote>
<pre><code>[
  [3],
  [9,20],
  [15,7]
]
</code></pre>
<blockquote>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这里我想复杂了，老是想着如何去把指针移动到同层，其实官方题解就特别简单<br>
如何遍历一棵树<br>
有两种通用的遍历树的策略：<br>
深度优先搜索（DFS）<br>
在这个策略中，我们采用深度作为优先级，以便从跟开始一直到达某个确定的叶子，然后再返回根到达另一个分支。<br>
深度优先搜索策略又可以根据根节点、左孩子和右孩子的相对顺序被细分为先序遍历，中序遍历和后序遍历。<br>
宽度优先搜索（BFS）<br>
我们按照高度顺序一层一层的访问整棵树，高层次的节点将会比低层次的节点先被访问到。<br>
下图中的顶点按照访问的顺序编号，按照 1-2-3-4-5 的顺序来比较不同的策略。<br>
<img src="https://lixin-ee.github.io//post-images/1573214236442.png" alt=""><br>
本问题就是用宽度优先搜索遍历来划分层次：[[1], [2, 3], [4, 5]]。</p>
<p>方法 1：递归<br>
算法<br>
最简单的解法就是递归，首先确认树非空，然后调用递归函数 helper(node, level)，参数是当前节点和节点的层次。程序过程如下：</p>
<p>输出列表称为 levels，当前最高层数就是列表的长度 len(levels)。比较访问节点所在的层次 level 和当前最高层次 len(levels) 的大小，如果前者更大就向 levels 添加一个空列表。<br>
将当前节点插入到对应层的列表 levels[level] 中。<br>
递归非空的孩子节点：helper(node.left / node.right, level + 1)。</p>
<pre><code>class Solution {
    List&lt;List&lt;Integer&gt;&gt; levels = new ArrayList&lt;List&lt;Integer&gt;&gt;();

    public void helper(TreeNode node, int level) {
        // start the current level
        if (levels.size() == level)
            levels.add(new ArrayList&lt;Integer&gt;());

         // fulfil the current level
         levels.get(level).add(node.val);

         // process child nodes for the next level
         if (node.left != null)
            helper(node.left, level + 1);
         if (node.right != null)
            helper(node.right, level + 1);
    }
    
    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {
        if (root == null) return levels;
        helper(root, 0);
        return levels;
    }
}
</code></pre>
<p>复杂度分析<br>
时间复杂度：O(N)，因为每个节点恰好会被运算一次。<br>
空间复杂度：O(N)，保存输出结果的数组包含 N 个节点的值。</p>
<p>方法 2：迭代<br>
算法<br>
上面的递归方法也可以写成迭代的形式。<br>
我们将树上顶点按照层次依次放入队列结构中，队列中元素满足 FIFO（先进先出）的原则。在 Java 中可以使用 Queue 接口中的 LinkedList实现。在 Python 中如果使用 Queue 结构，但因为它是为多线程之间安全交换而设计的，所以使用了锁，会导致性能不佳。因此在 Python 中可以使用 deque 的 append() 和 popleft() 函数来快速实现队列的功能。<br>
第 0 层只包含根节点 root ，算法实现如下：<br>
初始化队列只包含一个节点 root 和层次编号 0 ： level = 0。<br>
当队列非空的时候：<br>
在输出结果 levels 中插入一个空列表，开始当前层的算法。<br>
计算当前层有多少个元素：等于队列的长度。<br>
将这些元素从队列中弹出，并加入 levels 当前层的空列表中。<br>
将他们的孩子节点作为下一层压入队列中。<br>
进入下一层 level++。<br>
实现</p>
<pre><code>class Solution {
  public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {
    List&lt;List&lt;Integer&gt;&gt; levels = new ArrayList&lt;List&lt;Integer&gt;&gt;();
    if (root == null) return levels;

    Queue&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;();
    queue.add(root);
    int level = 0;
    while ( !queue.isEmpty() ) {
      // start the current level
      levels.add(new ArrayList&lt;Integer&gt;());

      // number of elements in the current level
      int level_length = queue.size();
      for(int i = 0; i &lt; level_length; ++i) {
        TreeNode node = queue.remove();

        // fulfill the current level
        levels.get(level).add(node.val);

        // add child nodes of the current level
        // in the queue for the next level
        if (node.left != null) queue.add(node.left);
        if (node.right != null) queue.add(node.right);
      }
      // go to next level
      level++;
    }
    return levels;
  }
}
</code></pre>
<p>复杂度分析<br>
时间复杂度：O(N)，因为每个节点恰好会被运算一次。<br>
空间复杂度：O(N)，保存输出结果的数组包含 N 个节点的值。</p>
<p>我的第一个实现：</p>
<pre><code>class Solution {
public:
    vector&lt;vector&lt;int&gt;&gt; vi;
    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {
        leveladd(root,0);
        return vi;
    }
    void leveladd(TreeNode* cur,int level){
        if(cur==NULL)
            return;
        if(level==vi.size())
            vi.push_back(vector&lt;int&gt;());
        vi[level].push_back(cur-&gt;val);
        leveladd(cur-&gt;left,level+1);
        leveladd(cur-&gt;right,level+1);
        return;
    }  
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉树 前中后遍历（144、94、145）]]></title>
        <id>https://lixin-ee.github.io//post/er-cha-shu-qian-zhong-hou-bian-li-14494145</id>
        <link href="https://lixin-ee.github.io//post/er-cha-shu-qian-zhong-hou-bian-li-14494145">
        </link>
        <updated>2019-11-08T07:59:03.000Z</updated>
        <content type="html"><![CDATA[<p>这三道题都是大话数据结构里面有的，所以复习一遍大话然后将代码用c++仿真一遍。<br>
<strong>先序遍历</strong></p>
<blockquote>
<p>144 二叉树的前序遍历<br>
给定一个二叉树，返回它的 前序 遍历。</p>
<p>示例:<br>
输入: [1,null,2,3]<br>
1<br>
<br>
2<br>
/<br>
3</p>
<p>输出: [1,2,3]<br>
进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/binary-tree-preorder-traversal<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>递归</p>
<pre><code>class Solution {
vector&lt;int&gt; res;
public:
    vector&lt;int&gt; preorderTraversal(TreeNode* root) {
        if(root==NULL){
            return res;
        }else
            res.push_back(root-&gt;val);
        preorderTraversal(root-&gt;left);
        preorderTraversal(root-&gt;right);
        return res;
    }
};
</code></pre>
<p>算法复杂度<br>
时间复杂度：访问每个节点恰好一次，时间复杂度为 O(N) ，其中 N 是节点的个数，也就是树的大小。<br>
空间复杂度：取决于树的结构，最坏情况存储整棵树，因此空间复杂度是 O(N)。</p>
<p>官方题解：<br>
方法 2：莫里斯遍历<br>
方法基于 莫里斯的文章，可以优化空间复杂度。算法不会使用额外空间，只需要保存最终的输出结果。如果实时输出结果，那么空间复杂度是 O(1)O(1)。</p>
<p>算法<br>
算法的思路是从当前节点向下访问先序遍历的前驱节点，每个前驱节点都恰好被访问两次。<br>
首先从当前节点开始，向左孩子走一步然后沿着右孩子一直向下访问，直到到达一个叶子节点（当前节点的中序遍历前驱节点），所以我们更新输出并建立一条伪边 predecessor.right = root 更新这个前驱的下一个点。如果我们第二次访问到前驱节点，由于已经指向了当前节点，我们移除伪边并移动到下一个顶点。<br>
如果第一步向左的移动不存在，就直接更新输出并向右移动。</p>
<pre><code>class Solution {
  public List&lt;Integer&gt; preorderTraversal(TreeNode root) {
    LinkedList&lt;Integer&gt; output = new LinkedList&lt;&gt;();

    TreeNode node = root;
    while (node != null) {
      if (node.left == null) {
        output.add(node.val);
        node = node.right;
      }
      else {
        TreeNode predecessor = node.left;
        while ((predecessor.right != null) &amp;&amp; (predecessor.right != node)) {
          predecessor = predecessor.right;
        }

        if (predecessor.right == null) {
          output.add(node.val);
          predecessor.right = node;
          node = node.left;
        }
        else{
          predecessor.right = null;
          node = node.right;
        }
      }
    }
    return output;
  }
}
</code></pre>
<p>时间复杂度：每个前驱恰好访问两次，因此复杂度是 O(N)O(N)，其中 NN 是顶点的个数，也就是树的大小。<br>
空间复杂度：我们在计算中不需要额外空间，但是输出需要包含 NN 个元素，因此空间复杂度为 O(N)O(N)</p>
<p><strong>中序遍历</strong></p>
<blockquote>
<p>给定一个二叉树，返回它的中序 遍历。<br>
示例:<br>
输入: [1,null,2,3]<br>
1<br>
<br>
2<br>
/<br>
3<br>
输出: [1,3,2]<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/binary-tree-inorder-traversal<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<pre><code>class Solution {
vector&lt;int&gt; res;
public:
    vector&lt;int&gt; inorderTraversal(TreeNode* root) {
        if(root==NULL)
            return res;
        inorderTraversal(root-&gt;left);
        res.push_back(root-&gt;val);
        inorderTraversal(root-&gt;right);
        return res;   
    }
};
</code></pre>
<p>复杂度分析<br>
时间复杂度：O(n)。递归函数 T(n)=2⋅T(n/2)+1。<br>
空间复杂度：最坏情况下需要空间O(n)，平均情况为O(logn)。</p>
<p>下面是官方题解：<br>
方法二：基于栈的遍历<br>
本方法的策略与上衣方法很相似，区别是使用了栈。</p>
<pre><code>public class Solution {
    public List &lt; Integer &gt; inorderTraversal(TreeNode root) {
        List &lt; Integer &gt; res = new ArrayList &lt; &gt; ();
        Stack &lt; TreeNode &gt; stack = new Stack &lt; &gt; ();
        TreeNode curr = root;
        while (curr != null || !stack.isEmpty()) {
            while (curr != null) {
                stack.push(curr);
                curr = curr.left;
            }
            curr = stack.pop();
            res.add(curr.val);
            curr = curr.right;
        }
        return res;
    }
}
</code></pre>
<p>复杂度分析<br>
时间复杂度：O(n)。<br>
空间复杂度：O(n)。</p>
<p>方法三：莫里斯遍历<br>
本方法中，我们使用一种新的数据结构：线索二叉树。方法如下：<br>
Step 1: 将当前节点current初始化为根节点<br>
Step 2: While current不为空，<br>
若current没有左子节点<br>
a. 将current添加到输出<br>
b. 进入右子树，亦即, current = current.right<br>
否则<br>
a. 在current的左子树中，令current成为最右侧节点的右子节点<br>
b. 进入左子树，亦即，current = current.left<br>
举例而言:<br>
1<br>
/   <br>
2     3<br>
/ \   /<br>
4   5 6</p>
<p>首先，1 是根节点，所以将 current 初始化为 1。1 有左子节点 2，current 的左子树是</p>
<pre><code>     2
    / \
   4   5
</code></pre>
<p>在此左子树中最右侧的节点是 5，于是将 current(1) 作为 5 的右子节点。令 current = cuurent.left (current = 2)。<br>
现在二叉树的形状为:</p>
<pre><code>     2
    / \
   4   5
        \
         1
          \
           3
          /
         6
</code></pre>
<p>对于 current(2)，其左子节点为4，我们可以继续上述过程</p>
<pre><code>    4
     \
      2
       \
        5
         \
          1
           \
            3
           /
          6
</code></pre>
<p>由于 4 没有左子节点，添加 4 为输出，接着依次添加 2, 5, 1, 3 。节点 3 有左子节点 6，故重复以上过程。<br>
最终的结果是 [4,2,5,1,6,3]。</p>
<pre><code>class Solution {
    public List &lt; Integer &gt; inorderTraversal(TreeNode root) {
        List &lt; Integer &gt; res = new ArrayList &lt; &gt; ();
        TreeNode curr = root;
        TreeNode pre;
        while (curr != null) {
            if (curr.left == null) {
                res.add(curr.val);
                curr = curr.right; // move to next right node
            } else { // has a left subtree
                pre = curr.left;
                while (pre.right != null) { // find rightmost
                    pre = pre.right;
                }
                pre.right = curr; // put cur after the pre node
                TreeNode temp = curr; // store cur node
                curr = curr.left; // move cur to the top of the new tree
                temp.left = null; // original cur left be null, avoid infinite loops
            }
        }
        return res;
    }
}
</code></pre>
<p>复杂度分析<br>
时间复杂度：O(n)。 想要证明时间复杂度是O(n)，最大的问题是找到每个节点的前驱节点的时间复杂度。乍一想，找到每个节点的前驱节点的时间复杂度应该是 O(nlogn)，因为找到一个节点的前驱节点和树的高度有关。<br>
但事实上，找到所有节点的前驱节点只需要O(n) 时间。一棵 n 个节点的二叉树只有 n−1 条边，每条边只可能使用2次，一次是定位节点，一次是找前驱节点。<br>
故复杂度为O(n)。<br>
空间复杂度：O(n)。使用了长度为 n 的数组。</p>
<p><strong>后序遍历</strong><br>
给定一个二叉树，返回它的 后序 遍历。<br>
示例:<br>
输入: [1,null,2,3]<br>
1<br>
<br>
2<br>
/<br>
3</p>
<p>输出: [3,2,1]<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/binary-tree-postorder-traversal<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<pre><code>class Solution {
    vector&lt;int&gt; res;
public:
    vector&lt;int&gt; postorderTraversal(TreeNode* root) {
        if(root==NULL) 
            return res; 
        postorderTraversal(root-&gt;left);        
        postorderTraversal(root-&gt;right); 
        res.push_back(root-&gt;val); 
        return res; 
    }
};
</code></pre>
<p>官方迭代题解：<br>
方法 1：迭代<br>
算法<br>
从根节点开始依次迭代，弹出栈顶元素输出到输出列表中，然后依次压入它的所有孩子节点，按照从上到下、从左至右的顺序依次压入栈中。<br>
因为深度优先搜索后序遍历的顺序是从下到上、从左至右，所以需要将输出列表逆序输出。</p>
<pre><code>class Solution {
  public List&lt;Integer&gt; postorderTraversal(TreeNode root) {
    LinkedList&lt;TreeNode&gt; stack = new LinkedList&lt;&gt;();
    LinkedList&lt;Integer&gt; output = new LinkedList&lt;&gt;();
    if (root == null) {
      return output;
    }

    stack.add(root);
    while (!stack.isEmpty()) {
      TreeNode node = stack.pollLast();
      output.addFirst(node.val);
      if (node.left != null) {
        stack.add(node.left);
      }
      if (node.right != null) {
        stack.add(node.right);
      }
    }
    return output;
  }
}
</code></pre>
<p>复杂度分析<br>
时间复杂度：访问每个节点恰好一次，因此时间复杂度为 O(N)，其中 N 是节点的个数，也就是树的大小。<br>
空间复杂度：取决于树的结构，最坏情况需要保存整棵树，因此空间复杂度为 O(N)。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于 无法解析的外部符号 的问题]]></title>
        <id>https://lixin-ee.github.io//post/guan-yu-wu-fa-jie-xi-de-wai-bu-fu-hao-de-wen-ti</id>
        <link href="https://lixin-ee.github.io//post/guan-yu-wu-fa-jie-xi-de-wai-bu-fu-hao-de-wen-ti">
        </link>
        <updated>2019-11-07T09:34:58.000Z</updated>
        <content type="html"><![CDATA[<p>在做课后题13.48的时候定义了自己的String，在编译的时候遇到上述问题<br>
报错分别为<code>error LNK2001: 无法解析的外部符号 &quot;private: static class std::allocator&lt;char&gt; String::alloc&quot;</code><br>
以及</p>
<pre><code>error C4996: 'std::uninitialized_copy::_Unchecked_iterators::_Deprecate': Call to 'std::uninitialized_copy' with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
1&gt;  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory(102): note: 参见“std::uninitialized_copy::_Unchecked_iterators::_Deprecate”的声明
</code></pre>
<p>网上找到的解决方案为<br>
首先，C4996这个问题，解决方案：<br>
1、打开project的属性<br>
2、打开c/c++目录<br>
3、点击预处理器<br>
4、在右侧表单中编辑第一条“预处理器定义”<br>
5、将报错提示中的问题填入，我的时_SCL_SECURE_NO_WARNINGS<br>
6、应用确认<br>
或者在头文件前加上：#pragma warning(disable:4996)</p>
<p>接着LNK2001 无法解析的外部符号 &quot;private: static class std::allocator：<br>
原因在于第26行<code>static allocator&lt;char&gt; alloc;</code>，类内静态变量未初始化，删去static或者在类外定义</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表 21. 合并两个有序链表[简单]]]></title>
        <id>https://lixin-ee.github.io//post/lian-biao-21-he-bing-liang-ge-you-xu-lian-biao-jian-dan</id>
        <link href="https://lixin-ee.github.io//post/lian-biao-21-he-bing-liang-ge-you-xu-lian-biao-jian-dan">
        </link>
        <updated>2019-11-07T01:50:31.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>
<p>示例：<br>
输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>
输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/merge-two-sorted-lists<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>其实这个在STL源码里面有说过，就是6.5.1 set_union，主要是判断两个链表当前值的大小，先把小的值放到新链表里，如果有一个链表走到尾端了立即停止循环并将另一链表直接接到新链表后面。</p>
<pre><code>class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL)
            return l2;
        if(l2==NULL)
            return l1;
        ListNode* ehead=new ListNode(-1);
        ListNode* cur=ehead;
        while(l1!=NULL||l2!=NULL){
            if(l1-&gt;val&lt;=l2-&gt;val){
                cur-&gt;next=l1;
                l1=l1-&gt;next;
            }else{
                cur-&gt;next=l2;
                l2=l2-&gt;next;
            }
            cur=cur-&gt;next;
            if(l1==NULL){
                cur-&gt;next=l2;break;}
            if(l2==NULL){
                cur-&gt;next=l1;break;}
        }
        return ehead-&gt;next;
    }
};
</code></pre>
<p>当时做这道题的时候是在家里，没法对照着STL源码来写，对比了一下，主要的差异点在于<br>
1.最后接上链表的操作，其实可以直接两个都接上，因为肯定有一个为空，不需要判断两次<br>
2.set需要判断相等的情况，而链表不需要</p>
<p>然后看一下题解吧<br>
首先是递归的：<br>
思路<br>
标签：链表、递归<br>
这道题可以使用递归实现，新链表也不需要构造新节点，我们下面列举递归三个要素<br>
终止条件：两条链表分别名为 l1 和 l2，当 l1 为空或 l2 为空时结束<br>
返回值：每一层调用都返回排序好的链表头<br>
本级递归内容：如果 l1 的 val 值更小，则将 l1.next 与排序好的链表头相接，l2 同理O(m+n)，m 为 l1的长度，n 为 l2 的长度</p>
<pre><code>class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null) {
            return l2;
        }
        if(l2 == null) {
            return l1;
        }

        if(l1.val &lt; l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        } else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
}
</code></pre>
<p>复杂度分析</p>
<p>时间复杂度：O(n+m)。 因为每次调用递归都会去掉 l1 或者 l2 的头元素（直到至少有一个链表为空），函数 mergeTwoList 中只会遍历每个元素一次。所以，时间复杂度与合并后的链表长度为线性关系。</p>
<p>空间复杂度：O(n+m)。调用 mergeTwoLists 退出时 l1 和 l2 中每个元素都一定已经被遍历过了，所以n+m 个栈帧会消耗 O(n+m) 的空间。</p>
<p>方法 2：迭代<br>
想法<br>
我们可以用迭代的方法来实现上述算法。我们假设 l1 元素严格比 l2元素少，我们可以将 l2 中的元素逐一插入 l1 中正确的位置。</p>
<p>算法<br>
首先，我们设定一个哨兵节点 &quot;prehead&quot; ，这可以在最后让我们比较容易地返回合并后的链表。我们维护一个 prev 指针，我们需要做的是调整它的 next 指针。然后，我们重复以下过程，直到 l1 或者 l2 指向了 null ：如果 l1 当前位置的值小于等于 l2 ，我们就把 l1 的值接在 prev 节点的后面同时将 l1 指针往后移一个。否则，我们对 l2 做同样的操作。不管我们将哪一个元素接在了后面，我们都把 prev 向后移一个元素。</p>
<p>在循环终止的时候， l1 和 l2 至多有一个是非空的。由于输入的两个链表都是有序的，所以不管哪个链表是非空的，它包含的所有元素都比前面已经合并链表中的所有元素都要大。这意味着我们只需要简单地将非空链表接在合并链表的后面，并返回合并链表。</p>
<pre><code>class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* prehead = new ListNode(-1);
        ListNode* prev = prehead;
        while(l1 != NULL &amp;&amp; l2 != NULL) {
            if(l1-&gt;val &lt;= l2-&gt;val) {
                prev-&gt;next = l1;
                l1 = l1-&gt;next;
            } else {
                prev-&gt;next = l2;
                l2 = l2-&gt;next;
            }
            prev = prev-&gt;next;
        }
        prev-&gt;next = l1 != NULL ? l1 : l2;

        return prehead-&gt;next;
    }
};
</code></pre>
<p>时间复杂度：O(n+m) 。因为每次循环迭代中，l1 和 l2 只有一个元素会被放进合并链表中， while 循环的次数等于两个链表的总长度。所有其他工作都是常数级别的，所以总的时间复杂度是线性的。<br>
空间复杂度：O(1) 。迭代的过程只会产生几个指针，所以它所需要的空间是常数级别的。</p>
<p>果然还是递归优雅一点hhh</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ primer 第十三章 笔记+习题 13.6]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-shi-san-zhang-bi-ji-xi-ti-136</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-shi-san-zhang-bi-ji-xi-ti-136">
        </link>
        <updated>2019-11-06T12:48:42.000Z</updated>
        <content type="html"><![CDATA[<p>13.6对象移动<br>
使用移动而不是拷贝的另一个原因源于<strong>IO类或unique_ptr等类不应该被拷贝</strong>，包含不能被共享的资源<br>
在旧标准中，没有直接的方法移动对象，在新标准中，我们可以<strong>用容器保存不可以拷贝</strong>的类型，只要它们能被<strong>移动</strong>即可<br>
标准库容器、string和shared_ptr类既支持移动也支持拷贝，<strong>IO类和unique_ptr类可以移动但不可以拷贝</strong></p>
<p>13.6.1右值引用<br>
为了<strong>支持移动操作</strong>，新标准引入了一种新的引用类型—<strong>右值引用</strong>，其有一个重要的性质，<strong>只能绑定到一个将要销毁的对象</strong>，因此我们可以自由地将一个<strong>右值引用的资源移动到另一个对象中</strong><br>
一般而言，一个<strong>左值表达式</strong>表示的是一个<strong>对象的身份</strong>，一个<strong>右值表达式</strong>表示的是<strong>对象的值</strong><br>
对于常规引用（即左值引用），我们<strong>不能</strong>将其绑定到要求<strong>转换的表达式、字面常量或是返回右值的表达式</strong>。而右值引用完全相反，我们可以将一个右值引用绑定到这类表达式上，但<strong>不能将一个右值引用直接绑定到一个左值上</strong>。</p>
<p>左值引用可用的表达式：返回左值引用的函数，赋值、下标、解引用和<strong>前置递增/递减运算符</strong><br>
右值引用可用的表达式：返回非引用类型的函数，算术、关系、位以及<strong>后置递增/递减运算符</strong><br>
但是我们可以将一个const的左值引用绑定到右值表达式中。<br>
左值表达式与右值表达式的区别：左值有持久的状态，右值要么是字面常量，要么是在表达式求值过程中创建的临时对象<br>
由于右值引用只能绑定到临时对象，所以<strong>1.所引用的对象将要被销毁2.该对象没有其他用户</strong>。这两个特性意味着使用右值引用的代码可以自由接管所引用的对象的资源<br>
右值引用指向将要被销毁的对象，因此，我们可以从绑定到右值引用的对象窃取状态<br>
<strong>变量</strong>可以看作<strong>只有一个运算对象而没有运算符的表达式</strong>，所以变量表达式都是左值 <strong>（导致右值引用本身是一个左值！）</strong></p>
<p>原因：变量是持久的，直至离开作用域才被销毁<br>
虽然不能将一个右值引用<strong>直接绑定</strong>到一个左值上，但可以<strong>显式</strong>地将一个<strong>左值</strong>转换为对应的<strong>右值引用</strong>类型，我们还可以用过调用一个名为move的新标准库函数来获得绑定到左值上的右值引用，move调用告诉编译器：我们有一个左值，但是我们希望像一个右值一样处理它，但<strong>对某个左值调用move后</strong>就意味着承诺除了对该左值进行<strong>赋值或销毁外不再使用它</strong><br>
int &amp;&amp;rr3 = std::move(rr1); //完成转移后，rr1为移后源对象，相当于一次移动<br>
调用move后，我们不<strong>能再对移后源对象</strong>rr1的值<strong>做任何假设</strong>，<strong>只能对其进行销毁或赋予新值</strong>，不能使用一个移后源对象的值<br>
对move不提供using声明，直接调用std::move而不是move，<strong>避免潜在的名字冲突</strong></p>
<p>习题13.45<br>
右值引用只能绑定到一个将要销毁的对象，表示的是对象的值，可以将其绑定到要求转换的表达式、字面常量或是返回右值的表达式。右值短暂，要么是字面常量，要么是在表达式求值过程中创建的临时对象<br>
习题13.46<br>
r1 f()返回一个非引用类型的int临时变量，只能用右值引用&amp;&amp;<br>
r2 下标符号返回的是左值， 只能用左值引用&amp;<br>
r3 r1是右值引用，但是本质上是一个变量，也就是一个左值，所以得用左值引用&amp;<br>
r4 两者习题相乘等于算术符号，只能用 右值引用<br>
习题13.47 13.48</p>
<pre><code>String::String(const String &amp;s) {
	auto newdata = alloc_n_copy(s.begin(), s.end());
	elements = newdata.first;
	first_free = cap = newdata.second;
	cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;
}

String&amp; String::operator=(const String &amp;rhs) {
	auto data = alloc_n_copy(rhs.begin(), rhs.end());
	free();
	elements = data.first;
	first_free = cap = data.second;
	cout &lt;&lt; &quot;拷贝赋值函数&quot; &lt;&lt; endl;
	return *this;
}
</code></pre>
<p>非常神奇，第一次拷贝的时候用了1次拷贝构造函数，第二次用了2次，第三次用了3次，第四次用了4次，第五次用了5次。。。和我的想象差距非常大，似乎每次push_back时都需要将每个元素注意地拷贝构造（为啥？）</p>
<p>13.6.2移动构造函数和移动赋值运算符<br>
移动构造函数的<strong>第一个参数</strong>是该类类型的一个<strong>引用</strong>，不同于拷贝构造函数，这个引用参数是一个<strong>右值引用</strong>，与拷贝构造函数一样，<strong>任何额外参数都必须有默认实参</strong><br>
移动构造函数必须保证移后源对象处于可销毁状态（销毁它是无害的）（对移后源对象<strong>赋值nullptr</strong>），特别是在资源完成移动后，必须保证源对象必须不再指向被移动的资源—这些资源的所有权已经归属新创建的对象<br>
移动构造函数<strong>不分配任何新内存</strong>，它接管原对象中的内存后，将<strong>给定对象中的指针</strong>都置为<strong>nullptr</strong>，从而完成从给定对象的移动操作，此对象将继续存在，移后源对象将会被销毁<br>
因为移动操作只是接管资源，通常不需要分配任何资源，因此移动操作<strong>通常不会抛出任何异常</strong>，但除非告诉标准库我们的移动构造函数不会抛出异常，否则它会认为移动我们的类对象时可能会抛出异常，并且为了处理这种可能性而做一些额外的工作<br>
<strong>noexcept是我们承诺一个函数不抛出异常</strong>的一种方法。我们在一个函数的参数列表后指定noexcept。在一个构造函数中，noexcept出现在<strong>参数列表和初始化列表开始的冒号之间</strong>，同时我们必须在类头文件的<strong>声明和定义</strong>中（<strong>定义在类外时</strong>）<strong>都指定</strong>noexcept<br>
如果<strong>不对移动构造函数显式声明noexcept，就会自动使用拷贝构造函数</strong>而不是移动构造函数<br>
<strong>移动赋值运算符也应该标记为noexcept</strong><br>
在移动赋值运算符中，我们<strong>首先检查</strong>左侧对象与右侧右值引用<strong>是否指向同一地址</strong>，如果<strong>相同则不要做任何操作</strong>（<strong>自赋值检查</strong>），否则，<strong>先释放左侧</strong>运算对象所使用的内存，并接管给定对象的内存<br>
从<strong>一个对象移动数据并不会销毁此对象</strong>，但当我们编写一个移动操作时，必须确保移后源对象<strong>进入一个可析构状态</strong>，除此之外，移动操作还必须保证移后源对象仍然是<strong>有效的（对象有效是指可以安全地为其赋予新值或者可以安全地使用而不依赖于当前值）</strong> 同时移动操作无法保证移后源对象中留下的值，所以我们的程序不应该依赖于移后源对象中的数据<br>
总结：在移动操作之后，移后源对象必须保持有效、可析构的状态，但是用户不能对其值进行任何假设<br>
<strong>编译器不会为某些类合成移动操作</strong>，特别是当一个类定义了自己的拷贝构造函数、拷贝赋值运算符或者析构函数，<strong>编译器就不会为它合成移动构造函数和移动赋值运算符，反而类会通过正常的函数匹配从而使用对应的拷贝操作来代替移动操作</strong><br>
<strong>只有当一个类没有定义任何自己版本的拷贝控制成员，且类的每个非static数据成员都可以移动时，编译器才会为它合成移动构造函数或移动赋值运算符</strong>，编译器可以移动内置类型成员，如果一个成员是类类型，且该类有对应的移动操作，编译器也能移动这个成员<br>
与拷贝操作不同，<strong>移动操作永远不会隐式定义为删除的函数</strong>。但是如果我们显式地要求编译器生成=default的移动操作，且编译器不能移动所有成员，则编译器会将移动操作定义为删除的函数<br>
将合成的移动操作定义为删除的函数遵循以下原则：</p>
<p><strong>如果类定义了移动操作，则也必须定义拷贝操作</strong>，否则<strong>拷贝操作</strong>都会默认地被<strong>定义为删除的</strong><br>
如果一个类既有移动构造函数，也有拷贝构造函数，编译器使用普通的函数匹配规则<br>
来确定使用哪个构造函数，赋值操作的情况类似</p>
<p>如果一个类有一个拷贝构造函数但未定义移动构造函数，编译器不会合成移动构造函数，这意味着此类将有拷贝构造函数但不会有移动构造函数。如果一个类没有移动构造函数，函数匹配规则保证该类型的对象只会被拷贝，即使我们试图通过调用 move 來移动它们时也是如此<br>
值得注意的是，用拷贝构造函数代替移动构造函数几乎肯定是安全的</p>
<p>拷贝并交换赋值运算符和移动操作</p>
<p>对于同时定义了移动构造函数和拷贝构造函数的类，将其拷贝赋值运算符的参数改成非引用类型变为通用的赋值运算符，此时运算符有一个非引用参数.这意味着此参数要进行拷 贝初始化。依赖于实参的类型，拷贝初始化要么使用拷贝构造函数，要么使用移动构造函数——左值被拷贝，右值被移动。因此，单一的赋值运算符 就实现了拷贝赋值运算符和移动赋值运算符两种功能。</p>
<p>更新三/五法则<br>
所有五个应该看作一个整体：一般来说，如果一个类定义了任何一个拷贝操作，它就应该定义所有五个操作，并且某些类必须定义拷贝构造函数、拷贝赋值运算符和析构函数才能正确工作<br>
移动迭代器<br>
新标准库中定义了一种移动迭代器（move iterator )适配器<br>
一个移动迭代器通过改变给定迭代器的解引用运算符的行为来适配此迭代器<br>
一个普通迭代器的解引用运算符返回一个指向元素的左值。与其他迭代器不同，移动迭代器的，解引用运算符生成一个右值引用。<br>
通过调用标准库的 make_move_iterator 函数将一个普通迭代器转换为一个移动迭代器。此函数接受一个迭代器参数，返回一个移动迭代器。<br>
原迭代器的所有其他操作在移动迭代器中都照常工作。特别是，可以将移动迭代器传递给uninitialized_copy</p>
<p>uninitialized _ copy 对输入序列中的毎个元素调用 construct 来将元素&quot;拷贝&quot;到目的位置。此算法使用迭代器的解引用运算符从输入序列中提取元素。由于我们传递给它的是移动迭代器，因此解引用运算符生成的是一个右值引用，这意味着 construct 将使用移动构造函数来构造元素。<br>
值得注意的是，标准库不保证哪些算法适用移动迭代器，哪些不适用。由于移动一个对象可能销毁掉原对象，因此你只有在确信算法在为一个元素赋值或将其传递给一个用户 定义的函数后不再访问它时，才能将移动迭代器传递给算法。<br>
当我们调用move是，必须绝对确认移后源对象没有其他用户</p>
<p>习题13.49</p>
<pre><code>StrVec::StrVec(StrVec &amp;&amp;s) noexcept
	:elements(s.elements),first_free(s.first_free),cap(s.cap){
	s.elements = s.first_free = s.cap = nullptr;
}
StrVec &amp;StrVec::operator=(StrVec &amp;&amp;rhs)noexcept {
	if (&amp;rhs != this) {
		free();
		elements = rhs.elements;
		first_free = rhs.first_free;
		cap = rhs.cap;
		rhs.elements = rhs.first_free = rhs.cap = nullptr;
	}
	return *this;
}
</code></pre>
<p>注意：<br>
1.noexcept不能忘了，并且声明和定义的时候都需要<br>
2.不一定需要std::move<br>
3.自检使用<code>(&amp;rhs != this)</code>而不是<code>(rhs != *this)</code>或者<code>(rhs == *this)</code>，前者是指针可以直接比较，后者是类通常没有定义<br>
4.记得先free后转移，因为进行了自移动检查，所以可以直接free</p>
<p>习题13.50</p>
<pre><code>String::String(String &amp;&amp;s) noexcept: elements(s.elements),first_free(s.first_free),cap(s.cap){
	s.elements = s.first_free = s.cap = nullptr;
	cout &lt;&lt; &quot;移动构造函数&quot; &lt;&lt; endl;
}
String &amp;String::operator=(String &amp;&amp;rhs)noexcept {
	if (&amp;rhs != this) {
		free();
		elements = rhs.elements;
		first_free = rhs.first_free;
		cap = rhs.cap;
	}
	cout &lt;&lt; &quot;移动赋值函数&quot; &lt;&lt; endl;
	return *this;
}
</code></pre>
<p>验证代码</p>
<pre><code>	vector&lt;String&gt; vs;
	String s(&quot;123&quot;);
	vs.push_back(s);
	vs.push_back(&quot;123&quot;);
</code></pre>
<p>很明显地，s是一个恒存在的左值，所以动用了拷贝构造函数<br>
同时&quot;123&quot;是一个即将销毁的右值，所以动用了移动构造函数<br>
同时！第二次push_back除非reallocate将s拷贝的值移动时也是移动构造函数<br>
明显地函数会自动根据参数的类型选择相应的构造函数</p>
<p>习题13.51<br>
此时形参值将要被销毁或者只是一个局部对象，会被视为右值，会自动调用移动构造函数</p>
<p>习题13.52<br>
第一个赋值中右侧运算对象是一个左值，因此必须使用拷贝构造函数（注意此处的hp其实是未定义的，否则就是拷贝赋值函数了）<br>
第二个中强行move了hp2，将一个右值引用绑定到hp2上，此时拷贝构造函数和移动构造函数都可以，但是移动构造函数是精确匹配的。</p>
<p>习题13.53<br>
因为缺少移动赋值函数，每次拷贝赋值函数都需要进行交换拷贝操作，对于右值对象来说需要额外的内存和操作（先拷贝构造再拷贝赋值再销毁）</p>
<pre><code>Hasptr1(Hasptr1&amp;&amp; p) noexcept : ps(p.ps), i(p.i)
	{
		p.ps = 0;
		std::cout &lt;&lt; &quot;call move constructor&quot; &lt;&lt; std::endl;
	}
	// Hasptr&amp; operator=(Hasptr1 &amp;&amp;rhs) noexcept
	//{
	//    if (this != &amp;rhs)
	//    {
	//        delete ps;
	//        ps = rhs.ps;
	//        i = rhs.i;
	//        rhs.ps = nullptr;
	//        std::cout &lt;&lt; &quot;call move assignment&quot; &lt;&lt; std::endl;
	//    }

</code></pre>
<p>13.54<br>
<strong>如果类定义了移动操作，则也必须定义拷贝操作</strong>，否则<strong>拷贝操作</strong>都会默认地被<strong>定义为删除的</strong></p>
<p>13.6.3右值引用和成员函数<br>
一个成员函数最好同时提供拷贝和移动版本，一个版本接受一个指向 const 的左值引用，第二个版本接受一个指向非const 的右值引用。<br>
一般来说，我们不需要为函数操作定义接受一个 constX &amp;&amp;或是一个（普通的）X&amp;参数的版本。<br>
当我们希望从实参&quot;窃取&quot;数据时，通常传递一个右值引用。为了达到这一目的，实参不能是const的。类似的，从一个对象进行拷贝的操作不应该改变该对象。因此，通常不需要定义一个接受一个（普通的） X &amp;参数的版本。<br>
区分移动和拷贝的重载函数通常有一个版本接受一个 const T&amp;,而另一个版本接受一个 T &amp;&amp;。</p>
<p>右值和左值引用成员函数</p>
<p>旧标准中允许对一个右值进行赋值，为了维持向后兼容性，新标准库类仍然允许向右值赋值。但是，我们可能希望在自己的类中阻止这种用法。<br>
引用限定符：强制左侧运算对象（即this 指向的对象）是一个左值/右值。</p>
<p>引用限定符可以是&amp;或&amp;&amp;，分别指出 this 可以指向一个左值或右值<br>
引用限定符只能用于（非 static )成员函数，且必须同时出现在函数的声明和定义中<br>
对于&amp;限定的函数，我们只能将它用于左值；对于&amp;&amp;限定的函数，只能用于右值:</p>
<p>一个函数可以同时用 const 和引用限定。在此情况下，引用限定符必须跟随在const限定符之后</p>
<p>重载和引用函数<br>
就像一个成员函数可以根据是否有 const 来区分其重载版本一样，引用限定符也可以区分重载版本。而且，我们可以综合引用限定符和 const 来区分一个成员函数的重载版本</p>
<p>当我们对一个右值执行 sorted 时，它可以安全地直接对 data 成员进行排序。对象是一个右值，意味着没有其他用户，因此我们可以改变对象。当对一个 const 右值或一个左值执行 sorted 时，我们不能改变对象，因此就需要在排序前拷贝 data 。</p>
<p>如果一个成员函数有引用限定符，则具有相同参数列表的所有版本都必须有引用限定符。</p>
<p>习题13.55</p>
<pre><code>	void push_back(const string &amp;t)&amp; { data-&gt;push_back(t); }
	void push_back(string &amp;&amp;t)&amp;&amp; { data-&gt;push_back(t); }
</code></pre>
<p>习题13.56<br>
ret.sorted()会陷入无限循环（不断地调用左值形参版本）<br>
习题13.57<br>
会调用右值形参版本，如果没有右值形参版本，则陷入无限循环<br>
习题13.58</p>
<pre><code>class Foo{
public:
	Foo(std::vector&lt;int&gt; vi) :data(vi) {};
	Foo sorted() &amp;&amp; ;
	Foo sorted()const &amp;;
	std::vector&lt;int&gt; data;
};

Foo Foo::sorted() &amp;&amp; {
	std::sort(data.begin(), data.end());
	return *this;
}

Foo Foo::sorted()const &amp; {
	Foo ret(*this);
	sort(ret.data.begin(), ret.data.end());
	return ret;
}
</code></pre>
<p>56运行结果</p>
<pre><code>warning C4717: “Foo::sorted”: 如递归所有控件路径，函数将导致运行时堆栈溢出
</code></pre>
<p>57运行结果<br>
未注释右值形参版本的话输出正确，注释掉的话如下</p>
<pre><code>warning C4717: “Foo::sorted”: 如递归所有控件路径，函数将导致运行时堆栈溢出
</code></pre>
<p>习题感悟<br>
1.noexcept不能忘了，并且声明和定义的时候都需要<br>
2.不一定需要std::move<br>
3.自检使用<code>(&amp;rhs != this)</code>而不是<code>(rhs != *this)</code>或者<code>(rhs == *this)</code>，前者是指针可以直接比较，后者是类通常没有定义<br>
4.记得先free后转移，因为进行了自移动检查，所以可以直接free<br>
<strong>如果类定义了移动操作，则也必须定义拷贝操作</strong>，否则<strong>拷贝操作</strong>都会默认地被<strong>定义为删除的</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表 160. 相交链表[简单]]]></title>
        <id>https://lixin-ee.github.io//post/lian-biao-160-xiang-jiao-lian-biao-jian-dan</id>
        <link href="https://lixin-ee.github.io//post/lian-biao-160-xiang-jiao-lian-biao-jian-dan">
        </link>
        <updated>2019-11-06T01:26:08.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>编写一个程序，找到两个单链表相交的起始节点。</p>
</blockquote>
<p><img src="https://lixin-ee.github.io//post-images/1573004036742.png" alt=""><br>
<img src="https://lixin-ee.github.io//post-images/1573004040961.png" alt=""></p>
<blockquote>
<p>注意：<br>
如果两个链表没有交点，返回 null.<br>
在返回结果后，两个链表仍须保持原有的结构。<br>
可假定整个链表结构中没有循环。<br>
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/intersection-of-two-linked-lists<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题如果用哈希表的话是没啥难度的，所以重点在于如何满足O(n) 时间复杂度，且仅用 O(1) 内存。<br>
我最后想到的办法是制造一个环，从两个链表的头部同时出发，然后谁先达到尾部就直接把链表接到另一个的尾部<br>
但是在复习完有环链表的判断后才发现最后的相遇点不是一定在交点那里的，GG</p>
<p>纠结了太久了，直接看官方解答吧：</p>
<blockquote>
<p>方法一: 暴力法<br>
对链表A中的每一个结点 a_i	 ，遍历整个链表 B 并检查链表 B 中是否存在结点和 a_i  相同。<br>
复杂度分析<br>
时间复杂度 : (mn)。<br>
空间复杂度 : O(1)。</p>
<p>方法二: 哈希表法<br>
遍历链表 A 并将每个结点的地址/引用存储在哈希表中。然后检查链表 B 中的每一个结点 b_i 是否在哈希表中。若在，则 b_i为相交结点。<br>
复杂度分析<br>
时间复杂度 : O(m+n)。<br>
空间复杂度 : O(m) 或 O(n)。</p>
<p>方法三：双指针法<br>
创建两个指针 pA 和 pB，分别初始化为链表 A 和 B 的头结点。然后让它们向后逐结点遍历。<br>
当 pA 到达链表的尾部时，将它重定位到链表 B 的头结点 (你没看错，就是链表 B); 类似的，当 pB 到达链表的尾部时，将它重定位到链表 A 的头结点。<br>
若在某一时刻 pA 和 pB 相遇，则 pA/pB 为相交结点。<br>
想弄清楚为什么这样可行, 可以考虑以下两个链表: A={1,3,5,7,9,11} 和 B={2,4,9,11}，相交于结点 9。 由于 B.length (=4) &lt; A.length (=6)，pB 比 pA 少经过 2 个结点，会先到达尾部。将 pB 重定向到 A 的头结点，pA 重定向到 B 的头结点后，pB 要比 pA 多走 2 个结点。因此，它们会同时到达交点。<br>
如果两个链表存在相交，它们末尾的结点必然相同。因此当 pA/pB 到达链表结尾时，记录下链表 A/B 对应的元素。若最后元素不相同，则两个链表不相交。</p>
<p>复杂度分析<br>
时间复杂度 : O(m+n)。<br>
空间复杂度 : O(1)。</p>
</blockquote>
<p>妙啊！确实是简单题hhh，我只猜到了开头没猜到结局hhh，两者无论如何走过的路程都是一样的，所以当两者相等时退出循环判断，只需要判断最后的结点是否是NULL就好（甚至于都不用判断，直接返回就好）<br>
自己复现的代码如下：</p>
<pre><code>ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA==NULL||headB==NULL)
            return NULL;
        ListNode *cur1=headA,*cur2=headB;
        while(cur1!=cur2){
            cur1=cur1==NULL?headB:cur1-&gt;next;
            cur2=cur2==NULL?headA:cur2-&gt;next;
        }
        return cur1;
    }
</code></pre>
]]></content>
    </entry>
</feed>