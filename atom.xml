<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lixin-ee.github.io/</id>
    <title>Lixin-ee</title>
    <updated>2019-10-21T13:41:39.183Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lixin-ee.github.io/"/>
    <link rel="self" href="https://lixin-ee.github.io//atom.xml"/>
    <subtitle>好景在望。</subtitle>
    <logo>https://lixin-ee.github.io//images/avatar.png</logo>
    <icon>https://lixin-ee.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Lixin-ee</rights>
    <entry>
        <title type="html"><![CDATA[Math 29. 两数相除 难度：中等]]></title>
        <id>https://lixin-ee.github.io//post/math-29-liang-shu-xiang-chu-nan-du-zhong-deng</id>
        <link href="https://lixin-ee.github.io//post/math-29-liang-shu-xiang-chu-nan-du-zhong-deng">
        </link>
        <updated>2019-10-21T12:13:15.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。<br>
返回被除数 dividend 除以除数 divisor 得到的商。</p>
<p>示例 1:<br>
输入: dividend = 10, divisor = 3<br>
输出: 3<br>
示例 2:<br>
输入: dividend = 7, divisor = -3<br>
输出: -2<br>
说明:</p>
<p>被除数和除数均为 32 位有符号整数。<br>
除数不为 0。<br>
假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。本题中，如果除法结果溢出，则返回 2^31 − 1。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/divide-two-integers<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>难点和要点：<br>
1.如何实现除法并且不超时<br>
2.溢出的处理，主要在于-2^31除以-1的问题<br>
我的思路<br>
1.暴力法 或者 模仿传统的竖式除法，但是后者我没有想到应该如何进行从左往右提取数字（不能使用除法）<br>
2.关于溢出的处理，我的想法是设置int标志位，将被除数和除数都化为负数，此时只需要对-2^31除以-1进行特殊判断，然后最后根据int标志位来对结果取负。</p>
<p>暴力法代码：</p>
<pre><code>class Solution {
public:
    int divide(int dividend, int divisor) {
        int flag=0;
        if(dividend&gt;0){
            dividend=-dividend;
            ++flag;
        }
        if(divisor&gt;0){ divisor=-divisor; ++flag; }
        int res=0;
        while(dividend&lt;=divisor){
            dividend-=divisor;
            if(res==INT_MAX){
                if(flag==0)
                    return INT_MAX;
                else
                    return INT_MIN;
            }
            ++res;
        }
        if(flag==1)
            return -res;
        return res;
    }
};
</code></pre>
<p>最后暴力法还是白给了，2^32除以1超时了</p>
<p>所以直接看下网友题解：<br>
<img src="https://lixin-ee.github.io//post-images/1571663112931.png" alt=""><br>
代码：</p>
<pre><code>def divide(self, dividend: int, divisor: int) -&gt; int:
    sign = (dividend &gt; 0) ^ (divisor &gt; 0)
    dividend = abs(dividend)
    divisor = abs(divisor)
    count = 0
    #把除数不断左移，直到它大于被除数
    while dividend &gt;= divisor:
        count += 1
        divisor &lt;&lt;= 1
    result = 0
    while count &gt; 0:
        count -= 1
        divisor &gt;&gt;= 1
        if divisor &lt;= dividend:
            result += 1 &lt;&lt; count #这里的移位运算是把二进制（第count+1位上的1）转换为十进制
            dividend -= divisor
    if sign: result = -result
    return result if -(1&lt;&lt;31) &lt;= result &lt;= (1&lt;&lt;31)-1 else (1&lt;&lt;31)-1 
</code></pre>
<blockquote>
<p>题解二：<br>
直接举个例子如果被除数 15，除数 3，用我们上面的方法要遍历 5 次。<br>
接下来，我们使用不断 增倍除数<br>
比如：<br>
被除数 除数<br>
15 3<br>
12 6<br>
6 12<br>
发现除数 大于 被除数大，再重现开始<br>
6 3<br>
...<br>
3 3<br>
虽然这个例子遍历次数相等，对于较大的数，可以减少时间复杂度。</p>
</blockquote>
<pre><code>class Solution {
    public int divide(int dividend, int divisor) {
        int sign = (dividend ^ divisor) &gt;&gt; 31;
        long lDividend = Math.abs((long) dividend);
        long lDivisor = Math.abs((long) divisor);
        long res = 0;
        while (lDividend &gt;= lDivisor){
            long tmp = lDivisor;
            long i = 1;
            while (lDividend &gt;= tmp){
                lDividend -= tmp;
                res += i;
                i &lt;&lt;= 1;
                tmp &lt;&lt;= 1;
            }
        }
        if (sign == -1) res *= -1;
        if (res &lt; Integer.MIN_VALUE) return Integer.MIN_VALUE;
        else if (res &gt; Integer.MAX_VALUE) return Integer.MAX_VALUE;
        return (int)res;
        
    }
}
</code></pre>
<p>注意本题被系统归纳为二分查找类别，其实题解二算是一个二分查找法的逆向思维，二分查找法是从大值不断划分到1，逆向则是不断递增到大值。</p>
<pre><code>class Solution {
    public int divide(int dividend, int divisor) {
        /** 除数为零就返回-1 按照测试样例的要求写的*/
        if (divisor==0)
            return -1;
        if (dividend==0)
            return 0;
        /** -2147483648, -1 这个测试样例的确没想到，结果翻车了*/
        if (dividend==Integer.MIN_VALUE &amp;&amp; divisor==-1)
            return Integer.MAX_VALUE;
        /** 符号位的处理参考了大佬的异或处理方法*/
        boolean negetive= (dividend^ divisor)&lt;0;
        /** div_count 是当前divisor_tmp相对于divisor的倍数 */
        int res=0, div_count=1;
        /** 因为值溢出之后边界问题处理太繁琐了，直接将数值转为long省去麻烦 */
        long dividend_tmp= Math.abs((long)dividend);
        long divisor_tmp= Math.abs((long)divisor);
        
        /** 按标准的二分查找代码模板写的 */
        while (dividend_tmp&gt;= divisor_tmp) {
            dividend_tmp-= divisor_tmp;
            res+= div_count;
            
            if (dividend_tmp&lt; Math.abs(divisor))
                break;
            
            /** divisor_tmp无法倍增时，就将其初始化为divisor绝对值，重新开始下一轮倍增*/
            if (dividend_tmp- divisor_tmp&lt; divisor_tmp) {
                divisor_tmp= Math.abs(divisor);
                div_count=1;
                continue;
            } 
            
            /** 不断倍增divisor_tmp直到和dividend_tmp一样大*/
            divisor_tmp+= divisor_tmp;
            div_count+= div_count;
        }
        return negetive? 0-res: res;
    }
}
</code></pre>
<p>然后上述题解都是受边界问题影响，用long之类的其实是不合理的，我的改用负数计算反而还不错，题解中也有类似的</p>
<pre><code>class Solution {
    public int divide(int dividend, int divisor) {
        boolean sign = (dividend &gt; 0) ^ (divisor &gt; 0);
        int result = 0;
        if(dividend&gt;0) {
            dividend = -dividend;
        }
        if(divisor&gt;0) divisor = -divisor;
        while(dividend &lt;= divisor) {
            int temp_result = -1;
            int temp_divisor = divisor;
            while(dividend &lt;= (temp_divisor &lt;&lt; 1)) {
                if(temp_divisor &lt;= (Integer.MIN_VALUE &gt;&gt; 1))break;
                temp_result = temp_result &lt;&lt; 1;
                temp_divisor = temp_divisor &lt;&lt; 1;
            }
            dividend = dividend - temp_divisor;
            result += temp_result;
        }
        if(!sign) {
            if(result &lt;= Integer.MIN_VALUE) return Integer.MAX_VALUE;
            result = - result;
        }
        return result;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ primer 第十三章 笔记+习题 13.1-13.2]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-shi-san-zhang-bi-ji-xi-ti-131-132</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-shi-san-zhang-bi-ji-xi-ti-131-132">
        </link>
        <updated>2019-10-20T11:27:11.000Z</updated>
        <content type="html"><![CDATA[<p>13拷贝控制<br>
一个类包含几个基本操作：拷贝、移动、赋值和销毁，类定义了五个特殊的成员函数来控制这些操作：拷贝构造函数、拷贝赋值运算符、移动构造函数、移动赋值运算符和析构函数。其中构造函数定义了当用同类型的另一个对象初始化本对象时做什么，赋值运算符定义了将一个对象赋予同类型的另一个对象时做什么。析构函数定义了当此类型对象销毁时做什么。我们称这些操作为拷贝控制操作<br>
如果没有主动定义所有这些拷贝控制成员，编译器会自动为它定义缺失的操作</p>
<p>13.1拷贝、赋值与销毁<br>
13.1.1拷贝构造函数<br>
如果一个构造函数的第一个参数是自身类类型的引用，且<strong>任何额外参数都有默认值</strong>，则此构造函数是拷贝构造函数<br>
拷贝构造函数的<strong>第一个参数必须是一个引用类型</strong>，并且此参数几乎总是一个<strong>const的引用</strong><br>
拷贝构造函数在几种情况下都会被隐式地使用，因此拷贝构造函数通常<strong>不是explicit的</strong>（形参不可进行类型转换）<br>
一般情况下，合成的拷贝构造函数会将其参数的成员逐个拷贝到正在创建的对象中。对于某些类来说，合成拷贝构造函数用来<strong>阻止拷贝</strong>该类类型的对象<br>
每个成员的类型决定了它如何拷贝：类类型用自身的拷贝构造函数，内置类型的成员直接拷贝，<strong>数组无法直接拷贝</strong>，需要通过合成的拷贝构造函数逐个元素地拷贝<br>
当使用<strong>直接初始化</strong>时，我们实际上是要求编译器使用普通的函数匹配来选择与我们提供的参数<strong>最匹配的构造函数</strong>。<br>
而当我们使用<strong>拷贝初始化</strong>时，我们要求编译器将右侧运算对象拷贝到正在创建的对象中，如果需要的话还要进行类型转换<br>
<strong>拷贝初始化通常使用拷贝构造函数来完成</strong>，如果一个类有一个移动构造函数，则拷贝初始化有时会使用移动构造函数而非拷贝构造函数来完成<br>
部分类类型还会对它们所分配的对象使用拷贝初始化。比如标准库容器的初始化会调用<strong>insert或push成员</strong>，此时会使用<strong>拷贝初始化</strong>，与之相对的是<strong>emplace会使用直接初始化</strong><br>
在函数调用过程中，具有<strong>非引用类型的参数要进行拷贝初始化</strong><br>
拷贝构造函数被用来初始化非引用类类型参数，这一特性<strong>解释了为什么拷贝构造函数自己的参数必须是引用类型</strong>，如果参数不是引用类型，则调用永远也不会成功：因为如果参数不是引用类型的话，为了调用拷贝构造函数，我们必须拷贝它的实参，为了拷贝实参又需要调用拷贝构造函数，导致<strong>进入无限调用自身的死循环</strong><br>
当传递一个实参或从函数返回一个值时，我们不能隐式使用一个explicit构造函数（比如shared_ptr）<br>
在拷贝初始化过程中，编译器可以跳过拷贝/移动构造函数，直接创建对象</p>
<p>习题13.1<br>
如果一个构造函数的第一个参数时自身类类型的引用，且任何额外的参数都有默认值，则为拷贝构造函数。拷贝构造函数用于拷贝初始化。<br>
习题13.2<br>
拷贝构造函数的第一个参数不是引用类型，如果参数不是引用类型，则调用永远也不会成功：因为如果参数不是引用类型的话，为了调用拷贝构造函数，我们必须拷贝它的实参，为了拷贝实参又需要调用拷贝构造函数，导致<strong>进入无限调用自身的死循环</strong><br>
习题13.3<br>
StrBlob 需要拷贝 data这个智能指针，将会使引用计数+1，<br>
StrBlobPtr 需要拷贝1.wptr 弱指针复制不影响计数器 2.curr<br>
习题13.4<br>
1 point形参的拷贝<br>
2 local的初始化 和heap的初始化都用了拷贝构造函数<br>
3 point类型数组的花括号列表初始化<br>
4.返回类型的拷贝<br>
要点：heap的初始化虽然是直接初始化，当使用<strong>直接初始化</strong>时，我们实际上是要求编译器使用普通的函数匹配来选择与我们提供的参数<strong>最匹配的构造函数</strong>。<br>
习题13.5<br>
<code>HasPtr(const HasPtr &amp;hp) :ps(new string(*hp.ps))，i(hp.i){}</code></p>
<p>13.1.2拷贝赋值运算符<br>
与拷贝构造函数一样，如果拷贝赋值运算符<strong>未定义</strong>的话，编译器会为该类<strong>生成一个合成拷贝赋值运算符</strong><br>
<strong>重载运算符</strong>本质上是一个<strong>函数</strong>，其名字由operator关键字后接表示要定义的运算符的符号组成，比如赋值运算符就是一个名为operator=的函数<br>
重载运算符的参数表示运算符的运算对象，某些运算符包括赋值运算符都<strong>必须定义为成员函数</strong>，对于一个二元运算符，其<strong>左侧运算对象绑定到隐式的this参数</strong>，右侧运算对象作为显式参数传递<br>
非成员函数和成员函数的区别：成员函数有一个隐式的this参数可供调用。<br>
拷贝赋值运算符接受一个与其所在类<strong>相同类型</strong>的参数<br>
赋值运算符通常<strong>返回一个指向其左侧运算对象的引用</strong></p>
<p>习题13.6<br>
拷贝复制运算符，其实就是一个名为 operator= 的重载函数(operator后加表示要定义的运算符的符号)，重载运算符，有返回类型和参数，返回类型通常是左侧运算符的引用<br>
合成的拷贝赋值运算符将右侧运算对象的每个非static成员赋予左侧运算对象的对应成员（对于数组类型的成员，则逐个赋值数组元素），如果一个类未定义自己的拷贝赋值运算符或者希望进制该类型对象的赋值，就会生成一个合成拷贝赋值运算符。<br>
习题13.7<br>
StrBlob 需要拷贝 data这个智能指针，原指针值引用计数-1 新指针值引用计数+1，<br>
StrBlobPtr 需要拷贝1.wptr 弱指针复制不影响计数器 2.curr<br>
习题13.8<br>
<code>HasPtr &amp;operator=(const HasPtr &amp;hp){ 		string *s = new string(*hp.ps); 		delete ps; 		*ps = *s; 		delete s; 		i = hp.i; 		return *this; 	}</code><br>
记得要delete动态内存ps 和s</p>
<p>13.1.3析构函数<br>
析构函数释放对象使用的资源，并销毁对象的<strong>非static对象</strong><br>
析构函数是类的一个成员函数，名字由<strong>波浪号接类名</strong>构成，它<strong>没有返回值，也不接受参数</strong><br>
由于析构函数不接受参数，所以它<strong>不能被重载</strong>，一个特定的类只有唯一一个析构函数<br>
析构函数包含一个函数体和一个析构部分，<strong>首先执行函数体</strong>，然后销毁成员，成员<strong>按初始化顺序的逆序销毁</strong><br>
析构函数的<strong>函数体</strong>主要用于执行类设计者的<strong>收尾工作</strong><br>
<strong>析构部分是隐式的</strong>，与函数体无关，在执行析构函数体后再进行销毁操作。成员销毁时发生什么完全依赖于成员的类型，销毁类类型的成员需要执行成员自己的析构函数，<strong>内置类型没有析构函数</strong>，因此销毁内置类型成员什么也不需要<br>
<strong>隐式销毁一个内置指针类型的成员不会delete它所指向的对象</strong><br>
<strong>与普通指针不同，智能指针是类类型，所以具有析构函数</strong></p>
<p>当指向一个对象的<strong>引用或指针离开作用域，析构函数不会执行</strong><br>
编译器会自动定义一个合成析构函数</p>
<p>习题13.9<br>
析构函数是类的一个成员函数，名字由波浪号接类名构成，它没有返回值，也不接受参数。合成析构函数用来析构类的非static对象或者阻止该类型的对象被销毁，当一个类未定义自己的析构函数时编译器就会为它定义一个合成析构函数<br>
习题13.10<br>
StrBlob 需要将data这个智能指针的原指针值引用计数-1 ，如果引用数为0，调用智能指针类的析构函数<br>
StrBlobPtr 需要1.调用wptr的析构函数 弱指针删除不影响计数器 2.销毁内置类型对象curr<br>
习题13.11<br>
<code>~HasPtr() { delete ps; }</code><br>
习题13.12<br>
三次 item1，item2和accum<br>
知识点：当指向一个对象的引用或者指针离开作用域，析构函数并不会执行<br>
习题13.13</p>
<pre><code>struct X {
public:
	X(int i):val(i){ cout &lt;&lt; &quot;fisrt&quot; &lt;&lt; endl; }
	X(const X&amp; xi) :val(xi.val) { cout &lt;&lt; &quot;second&quot; &lt;&lt; endl; }
	X &amp;operator=(const X&amp; xi) { val = xi.val; cout &lt;&lt; &quot;third&quot; &lt;&lt; endl;};
	~X()
	{
		cout&lt;&lt; val &lt;&lt; &quot; yao mo de le!&quot; &lt;&lt; endl;
	}
	int val;
};

void print_cp(X x) {
	cout &lt;&lt; x.val &lt;&lt; endl;
}

void print_ref(X&amp; x) {
	cout &lt;&lt; x.val &lt;&lt; endl;
}

void test() {
	X x(10);
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	print_cp(x);
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	print_ref(x);
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	X *xp = new X(5);
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	delete xp;
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	vector&lt;X&gt; xv1(1,x);
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
	vector&lt;X&gt; xv2{ x };
	cout &lt;&lt; &quot;------------------------&quot; &lt;&lt; endl;
}

int main()
{
	test();
}
</code></pre>
<p>输出结果为<br>
<img src="https://lixin-ee.github.io//post-images/1571578562038.png" alt=""><br>
其中比较有意思的结果为：<br>
1.当使用<strong>直接初始化</strong>时，我们实际上是要求编译器使用普通的函数匹配来选择与我们提供的参数<strong>最匹配的构造函数</strong>。<br>
所以new表达式用的是默认构造函数而不是拷贝构造函数、然后vector的都是使用拷贝构造函数<br>
2.<br>
vector使用花括号里列表初始化时，还需要进行一次临时对象的拷贝构造函数，再对元素进行拷贝构造函数，所以一共使用了两次，然后初始化完了临时对象立即被销毁。<br>
注意 拷贝构造函数的参数必须是const 引用</p>
<p>13.1.4三/五法则<br>
在三个基本操作可以控制类的拷贝操作：拷贝构造函数、拷贝赋值运算符和析构函数<br>
<strong>如果这个类需要一个析构函数，我们几乎可以肯定它也需要一个拷贝构造函数和一个拷贝赋值运算符</strong><br>
例子：如果一个类需要在构造函数中分配动态内存，但自动合成的析构函数无法delete一个指针数据成员，所以需要定义一个析构函数来释放构造函数分配的内存。此时如果使用合成的拷贝构造函数和拷贝赋值运算符，这些函数简单拷贝指针成员，这意味着该类可能有多个对象指向相同的内存。<br>
所以如果一个类需要自定义析构函数，几乎可以肯定它也需要自定义拷贝赋值运算符和拷贝构造函数。同时需要拷贝构造函数就几乎可以肯定其需要拷贝赋值运算符，但例外地，<strong>需要拷贝构造函数或需要拷贝赋值运算符时，却不一定需要析构函数</strong></p>
<p>习题13.14<br>
将会输出相同的序号，因为合成拷贝构造函数只会复制mysn、<br>
习题13.15<br>
会，因为定义了拷贝构造函数后将不会使用合成的拷贝构造函数，但是由于函数的参数是非引用类型，所以新的输出结果中就会输出与拷贝构造也不同的序号（两次变更，连a都不同了）<br>
注意：不要忘记形参拷贝的拷贝构造<br>
习题13.16<br>
输出abc的唯一序号<br>
习题13.17</p>
<pre><code>int main()
{
	numbered a(10);
	numbered b = a, c = b;
	f(a), f(b), f(c);
}
</code></pre>
<ol>
<li></li>
</ol>
<pre><code>class numbered {
public:
	numbered(int i):mysn(i){}
	int mysn;
};

void f(numbered s) { cout &lt;&lt; s.mysn &lt;&lt; endl; }
</code></pre>
<p>输出 10 10 10<br>
2.</p>
<pre><code>class numbered {
public:
	numbered(int i):mysn(i){}
	numbered(const numbered &amp;n) :mysn(n.mysn) { ++mysn;}
	int mysn;
};

void f(numbered s) { cout &lt;&lt; s.mysn &lt;&lt; endl; }
</code></pre>
<p>输出11 12 13<br>
3.</p>
<pre><code>class numbered {
public:
	numbered(int i):mysn(i){}
	numbered(const numbered &amp;n) :mysn(n.mysn) { ++mysn;}
	int mysn;
};

void f(numbered &amp;s) { cout &lt;&lt; s.mysn &lt;&lt; endl; }
</code></pre>
<p>输出 10 11 12<br>
注意：不要忘记形参拷贝的拷贝构造</p>
<p>13.1.5使用=default<br>
我们可以通过将拷贝控制成员<strong>定义为=default来显式地要求编译器生成合成的版本</strong><br>
当我们使用=default时，合成的成员函数会<strong>隐式地声明为内联函数</strong>，如果不希望其定义为内联，则应该只在成员的<strong>类外定义使用=default</strong></p>
<p>我们只能对具有合成版本的成员函数使用=default（<strong>即默认构造函数或拷贝控制成员</strong>）</p>
<p>13.1.6阻止拷贝<br>
（大多数类还是应该定义默认构造函数、拷贝构造函数和拷贝赋值运算符，无论是隐式地还是显式地）<br>
对于<strong>某些类来说拷贝构造和拷贝赋值是不合理的，比如iostream不应该拷贝</strong>，以避免多个对象写入或读取相同的IO缓冲<br>
在新标准下，我们可以通过将拷贝构造函数和拷贝赋值运算符<strong>定义为删除的函数 来阻止拷贝</strong><br>
删除的函数：虽然声明了它，但是<strong>不能以任何的方式使用它</strong>，在函数的参数列表后面加上=delete来指出我们希望将其定义为删除的<br>
与=default不同，<strong>=delete必须出现在函数第一次声明的时候</strong>，另外我们可以<strong>对任何函数指定=delete</strong>，但=default只能用于合成的默认构造函数或拷贝控制成员<br>
但注意，<strong>析构函数可以使用=delete，但不应该使用，否则就无法销毁此类型的对象了。</strong><br>
对于一个删除了析构函数的类型（或者一个类有某个成员的类型删除了析构函数），编译器将<strong>不允许定义</strong>该类型的变量或临时对象<br>
对于删除了析构函数的类型，我们不能定义变量或成员，但可以<strong>动态分配这种类型的对象，但同时也不能释放这些对象</strong></p>
<p>这些规则的含义是，<strong>如果类有不能默认构造、拷贝、复制或销毁的数据成员，则对应的成员函数将被定义为删除的</strong></p>
<p>本质上，当不可能拷贝、赋值或销毁类的成员时，类的合成拷贝控制成员就被定义删除的<br>
在新标准发布前，类是通过将其拷贝构造函数和拷贝赋值运算符声明为private来阻止拷贝的<br>
声明但不定义一个成员函数是合法的，通过声明但不定义的private的拷贝构造函数，我们可以预先阻止任何拷贝该类型的企图，因为任何拷贝操作都会在编译阶段标记为错误的<br>
但在新标准下，应该使用=delete而不是声明为private</p>
<p>习题13.18</p>
<pre><code>class Employee {
public:
	Employee() { num = ++s_num; };
	Employee(string n) :name(n),num(++s_num) {}
	string name;
	int num;
	static int s_num;
};

int Employee::s_num = 0;
</code></pre>
<p>类的static成员一般都得在类外定义，并且需要加上类名作用域符号</p>
<p>习题3.19<br>
不需要拷贝构造函数，因为我们希望保证雇员的对象是唯一的，不应该出现多个证号相同的对象</p>
<pre><code>class Employee {
public:
	Employee() { num = ++s_num; };
	Employee(string n) :name(n),num(++s_num) {}
	Employee(const Employee &amp;) = delete;
	Employee&amp; operator=(const Employee &amp;) = delete;
	string name;
	int num;
	static int s_num;
};
</code></pre>
<p>注意，声明为delete或者default是属于一个声明，不需要形参名</p>
<p>习题13.20<br>
只会使用默认合成的拷贝构造函数、拷贝赋值运算符和析构函数<br>
习题13.21<br>
不需要，因为使用了智能指针类和内置类型，这两者都有自己的拷贝控制成员或者位拷贝，不需要额外的操作了。</p>
<p>13.2拷贝控制和资源管理<br>
<strong>管理类外资源的类</strong>必须定义<strong>拷贝控制成员</strong>，所以需要通过析构函数来释放对象所分配的资源（则也需要拷贝构造函数和拷贝赋值运算符）<br>
为了定义这种类，可以定义其拷贝操作，<strong>使类的行为看起来像一个值或者像一个指针</strong>。1.当类的行为<strong>像一个值</strong>时，<strong>拷贝副本和原对象是完全独立的</strong>，改变副本不会对原对象有任何影响，反之亦然。2.当指针的行为<strong>像一个指针</strong>时，则<strong>需要共享状态</strong>，副本和原对象使用相同的底层数据，改变副本也会改变原对象，反之亦然</p>
<p>习题13.22<br>
突然发现就是之前的代码</p>
<pre><code>class HasPtr
{
public:
	HasPtr(const HasPtr &amp;hs) : ps(new string(*hs.ps)), i(hs.i) {};
	~HasPtr() { delete ps; }
	HasPtr(const string &amp;s=string()):ps(new string(s)),i(0){}
	HasPtr &amp;operator=(const HasPtr &amp;hp) {
		string *s = new string(*hp.ps);
		delete ps;
		*ps = *s;
		delete s;
		i = hp.i;
		return *this;
	}
private:
	string *ps;
	int i;
};
</code></pre>
<p>13.2.1行为像一个值的类<br>
<strong>赋值运算符通常组合了析构函数和构造函数的操作</strong>。类似析构函数，赋值操作会<strong>销毁左侧运算对象的资源</strong>。类似拷贝构造函数，赋值操作会从右侧运算对象拷贝数据。<br>
拷贝赋值操作必须保证以正确的顺序运行，<strong>即使将一个对象赋予它自身，也能保证正确</strong>。所以必须保证赋值运算符是异常下安全的，即使异常发生时也能将左侧运算对象置于一个有意义的状态：！！所以<strong>在销毁左侧运算对象之前先拷贝右侧运算对象</strong></p>
<p>习题13.23<br>
没有差异hhhh，很神奇地我先拷贝了	<code>string *s = new string(*hp.ps);</code>然后再执行了<code>delete ps;</code>，符合在销毁左侧运算对象之前先拷贝右侧运算对象<br>
习题13.24<br>
未定义析构函数：ps属于动态内存指针，没有显式delete的话就会导致内存泄漏<br>
未定义拷贝构造函数：默认拷贝构造函数会复制指针值，容易造成空悬指针的现象<br>
习题13.25<br>
拷贝操作需要重新定义一个shared_ptr，而不是拷贝原来的shared_ptr，然后因为使用了智能指针类，它有自己的析构函数，所以不需要定义析构函数<br>
习题13.26</p>
<pre><code>class StrBlob {
	friend class StrBlobPtr;
public:

	StrBlob() :data(make_shared&lt;vector&lt;string&gt;&gt;()) {};
	StrBlob(initializer_list&lt;string&gt; i1) :data(make_shared&lt;vector&lt;string&gt;&gt;(i1)) {};
	StrBlob(const StrBlob &amp;sb):data(make_shared&lt;vector&lt;string&gt;&gt;(*sb.data)) {};
	StrBlob&amp; operator=(const StrBlob &amp;sb) {
		data = make_shared&lt;vector&lt;string&gt;&gt;(*sb.data);
	}
private:
	shared_ptr&lt;vector&lt;string&gt;&gt; data;
};
</code></pre>
<p>暂时只发现了这种比较暴力的share_ptr复制方法，不知道有没有更方便的一点的库函数复制方法。</p>
<p>习题感悟<br>
习题13.5<code>HasPtr(const HasPtr &amp;hp) :ps(new string(*hp.ps))，i(hp.i){}</code><br>
习题13.8<br>
<code>HasPtr &amp;operator=(const HasPtr &amp;hp){ 		string *s = new string(*hp.ps); 		delete ps; 		*ps = *s; 		delete s; 		i = hp.i; 		return *this; 	}</code>记得要delete动态内存ps 和s<br>
习题13.11<br>
<code>~HasPtr() { delete ps; }</code><br>
当指向一个对象的引用或者指针离开作用域，析构函数并不会执行<br>
当使用<strong>直接初始化</strong>时，我们实际上是要求编译器使用普通的函数匹配来选择与我们提供的参数<strong>最匹配的构造函数</strong>。<br>
注意 拷贝构造函数的参数必须是const 引用<br>
不要忘记形参拷贝和花括号初始化的拷贝构造<br>
vector使用花括号里列表初始化时，还需要进行一次临时对象的拷贝构造函数，再对元素进行拷贝构造函数，所以一共使用了两次，然后初始化完了临时对象立即被销毁。<br>
类的static成员一般都得在类外定义，并且需要加上类名作用域符号<br>
声明为delete或者default是属于一个声明，不需要形参名<br>
即使将一个对象赋予它自身，也能保证正确，所以<strong>在销毁左侧运算对象之前先拷贝右侧运算对象</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 415. 字符串相加 难度：简单]]></title>
        <id>https://lixin-ee.github.io//post/math-415-zi-fu-chuan-xiang-jia-nan-du-jian-dan</id>
        <link href="https://lixin-ee.github.io//post/math-415-zi-fu-chuan-xiang-jia-nan-du-jian-dan">
        </link>
        <updated>2019-10-20T11:04:32.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。</p>
<p>注意：<br>
num1 和num2 的长度都小于 5100.<br>
num1 和num2 都只包含数字 0-9.<br>
num1 和num2 都不包含任何前导零。<br>
你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/add-strings<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>要点难点：<br>
1.进位问题，因为不可以直接转化为整数，所以必须使用变量保存一个进位标志<br>
2.两数不等位<br>
3.需要在最前面补位<br>
我的思路<br>
因为这道题其实和前面的二进制相加非常像，不过这一次不能用异或代替相加，必须用ASCII的可加性来做，所以主要思路如下<br>
1.使用int值而不是bool值来表示进位（其实bool值也可以的，但是int值更加直观吧）<br>
2.补位，简单粗暴hhh（但是在后面的网友题解中可以看到更加优雅的解决方法）<br>
3.判断进位变量从而直接在前面补位</p>
<p>最终代码如下：</p>
<pre><code>class Solution {
public:
    string addStrings(string num1, string num2) {
       int len1=num1.size(),len2=num2.size();
        int len=len1-len2;
        if(len&gt;0)
            while(len)
                num2=&quot;0&quot;+num2,--len;
        else
            while(len)
                num1=&quot;0&quot;+num1,++len;
        len=num1.size();
        string res(len,'0');
        int flag=0;
        int temp=0;
        for(int i=len-1;i&gt;=0;--i){
            temp=(num1[i]-'0')+(num2[i]-'0')+flag;
            if(temp/10)
                flag=1;
            else
                flag=0;
            res[i]+=temp%10;
}
        if(flag)
            res=&quot;1&quot;+res;
        return res;
            
    }
};
</code></pre>
<p>然后来看一下网友题解：</p>
<blockquote>
<p>解题思路：<br>
算法流程： 设定 i，j 两指针分别指向 num1，num2 尾部，模拟人工加法；<br>
计算进位： 计算 carry = tmp // 10，代表当前位相加是否产生进位；<br>
添加当前位： 计算 tmp = n1 + n2 + carry，并将当前位 tmp % 10 添加至 res 头部；<br>
索引溢出处理： 当指针 i或j 走过数字首部后，给 n1，n2 赋值为 00，相当于给 num1，num2 中长度较短的数字前面填 00，以便后续计算。<br>
当遍历完 num1，num2 后跳出循环，并根据 carry 值决定是否在头部添加进位 11，最终返回 res 即可。</p>
<p>复杂度分析：<br>
时间复杂度 O(max(M,N))：其中 M，N 为 2 数字长度，按位遍历一遍数字（以较长的数字为准）；<br>
空间复杂度 O(1)：指针与变量使用常数大小空间。</p>
</blockquote>
<pre><code>class Solution {
    public String addStrings(String num1, String num2) {
        StringBuilder res = new StringBuilder(&quot;&quot;);
        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
        while(i &gt;= 0 || j &gt;= 0){
            int n1 = i &gt;= 0 ? num1.charAt(i) - '0' : 0;
            int n2 = j &gt;= 0 ? num2.charAt(j) - '0' : 0;
            int tmp = n1 + n2 + carry;
            carry = tmp / 10;
            res.append(tmp % 10);
            i--; j--;
        }
        if(carry == 1) res.append(1);
        return res.reverse().toString();
    }
}
</code></pre>
<p>其中比较优雅的就是对于补位的处理，不像我需要直接进行补位，可以在循环过程中就进行补位（通过将值设为0），注意最后有一个reverse的翻转操作。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 43. 字符串相乘 难度：中等]]></title>
        <id>https://lixin-ee.github.io//post/math-43-zi-fu-chuan-xiang-cheng</id>
        <link href="https://lixin-ee.github.io//post/math-43-zi-fu-chuan-xiang-cheng">
        </link>
        <updated>2019-10-20T02:43:23.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p>
<p>示例 1:<br>
输入: num1 = &quot;2&quot;, num2 = &quot;3&quot;<br>
输出: &quot;6&quot;<br>
示例 2:<br>
输入: num1 = &quot;123&quot;, num2 = &quot;456&quot;<br>
输出: &quot;56088&quot;<br>
说明：</p>
<p>num1 和 num2 的长度小于110。<br>
num1 和 num2 只包含数字 0-9。<br>
num1 和 num2 均不以零开头，除非是数字 0 本身。<br>
不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/multiply-strings<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>昨天在医院看了一下没什么思路<br>
主要的难点在于<br>
1.溢出问题，110位，单纯地转化为整数肯定不行的<br>
2.以一个数为标准，对另一个数进行逐位计算的话比较麻烦，也容易有溢出的风险</p>
<p>然后来看一下网友题解</p>
<blockquote>
<p>转载借鉴自 https://leetcode.com/problems/multiply-strings/discuss/17605/Easiest-JAVA-Solution-with-Graph-Explanation<br>
<img src="https://lixin-ee.github.io//post-images/1571540288082.png" alt=""></p>
</blockquote>
<p>这个思路应该是最好的解答了，将两个数都进行逐位计算，然后将影响到的两位进行处理（一开始我想不明白为什么不用考虑res[i+j]的进位，后来才发现主要是后一位有进位，前一位是不用担心进位问题的。）<br>
按照思路实现如下:</p>
<pre><code>class Solution {
public:
    string multiply(string num1, string num2) {
        int len1=num1.size();
        int len2=num2.size();
        string res(len1+len2,'0');
        for(int i=len1-1;i&gt;=0;--i)
            for(int j=len2-1;j&gt;=0;--j){
                int temp=(res[i+j+1]-'0')+(num1[i]-'0')*(num2[j]-'0');
                res[i+j+1]=temp%10+'0';
                res[i+j]+=temp/10;
            }
        int i=0;
        while(i!=len1+len2-1&amp;&amp;res[i]=='0')
            ++i;
        res=res.substr(i,len1+len2-i);
        return res;
    }
};
</code></pre>
<p>剩下的就来看一下普通竖式版的题解吧<br>
方法：普通竖式<br>
<img src="https://lixin-ee.github.io//post-images/1571540602407.png" alt=""><br>
遍历 num2 每一位与 num1 进行相乘，将每一步的结果进行累加。</p>
<p>注意：<br>
num2 除了第一位的其他位与 num1 运算的结果需要补0<br>
计算字符串数字累加其实就是415. 字符串相加</p>
<pre><code>class Solution {
    /**
    * 计算形式
    *    num1
    *  x num2
    *  ------
    *  result
    */
    public String multiply(String num1, String num2) {
        if (num1.equals(&quot;0&quot;) || num2.equals(&quot;0&quot;)) {
            return &quot;0&quot;;
        }
        // 保存计算结果
        String res = &quot;0&quot;;
        
        // num2 逐位与 num1 相乘
        for (int i = num2.length() - 1; i &gt;= 0; i--) {
            int carry = 0;
            // 保存 num2 第i位数字与 num1 相乘的结果
            StringBuilder temp = new StringBuilder();
            // 补 0 
            for (int j = 0; j &lt; num2.length() - 1 - i; j++) {
                temp.append(0);
            }
            int n2 = num2.charAt(i) - '0';
            
            // num2 的第 i 位数字 n2 与 num1 相乘
            for (int j = num1.length() - 1; j &gt;= 0 || carry != 0; j--) {
                int n1 = j &lt; 0 ? 0 : num1.charAt(j) - '0';
                int product = (n1 * n2 + carry) % 10;
                temp.append(product);
                carry = (n1 * n2 + carry) / 10;
            }
            // 将当前结果与新计算的结果求和作为新的结果
            res = addStrings(res, temp.reverse().toString());
        }
        return res;
    }

    /**
     * 对两个字符串数字进行相加，返回字符串形式的和
     */
    public String addStrings(String num1, String num2) {
        StringBuilder builder = new StringBuilder();
        int carry = 0;
        for (int i = num1.length() - 1, j = num2.length() - 1;
             i &gt;= 0 || j &gt;= 0 || carry != 0;
             i--, j--) {
            int x = i &lt; 0 ? 0 : num1.charAt(i) - '0';
            int y = j &lt; 0 ? 0 : num2.charAt(j) - '0';
            int sum = (x + y + carry) % 10;
            builder.append(sum);
            carry = (x + y + carry) / 10;
        }
        return builder.reverse().toString();
    }
}
</code></pre>
<p>复杂度分析<br>
时间复杂度：O(M N)。 M,N分别为 num1 和 num2的长度<br>
空间复杂度：O(M+N)。用于存储计算结果。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 67. 二进制求和]]></title>
        <id>https://lixin-ee.github.io//post/math-67-er-jin-zhi-qiu-he</id>
        <link href="https://lixin-ee.github.io//post/math-67-er-jin-zhi-qiu-he">
        </link>
        <updated>2019-10-19T09:26:29.000Z</updated>
        <content type="html"><![CDATA[<p>难度：简单</p>
<blockquote>
<p>给定两个二进制字符串，返回他们的和（用二进制表示）。<br>
输入为非空字符串且只包含数字 1 和 0。</p>
<p>示例 1:<br>
输入: a = &quot;11&quot;, b = &quot;1&quot;<br>
输出: &quot;100&quot;<br>
示例 2:<br>
输入: a = &quot;1010&quot;, b = &quot;1011&quot;<br>
输出: &quot;10101&quot;</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/add-binary<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>本题的难点在于<br>
1.字符串不等长<br>
2.进位问题，可能会导致两次进位和头部进位<br>
我的解题思路<br>
1.对于难点1我没啥好的思路，只能是判断位数差异在前面补0（后来发现网友题解也没有比较好的解决方法）<br>
2.对于进位问题我本来是想用istringstream来解决的，但是stringstream只能从左到右处理，所以并不适合本次题目的要求。所以最后用了bool变量来标记进位问题<br>
3.对于计算问题有两种，一种是利用ASCII码可加特性，另外一种就是异或了，为了可读性我用判断条件完成伪异或。<br>
最终代码：</p>
<pre><code>class Solution {
public:
    string addBinary(string a, string b) {
        bool flag=false;
        int lendiff=a.size()-b.size();
        if(lendiff&gt;0)
            while(lendiff)
                b=&quot;0&quot;+b,--lendiff;
        else
            while(lendiff)
                a=&quot;0&quot;+a,++lendiff;
        for(int i=a.size()-1;i&gt;=0;--i){
            if(a[i]!=b[i])
                a[i]='1';
            else
                a[i]='0';
            if(flag){
                a[i]=('1'-a[i])+'0';
                if(b[i]=='0'&amp;&amp;a[i]=='1')
                    flag=false;
            }else if(b[i]=='1'&amp;&amp;a[i]=='0')
                    flag=true;     
        }
        if(flag)
            a=&quot;1&quot;+a;
        return a;
    }
};
</code></pre>
<p>比较值得注意的主要是进位判断这一段</p>
<pre><code>            if(flag){
                a[i]=('1'-a[i])+'0';
                if(b[i]=='0'&amp;&amp;a[i]=='1')
                    flag=false;
            }else if(b[i]=='1'&amp;&amp;a[i]=='0')
                    flag=true;     
        }
</code></pre>
<p>首先判断上一次的进位<br>
1.如果上一次有进位，那么a就必须先翻转，然后此时只有一种情况不需要继续进位，那就是一开始两者都为0（注意此时a已经变为1了）<br>
2.如果上一次没有进位，此时只有一种情况需要进位，两者同时为1（同样地此时a已经变为0了）</p>
<p>最后看看网友题解：</p>
<p>解题思路：<br>
二进制求和，满二进一</p>
<blockquote>
<p>首先让两个字符串等长，若不等长，在短的字符串前补零，否则之后的操作会超出索引。<br>
然后从后到前遍历所有的位数，同位相加，这里有一个点，用的是字符相加，利用 ASCII 码，字符在内部都用数字表示，我们不需要知道具体数值，但可知 ‘0’-‘0’ = 0， ‘0’+1=‘1’，以此类推 。字符的加减，大小比较，实际上都是内部数字的加减，大小比较<br>
判断相加后的字符，若大于等于字符 ‘2’，下一位需要进一<br>
第 0 位数的相加在这里是单独处理的，因为它可能涉及到字符的插入（即是否需要在最前面加一位数 ‘1’</p>
</blockquote>
<pre><code>class Solution {
public:
    string addBinary(string a, string b) {
        int al = a.size();
        int bl = b.size();
        while(al &lt; bl) //让两个字符串等长，若不等长，在短的字符串前补零，否则之后的操作会超出索引
        {
            a = '0' + a;
            ++ al;
        }
        while(al &gt; bl)
        {
            b = '0' + b;
            ++ bl;
        }
        for(int j = a.size() - 1; j &gt; 0; -- j) //从后到前遍历所有的位数，同位相加
        {
            a[j] = a[j] - '0' + b[j];
            if(a[j] &gt;=  '2') //若大于等于字符‘2’，需要进一
            {
                a[j] = (a[j] - '0') % 2 + '0';
                a[j-1] = a[j-1] + 1;
            }
        }
        a[0] = a[0] - '0' + b[0]; //将ab的第0位相加
        if(a[0] &gt;= '2') //若大于等于2，需要进一
        {
            a[0] = (a[0] - '0') % 2 + '0';
            a = '1' + a;
        }
        return a;
    }
};

</code></pre>
<p>比较巧妙的是利用了ascii码的加法特性，然后将进位融入到判断中，需要注意的是必须把第一位提取出来进行处理。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 258. 各位相加]]></title>
        <id>https://lixin-ee.github.io//post/math-258-ge-wei-xiang-jia</id>
        <link href="https://lixin-ee.github.io//post/math-258-ge-wei-xiang-jia">
        </link>
        <updated>2019-10-18T02:06:15.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。</p>
<p>示例:<br>
输入: 38<br>
输出: 2<br>
解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。<br>
进阶:<br>
你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/add-digits<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>难点：如何在常数时间复杂度完成<br>
思路：最后还是只想出了暴力法，其实就是判断当前值是否为个位数，如果不是的话就进入循环，循环内依次把10的余数和放到临时变量内，再把临时变量赋给当前值。</p>
<pre><code>class Solution {
public:
    int addDigits(int num) {
        while(num&gt;=10){
            int temp=0;
            while(num&gt;0){
                temp+=num%10;
                num=num/10;
            }
            num=temp;
        }
        return num;
    }
};
</code></pre>
<p>提前预知到常数时间肯定是用了数学思路的了，下面是网友题解<br>
1.</p>
<blockquote>
<p>O(1) 数学推理：设某个数字的字符串表示为'abc'，则这个数字代表a<em>100 + b</em>10 + c，转换后成为a + b + c，可见每次转换相当于把原数字减去a<em>99 + b</em>9 = 9 * (a*11 + b)，可以推出只要高于个位的位置上有数字，算法就会减去一个小于原数字的9的倍数，这就相当于数字 % 9。但9 % 9 = 0，而 9 本身就没有十位，因此需要考虑原数字是 0 或 9 的倍数的特殊情况<br>
首先计算num % 9，若结果为 0 则考虑num本身是否为 0，若不为 0 返回 9</p>
</blockquote>
<ol start="2">
<li></li>
</ol>
<blockquote>
<p>假设一个三位数整数n=100<em>a+10</em>b+c,变化后addn=a+b+c；<br>
两者的差值n-addn=99a+9b，差值可以被9整除，说明每次缩小9的倍数<br>
那么我们可以对res=num%9，若不为0则返回res，为0则返回9</p>
</blockquote>
<blockquote>
<p>class Solution {<br>
public:<br>
int addDigits(int num) {<br>
if(num&gt;9)<br>
{<br>
num=num%9;<br>
if(num==0)<br>
return 9;<br>
}<br>
return num;<br>
}<br>
};</p>
</blockquote>
<p>嗯...我是来码代码的别人是来学数学的hhh</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 8. 字符串转换整数 (atoi)]]></title>
        <id>https://lixin-ee.github.io//post/math-8-zi-fu-chuan-zhuan-huan-zheng-shu-atoi</id>
        <link href="https://lixin-ee.github.io//post/math-8-zi-fu-chuan-zhuan-huan-zheng-shu-atoi">
        </link>
        <updated>2019-10-17T11:58:20.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。<br>
首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。<br>
当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。<br>
该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。<br>
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。<br>
在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>
<p>说明：<br>
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>
<p>示例 1:<br>
输入: &quot;42&quot;<br>
输出: 42<br>
示例 2:<br>
输入: &quot;   -42&quot;<br>
输出: -42<br>
解释: 第一个非空白字符为 '-', 它是一个负号。<br>
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。<br>
示例 3:<br>
输入: &quot;4193 with words&quot;<br>
输出: 4193<br>
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。<br>
示例 4:<br>
输入: &quot;words and 987&quot;<br>
输出: 0<br>
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。<br>
因此无法执行有效的转换。<br>
示例 5:<br>
输入: &quot;-91283472332&quot;<br>
输出: -2147483648<br>
解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。<br>
     因此返回 INT_MIN (−2^31) 。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/string-to-integer-atoi<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题其实也蛮奇葩的，主要的要点或者说难点在于<br>
1.去除前面的所有空格<br>
2.判断第一个非空格字符，如果是加号或者符号的话视为符号，如果是数字的话就开始读入，如果是其他字符的话直接全部木大<br>
3.读取数字进行判断，主要是两个判断 一个是溢出判断 一个是非数字字符的判断<br>
我的思路如下：<br>
1.利用string的find搜索语句，先用.find_fisrt_of，再用.find_fisrt_not_of，但是这种方法耗时比较厉害，而且判断条件特别多，需要对返回值进行判断。<br>
2.使用范围for语句，这个比较理想，但是最后发现会导致for内部的判断条件特别多<br>
3.普通for循环语句，使用一个变量i记录，把空格检测-正负号检测-数字检测分离开来。<br>
最终代码</p>
<pre><code>class Solution {
public:
    int myAtoi(string str) {
        int res=0;
        bool neg=false;
        int i=0;
        for(;i&lt;str.size();++i)
            if(str[i]!=' ')
                break;    
        if(str[i]!='-'&amp;&amp;str[i]!='+'&amp;&amp;((str[i]-'0'&gt;9)||('0'-str[i]&gt;0)))
            return 0;
        if(str[i]=='-'){
            neg=true;
            ++i;
        }else if(str[i]=='+')
            ++i;
        for(;i&lt;str.size();++i){
            if((str[i]-'0'&gt;9)||('0'-str[i]&gt;0))
                break;
            if(neg){
                if(res&gt;INT_MAX/10||(res==INT_MAX/10&amp;&amp;(str[i]-'0')&gt;=8))
                    return -2147483648;
            }else if(res&gt;INT_MAX/10||(res==INT_MAX/10&amp;&amp;(str[i]-'0')&gt;=7))
                  return 2147483647;
            res=res*10+(str[i]-'0');
        }
        if(neg)
            return -res;
        return res;
    }
};
</code></pre>
<p>然后想疯狂吐槽leetcode的用例，比如 +-2 这种情况是不能通过的，所以必须修改一下判断条件<br>
然后看一下题解<br>
正则表达式就没啥好说的了，意义不大<br>
然后就是stringstream，说实话虽然很巧妙，但是其实背后是很多库函数的结果，我觉得有点背离题目的原意了，不过还是贴上来吧</p>
<pre><code>class Solution {
public:
    int myAtoi(string str) {
        while(*str.begin() == ' ') str.erase(str.begin());
        if(str == &quot;&quot;) return 0;
        stringstream ss;
        ss&lt;&lt;str;
        int n;
        ss&gt;&gt;n;
        return n;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ C++ primer 第十二章 笔记+习题 12.2-12.3]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-shi-er-zhang-bi-ji-xi-ti-122-123</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-shi-er-zhang-bi-ji-xi-ti-122-123">
        </link>
        <updated>2019-10-17T03:19:19.000Z</updated>
        <content type="html"><![CDATA[<p>12.2动态数组<br>
当容器需要重新分配内存时，需要一次性为很多元素分配内存，C++语言和标准库为此提供了两种一次分配一个对象数组的方法<br>
1.C++语言定义了另一种new表达式语法，可以分配并初始化一个对象数组<br>
2.标准库中包含一个名为allocator的类，允许我们将<strong>分配和初始化分离</strong>，使用allocator有更好的性能和更灵活的内存管理能力<br>
大多数应用应该使用标准库容器而不是动态分配的数组，使用容器更为简单、更不容易出现内存管理错误并且可能有更好的性能<br>
分配动态数组的类则必须定义自己版本的操作，在拷贝、复制以及销毁对象时管理所关联的内存<br>
12.2.1 new和数组<br>
为了让new分配一个对象数组，我们要在类型名之后跟一对方括号，在其中指明要分配的对象的数目</p>
<p>方括号中的大小必须是整型，<strong>但不必是常量</strong><br>
也可以用一个表示数组类型的类型别名typedef、using来分配一个数组 这样new表达式中就不需要方括号了</p>
<p>当用new分配一个数组的时，我们并未得到一个数组类型的对象，而是得到一个<strong>数组元素类型的指针</strong>，即使我们使用类型别名定义了一个数组类型，new也不会分配一个数组类型的对象。new返回的是一个元素类型的指针<br>
由于分配的内存并不是一个数组类型，因此<strong>不能对动态数组调用begin或end</strong>，处于相同的原因，<strong>也不能用范围for语句</strong>来处理（所谓的）动态数组中的元素<br>
！！！要记住我们所说的动态数组<strong>实质上并不是数组类型</strong><br>
默认情况下new分配的对象不管是单个分配的还是数组中的都是<strong>默认初始化</strong>的，可以对数组中元素进行<strong>值初始化，方法是在大小之后跟一对空括号</strong></p>
<p>在新标准中，我们还可以提供一个<strong>元素初始化器的花括号列表</strong></p>
<p>如果初始化器数目大于元素数目，则new表达式失败，不会分配任何内存，在上例中new会抛出一个类型为bad_array_new_length的异常，类似bad_alloc，此类型定义在头文件new中<br>
但我们<strong>不能在括号中给出初始化器，这意味着不能使用auto分配数组，但是可以使用花括号</strong>（意思是括号中不能用变量等让auto自动判断 例如<code>auto S = new string[10]{S1,S2}</code>合法，但是<code>auto S = new string[10](S1)</code>不合法）<br>
虽然我们不能创建一个大小为0的静态数组对象，但是当n等于0时，调用<code>new[n]</code>是合法的<br>
当我们用new分配一个大小为0的数组时，new返回一个<strong>合法的非空指针</strong>。此指针保证与new返回的其他任何指针都不相同。我们可以像<strong>使用尾后迭代器一样</strong>使用这个指针，但此指针<strong>不能解引用</strong>，因为它不指向任何元素<br>
为了释放动态数组，我们使用一种特殊形式的delete——<strong>在指针前加上一个方括号对</strong></p>
<p>数组中的元素会按<strong>逆序被销毁</strong>，即最后一个元素首先被销毁<br>
空方括号对是必需的，它指示编译器此指针指向一个对象数组的第一个元素，如果在delete一个指向数组的指针时忽略了方括号，其行为是未定义的<br>
即使当我们使用一个类型别名来定义一个数组类型时，也必需在delete数组时使用方括号对，因为指针永远指向一个对象数组的首元素<br>
如果用一个unique_ptr来管理动态数组，我们必须在unique_ptr的对象类型后面跟一对方括号</p>
<p>当unique_ptr（up）销毁它管理的指针时，会自动使用<strong>delete[ ]</strong><br>
当一个unique_ptr指向一个数组时，我们<strong>不能使用点和箭头成员运算符</strong>。毕竟unique_ptr指向的是<strong>一个数组而不是单个对象，但我们可以使用下标运算符</strong>来访问数组中的元素</p>
<p>与unique_ptr不同，<strong>shared_ptr不直接支持管理动态数组</strong>，如果希望使用shared则<strong>必须提供自己定义的删除器</strong><br>
<strong>shared_ptr未定义下标运算符</strong>，而且智能指针类型<strong>不支持指针算术运算</strong>，因为为了访问数组中的元素必须用get获取一个内置指针，然后用它来访问数组元素</p>
<p>习题12.23</p>
<pre><code>int main()
{
	char *c1{ &quot;123&quot; };
	char *c2{ &quot;456&quot; };
	char *c = new char[strlen(c1)+ strlen(c2)+1];
	strcpy(c, c1);//复制
	strcat(c, c2);//接上
	delete[]c;
}
</code></pre>
<p>习题12.24</p>
<pre><code>int main()
{
	string s;
	cin &gt;&gt; s;
	char *c = new char[s.size()+1];
	strcpy(c, s.c_str());//复制
	delete[]c;
}
</code></pre>
<p>其实我不是很明白这道题的意思，特别是字符串和超出长度的行为？不是可以动态分配么？<br>
习题10.25<br>
直接<code>delete[]pa;</code>或者<code>delete[10]pa;</code></p>
<p>12.2.2allocator类<br>
new有一些灵活性上的局限，其中一方面表现为它将<strong>内存分配和对象构造</strong>结合在一起，无法将分配和构造分开操作，所以会导致创建一些永远也用不到的冗余对象，同时可能导致需要使用的对象被赋值了两次（分配构造时一次，使用时一次）<br>
同时使用new时没有默认构造函数的类就不能动态分配数组了<br>
标准库allocator类定义在头文件memory中，它帮助我们将内存分配和对象构造分离开来<br>
类似于vector，<strong>allocator是一个模板</strong>，定义allocator对象时需要<strong>指明分配的对象类型</strong>，当其分配内存时，它就会自动根据类型来确定内存大小和对齐位置</p>
<p>allocator分配的内存是未构造的，我们按需要在此内存中构造对象<br>
construct成员函数接受一个指针和零个或多个额外参数。在给定位置构造一个元素，这些额外参数必须是与构造对象的类型相匹配的合法的初始化器<br>
还未构造的情况就使用原始内存是错误的，为了使用allocate返回的内存，我们必须使用construct构造对象，使用未构造的内存是未定义的<br>
当我们用完对象后，必须对每个构造的元素调用destroy来销毁他们，函数destroy接受一个指针，对指向的对象执行析构函数<br>
<code>allocator&lt;T&gt; -&gt; allocate -&gt; construct -&gt; destroy -&gt; deallocate</code></p>
<p><strong>只能对真正构造了的元素进行destroy操作</strong><br>
我们<strong>传递给deallocate的指针不能为空</strong>。它必须指向allocate分配的内存，而且传递给deallocate的大小参数必须与调用allocated分配内存时提供的<strong>大小参数具有一样的值(但是delete不需要，可以为空指针，也不需要指定大小)</strong><br>
标准库还为allocator类定义了两个伴随算法，可以在未初始化内存（<strong>亦即allocate了仍未construct的内存</strong>）中创建对象，它们都定义在memory中</p>
<p>uninitialized_copy返回递增后的目的位置迭代器，指向最后一个构造的元素之后的位置</p>
<p>习题12.26</p>
<pre><code>int main()
{
	int n = 10;
	allocator&lt;string&gt; alloc;
	string *const p = alloc.allocate(n);
	string s;
	string *q = p;
	while (cin &gt;&gt; s&amp;&amp;q != p + n)
		alloc.construct(q++, s);
	const size_t size = q - p;
	alloc.deallocate(p,size);
}
</code></pre>
<p>12.3<br>
开始一个程序的设计的一种好方法是列出程序的操作，了解需要哪些操作会帮助我们分析出需要什么样的数据结构<br>
当两个类需要共享数据，可以使用shared_ptr来反映数据结构中这种共享关系<br>
当我们设计一个类时，在真正实现成员之前先编写程序使用这个类，可以看到类是否具有我们所需要的操作</p>
<p>习题12.27</p>
<pre><code>int main()
{
	string file_name = &quot;text.txt&quot;;
	ifstream fs(file_name);
	TextQuery tq(fs);
	while (true) {
		cout &lt;&lt; &quot;enter word to look for,or q to quit&quot;;
		string s;
		if (!(cin &gt;&gt; s || s == &quot;q&quot;)) break;
		print(cout, tq.query(s))&lt;&lt;endl;
	}
}
using line_no = vector&lt;string&gt;::size_type;

class QueryResult;
class TextQuery {
public:
	TextQuery(ifstream&amp;);
	QueryResult query(const string&amp;)const;
private:
	shared_ptr &lt;vector&lt;string&gt;&gt; file;
	map&lt;string, shared_ptr&lt;set&lt;line_no&gt;&gt;&gt; wm;
};

TextQuery::TextQuery(ifstream &amp;is): file(new vector&lt;string&gt;)
{
	string text;
	while (getline(is, text)) {
		file-&gt;push_back(text);
		int n = file-&gt;size() - 1;
		istringstream line(text);
		string word;
		while (line &gt;&gt; word) {
			auto &amp;lines = wm[word];
			if (!lines)
				lines.reset(new set&lt;line_no&gt;);
			lines-&gt;insert(n);
		}
	}
}

class QueryResult {
	friend ostream&amp; print(ostream&amp;, const QueryResult&amp;);
public:
	QueryResult(string s,shared_ptr&lt;set&lt;line_no&gt;&gt;p,shared_ptr&lt;vector&lt;string&gt;&gt;f):sought(s),lines(p),file(f){}
private:
	string sought;
	shared_ptr&lt;set&lt;line_no&gt;&gt; lines;
	shared_ptr&lt;vector&lt;string&gt;&gt; file;
};

QueryResult TextQuery::query(const string &amp;sought)const
{
	static shared_ptr&lt;set&lt;line_no&gt;&gt; nodata(new set&lt;line_no&gt;);
	auto loc = wm.find(sought);
	if (loc == wm.end())
		return QueryResult(sought, nodata, file);
	else
		return QueryResult(sought, loc-&gt;second, file);
}

string make_plural(size_t ctr, const string &amp;word, const string &amp;ending) {
	return (ctr &gt; 1) ? word + ending : word;
}

ostream&amp; print(ostream &amp;os, const QueryResult &amp;qr)
{
	os &lt;&lt; qr.sought &lt;&lt; &quot; occurs &quot; &lt;&lt; qr.lines-&gt;size() &lt;&lt; &quot; &quot; &lt;&lt; make_plural(qr.lines-&gt;size(), &quot;time&quot;, &quot;s&quot;) &lt;&lt; endl;
	for (auto num : *qr.lines)
		os &lt;&lt; &quot;\t(line&quot; &lt;&lt; num + 1 &lt;&lt; &quot;)&quot; &lt;&lt; *(qr.file-&gt;begin() + num) &lt;&lt; endl;
	return os;
}
</code></pre>
<p>习题12.28<br>
习题12.29</p>
<p>习题12.30<br>
习题12.31<br>
vector会保存所有出现的行号，甚至是重复的，比如一行中单词出现了三次，vector就会保存三次当前行号，看需求，如果是需要查找单词每次出现的地方，可以用vector，并在打印时相应加粗单词<br>
习题12.32<br>
习题12.33</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 22. 括号生成 [unfinished]]]></title>
        <id>https://lixin-ee.github.io//post/zi-fu-chuan-22-gua-hao-sheng-cheng-unfinished</id>
        <link href="https://lixin-ee.github.io//post/zi-fu-chuan-22-gua-hao-sheng-cheng-unfinished">
        </link>
        <updated>2019-10-16T11:26:54.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</p>
<p>例如，给出 n = 3，生成结果为：<br>
[<br>
&quot;((()))&quot;,<br>
&quot;(()())&quot;,<br>
&quot;(())()&quot;,<br>
&quot;()(())&quot;,<br>
&quot;()()()&quot;<br>
]</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/generate-parentheses<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>这道题是忆君小朋友问我的，果断没啥思路hhh但是猜到七七八八得是动态规划了<br>
下面是高赞的动态题解，还是比较好懂得，主要的要点在于理解为何是<br>
&quot;(&quot; + 【i=p时所有括号的排列组合】 + &quot;)&quot; + 【i=q时所有括号的排列组合】<br>
因为其实有种对称的情况，所有的可能其实是【】+&quot;(&quot; + 【】 + &quot;)&quot; + 【】，但是所有元素都是左右括号，所以第一位置+第二位置其实是和第二位置+第三位置重复的了。<br>
下面是完整题解：</p>
<blockquote>
<p>反思：<br>
首先，面向小白：什么是动态规划？在此题中，动态规划的思想类似于数学归纳法，当知道所有 i&lt;n 的情况时，我们可以通过某种算法算出 i=n 的情况。<br>
本题最核心的思想是，考虑 i=n 时相比 n-1 组括号增加的那一组括号的位置。</p>
<p>思路：<br>
当我们清楚所有 i&lt;n 时括号的可能生成排列后，对与 i=n 的情况，我们考虑整个括号排列中最左边的括号。<br>
它一定是一个左括号，那么它可以和它对应的右括号组成一组完整的括号 &quot;( )&quot;，我们认为这一组是相比 n-1 增加进来的括号。<br>
那么，剩下 n-1 组括号有可能在哪呢？<br>
【这里是重点，请着重理解】<br>
剩下的括号要么在这一组新增的括号内部，要么在这一组新增括号的外部（右侧）。<br>
既然知道了 i&lt;n 的情况，那我们就可以对所有情况进行遍历：<br>
&quot;(&quot; + 【i=p时所有括号的排列组合】 + &quot;)&quot; + 【i=q时所有括号的排列组合】<br>
其中 p + q = n-1，且 p q 均为非负整数。<br>
事实上，当上述 p 从 0 取到 n-1，q 从 n-1 取到 0 后，所有情况就遍历完了。<br>
注：上述遍历是没有重复情况出现的，即当 (p1,q1)≠(p2,q2) 时，按上述方式取的括号组合一定不同。<br>
代码：<br>
具体代码如下：（时间击败百分之 95，内存击败百分之 99.65）</p>
</blockquote>
<pre><code>class Solution:
    def generateParenthesis(self, n: int) -&gt; List[str]:
        if n == 0:
            return []
        total_l = []
        total_l.append([None])    # 0组括号时记为None
        total_l.append([&quot;()&quot;])    # 1组括号只有一种情况
        for i in range(2,n+1):    # 开始计算i组括号时的括号组合
            l = []        
            for j in range(i):    # 开始遍历 p q ，其中p+q=i-1 , j 作为索引
                now_list1 = total_l[j]    # p = j 时的括号组合情况
                now_list2 = total_l[i-1-j]    # q = (i-1) - j 时的括号组合情况
                for k1 in now_list1:  
                    for k2 in now_list2:
                        if k1 == None:
                            k1 = &quot;&quot;
                        if k2 == None:
                            k2 = &quot;&quot;
                        el = &quot;(&quot; + k1 + &quot;)&quot; + k2
                        l.append(el)    # 把所有可能的情况添加到 l 中
            total_l.append(l)    # l这个list就是i组括号的所有情况，添加到total_l中，继续求解i=i+1的情况
        return total_l[n]
</code></pre>
<p>然后是我的复现，复现过程很哈批，把第二个循环的循环判断i写成n了，疯狂溢出，还是得好好思考啊</p>
<pre><code>class Solution {
public:
    vector&lt;string&gt; generateParenthesis(int n) {
        vector&lt;vector&lt;string&gt;&gt; Paren;
        Paren.push_back({&quot;&quot;});
        Paren.push_back({&quot;()&quot;});
        for(int i=2;i&lt;n+1;++i){
            vector&lt;string&gt; temp;
            for(int j=0;j&lt;i;++j){
                vector&lt;string&gt; left=Paren[j];
                vector&lt;string&gt; right=Paren[i-j-1];
                for(int x=0;x&lt;left.size();++x)
                    for(int y=0;y&lt;right.size();++y){
                        string s;
                        s=&quot;(&quot;+left[x] +&quot;)&quot;+right[y];
                        temp.push_back(s);
                    } 
            }
            Paren.push_back(temp);
        } 
        return Paren[n];
    }
};
</code></pre>
<p>然后就是优化问题，看了题解的C++实现发现其实我这样非常不优雅，因为平时不常用的for范围语句在这道题中反而大放异彩，同时可以在定义时确定ve<code>ctor&lt;vector&lt;string&gt;&gt;</code>的参数数量，省去push_back</p>
<pre><code>class Solution {
public:
    vector&lt;string&gt; generateParenthesis(int n) {
        vector&lt;vector&lt;string&gt;&gt; Paren(n+1);
        Paren.push_back({&quot;&quot;});
        Paren.push_back({&quot;()&quot;});
        for(int i=2;i&lt;n+1;++i){
            vector&lt;string&gt; temp;
            for(int j=0;j&lt;i;++j)
                for(auto left:Paren[j])
                    for(auto right:Paren[i-j-1]){
                        string s=&quot;(&quot;+left +&quot;)&quot;+right;
                        Paren[i].push_back(s);
                    } 
        } 
        return Paren[n];
    }
};
</code></pre>
<blockquote>
<p>下面是官方题解，以后有空可以回头看看<br>
方法一：暴力法<br>
思路<br>
我们可以生成所有 2^{2n}  个 '(' 和 ')' 字符构成的序列。然后，我们将检查每一个是否有效。</p>
<p>算法<br>
为了生成所有序列，我们使用递归。长度为 n 的序列就是 '(' 加上所有长度为 n-1 的序列，以及 ')' 加上所有长度为 n-1 的序列。<br>
为了检查序列是否为有效的，我们会跟踪 平衡，也就是左括号的数量减去右括号的数量的净值。如果这个值始终小于零或者不以零结束，该序列就是无效的，否则它是有效的。</p>
</blockquote>
<pre><code>Java
class Solution {
    public List&lt;String&gt; generateParenthesis(int n) {
        List&lt;String&gt; combinations = new ArrayList();
        generateAll(new char[2 * n], 0, combinations);
        return combinations;
    }

    public void generateAll(char[] current, int pos, List&lt;String&gt; result) {
        if (pos == current.length) {
            if (valid(current))
                result.add(new String(current));
        } else {
            current[pos] = '(';
            generateAll(current, pos+1, result);
            current[pos] = ')';
            generateAll(current, pos+1, result);
        }
    }

    public boolean valid(char[] current) {
        int balance = 0;
        for (char c: current) {
            if (c == '(') balance++;
            else balance--;
            if (balance &lt; 0) return false;
        }
        return (balance == 0);
    }
}

def generateParenthesis(self, N):
    if N == 0: return ['']
    ans = []
    for c in xrange(N):
        for left in self.generateParenthesis(c):
            for right in self.generateParenthesis(N-1-c):
                ans.append('({}){}'.format(left, right))
    return ans
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(2^{2n}n)，对于 2^{2n}个序列中的每一个，我们用于建立和验证该序列的复杂度为 O(n)。</p>
<p>空间复杂度：O(2^{2n}n)，简单地，每个序列都视作是有效的。请参见 方法三 以获得更严格的渐近界限。</p>
<p>方法二：回溯法<br>
思路和算法<br>
只有在我们知道序列仍然保持有效时才添加 '(' or ')'，而不是像 方法一 那样每次添加。我们可以通过跟踪到目前为止放置的左括号和右括号的数目来做到这一点，<br>
如果我们还剩一个位置，我们可以开始放一个左括号。 如果它不超过左括号的数量，我们可以放一个右括号。</p>
</blockquote>
<pre><code>class Solution {
    public List&lt;String&gt; generateParenthesis(int n) {
        List&lt;String&gt; ans = new ArrayList();
        backtrack(ans, &quot;&quot;, 0, 0, n);
        return ans;
    }

    public void backtrack(List&lt;String&gt; ans, String cur, int open, int close, int max){
        if (cur.length() == max * 2) {
            ans.add(cur);
            return;
        }

        if (open &lt; max)
            backtrack(ans, cur+&quot;(&quot;, open+1, close, max);
        if (close &lt; open)
            backtrack(ans, cur+&quot;)&quot;, open, close+1, max);
    }
}
</code></pre>
<p><img src="https://lixin-ee.github.io//post-images/1571226174878.png" alt=""></p>
<p>方法三：闭合数<br>
思路</p>
<p>为了枚举某些内容，我们通常希望将其表示为更容易计算的不相交子集的总和。</p>
<p>考虑有效括号序列 S 的 闭包数：至少存在 index &gt;= 0，使得 <code>S[0], S[1], ..., S[2*index+1]</code>是有效的。 显然，每个括号序列都有一个唯一的闭包号。 我们可以尝试单独列举它们。</p>
<p>算法</p>
<p>对于每个闭合数 c，我们知道起始和结束括号必定位于索引 0 和<code>2*c + 1</code>。然后两者间的 <code>2*c</code> 个元素一定是有效序列，其余元素一定是有效序列。</p>
<pre><code>class Solution {
    public List&lt;String&gt; generateParenthesis(int n) {
        List&lt;String&gt; ans = new ArrayList();
        if (n == 0) {
            ans.add(&quot;&quot;);
        } else {
            for (int c = 0; c &lt; n; ++c)
                for (String left: generateParenthesis(c))
                    for (String right: generateParenthesis(n-1-c))
                        ans.add(&quot;(&quot; + left + &quot;)&quot; + right);
        }
        return ans;
    }
}
</code></pre>
<blockquote>
<p>时间空间复杂度与题解二相同</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[反向迭代器的insert与erase （insert不能直接使用反向迭代器）]]></title>
        <id>https://lixin-ee.github.io//post/fan-xiang-die-dai-qi-shi-wu-fa-jin-xing-insert-cha-ru-cao-zuo</id>
        <link href="https://lixin-ee.github.io//post/fan-xiang-die-dai-qi-shi-wu-fa-jin-xing-insert-cha-ru-cao-zuo">
        </link>
        <updated>2019-10-16T02:06:24.000Z</updated>
        <content type="html"><![CDATA[<p>问题：<br>
做题时对容器进行逆序对比，再进行插入操作然后报错了。</p>
<pre><code>if
(i==digits.rend())  
                digits.insert(digits.rend(),1); 
</code></pre>
<p>原因：<br>
反向迭代器是无法进行insert插入操作的， digits.insert(digits.rend(),1);是无法通过编译的，reverse iterator并不属于五种迭代器类型之一<br>
有些容器的成员函数只接受iterator类型的参数，所以如果你想要在ri所指的位置插入一个新元素，你不能直接这么做，因为vector的insert函数不接受reverse_iterator。如果你想要删除ri 所指位置上的元素也会有同样的问题。erase成员函数会拒绝reverse_iterator，坚持要求iterator。为了完成删除和一些形式的插入操作，你必须先通过base函数将reverse_iterator转换成iterator，然后用iterator来完成工作。</p>
<p>然后展开说一下吧<br>
ri<br>
1 2 3 4<br>
i<br>
如上简图所示，如果ri指向2，那么ri.base()也就是i会指向3（同理如果ri指向4，那么i应该是end()）<br>
所以对于insert操作的话，使用ri.base()是正确的的<br>
但是对于erase来说，是删除当前迭代器指向的元素，那就不对劲了，需要将--i，也就是--ri.base()</p>
]]></content>
    </entry>
</feed>