<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lixin-ee.github.io/</id>
    <title>Lixin-ee</title>
    <updated>2019-12-27T12:06:05.283Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lixin-ee.github.io/"/>
    <link rel="self" href="https://lixin-ee.github.io//atom.xml"/>
    <subtitle>好景在望。</subtitle>
    <logo>https://lixin-ee.github.io//images/avatar.png</logo>
    <icon>https://lixin-ee.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Lixin-ee</rights>
    <entry>
        <title type="html"><![CDATA[[Linux基础] 磁盘分区（鸟哥Linux第二章） ]]></title>
        <id>https://lixin-ee.github.io//post/linux-ji-chu-ci-pan-fen-qu-niao-ge-linux-di-er-zhang</id>
        <link href="https://lixin-ee.github.io//post/linux-ji-chu-ci-pan-fen-qu-niao-ge-linux-di-er-zhang">
        </link>
        <updated>2019-12-27T11:49:01.000Z</updated>
        <content type="html"><![CDATA[<p>其实很早之前就看完了鸟哥的Linux基础篇，但是当时忙于敲了代码没做笔记<br>
这系列的博客就像c++primer那样重新复习一遍吧</p>
<p>这一张还是概念为主，需要敲代码的地方比较少，但是这些设计硬盘的概念比较重要</p>
<h1 id="在-linux-系统中每个装置都被当成一个文件来对待">在 Linux 系统中，每个装置都被当成一个文件来对待</h1>
<p>IDE 接口 的硬盘的文件名即为/dev/sd[a-d]，其中， 括号内的字母为a-d当中的任意一个，亦即有/dev/sda, /dev/sdb, /dev/sdc, 及 /dev/sdd 这四个文件的意思<br>
在 Linux 这个系统当中，几乎所有的硬件装置文件都<strong>挂载</strong>在/dev 这个目录内</p>
<p>虚拟机使用 VirtIO 界面时，磁盘文件名应该是 /dev/vda<br>
我装在virtualbox上的文件名就是这个，很神奇，能够识别为virtual<br>
磁盘盘上面又可细分出扇区(Sector)与磁道(Track)两种单位， 其中扇 区的物理量设计有两种大小，分别是 512bytes 与 4Kbytes。<br>
整颗磁盘的第一个扇区特别的重要，因为他记录了整颗磁盘的 重要信息</p>
<h1 id="msdosmbr-与-gpt-磁盘分区表partition-table">MSDOS(MBR) 与 GPT 磁盘分区表(partition table)</h1>
<p>分区表其实目前有两种格式</p>
<p>MBR(Master Boot Record, 主要开机纪录区)：<br>
早期的 Linux 系统为了兼容于 Windows 的磁盘，因此使用的是支持 Windows 的 MBR(Master Boot Record, 主要开机纪录区) 的方式来处理开机管理程序与分区表<br>
开机管理程序纪录区与分区表则通通放在磁盘的第一个扇区，第一个扇区512bytes 会有这两个数据：<br>
-主要启动记录区(Master Boot Record, MBR)：可以安装开机管理程序的地方，有 446 bytes<br>
-分区表(partition table)：记录整颗硬盘分区的状态，有 64 bytes</p>
<p>由于分区表所在区块仅有 64 bytes 容量，因此最多仅能有四组记录区，每组记录区记录了该区段的启 始与结束的磁柱号码。<br>
例子：假设上面的硬盘装置文件名为/dev/sda时，那么这四个分区槽在Linux系统中的装置文件名如下所示， 重点在于档名后面会再接一个数字，这个数字与该分区槽所在的位置有关</p>
<ul>
<li>P1:/dev/sda1</li>
<li>P2:/dev/sda2</li>
<li>P3:/dev/sda3</li>
<li>P4:/dev/sda4</li>
</ul>
<p>在过去 MBR 分区表的限制中经常可以发现如下 的问题：<br>
操作系统无法抓取到 2.2T 以上的磁盘容量<br>
MBR 仅有一个区块，若被破坏后，经常无法或很难救援<br>
MBR 内的存放开机管理程序的区块仅 446bytes，无法容纳较多的程序代码。</p>
<p>GUID partition table, GPT 磁盘分区表：<br>
因为过去一个扇区大小就是 512bytes 而已，不过目前已经有 4K 的扇区设计出现！为了兼容于所有的磁盘，因此在扇区的定义上面， 大多会使用所谓的逻辑区块地址(Logical Block Address, LBA)来处理。GPT 将磁盘所有区块以此 LBA(预设为 512bytes 喔！) 来规划，而第一个 LBA 称为 LBA0 (从 0 开始编号)。<br>
与 MBR 仅使用第一个 512bytes 区块来纪录不同， GPT 使用了 34 个 LBA 区块来纪录分区信息</p>
<p>这里有挺深的体会，老板曾经买了个4T的移动硬盘回来拷贝服务器上的数据库，硬盘上写着三平台通用，结果插上去却无法当作固定硬盘使用，后来发现果然是这个分区表的问题，服务器用了MBR后无法转去2.2T以上的磁盘容量了</p>
<h1 id="linux-安装模式下磁盘分区的选择极重要">Linux 安装模式下，磁盘分区的选择(极重要)</h1>
<ul>
<li>-目录树结构 (directory tree)<br>
目录树架构(directory tree)就是以根目录为主，然后向下呈现分支状的目录结构的一种文件架构。<br>
整个目录树架构最重要的就是那个根目录(root directory)，这个根目录的表示方法为一条斜线『/』</li>
<li>-文件系统与目录树的关系( 挂载)<br>
所谓的『挂载』就是利用一个目录当成进入点，将磁盘分区槽的数据放置在该目录下； 也就是说， 进入该目录就可以读取该分区槽<br>
由于整个 Linux 系统最重要的是根目录，因此根目录一定需要挂载到某个分区槽的。 至于 其他的目录则可依用户自己的需求来给予挂载到不同的分区槽。</li>
</ul>
<p><img src="https://lixin-ee.github.io//post-images/1577448228560.png" alt=""></p>
<p>读书体会：总得来说，这个就是Linux系统关于硬盘等IP设备的基础知识，也许和编程关系不算特别大，但是不会修电脑的程序员 不是一个好程序员hhh，所以硬件这方面的知识也需要有所了解，日后遇到相关的问题时也能及时解决</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组 169. 多数元素[简单][分治法][位运算]]]></title>
        <id>https://lixin-ee.github.io//post/shu-zu-169-duo-shu-yuan-su-jian-dan-fen-zhi-fa-wei-yun-suan</id>
        <link href="https://lixin-ee.github.io//post/shu-zu-169-duo-shu-yuan-su-jian-dan-fen-zhi-fa-wei-yun-suan">
        </link>
        <updated>2019-12-27T03:51:24.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。<br>
你可以假设数组是非空的，并且给定的数组总是存在多数元素。<br>
示例 1:<br>
输入: [3,2,3]<br>
输出: 3<br>
示例 2:<br>
输入: [2,2,1,1,1,2,2]<br>
输出: 2<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/majority-element<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>第一想法还是哈希表，但是这次是必须用map存储次数，而且我不希望最后再遍历map来找最大次数，所以希望用一个额外的pair来存储max值<br>
在判断i是否存在于map的时候可以用find和count，我突然在想这两者会不会遍历？<br>
c++的hash set和map都是基于hashtable，在hashtable的find和count都是基于bky_num_key的hash运算后再在桶内遍历，不接受multi的话就只会有一个元素，所以时间复杂度还是O(1)<br>
需要注意的点就是pair的初始化。。。否则只有一个元素的话就输出错误了。</p>
<pre><code>class Solution {
public:
    int majorityElement(vector&lt;int&gt;&amp; nums) {
        unordered_map&lt;int,int&gt; resm;
        pair&lt;int,int&gt; resp={1,nums.front()};
        for(auto i:nums)
        {
            if(resm.count(i)){
                 ++resm[i];
                if(resm[i]&gt;resp.first)
                    resp.first=resm[i],resp.second=i;
            }else
                resm.insert({i,1});   
        }
        return resp.second;
    }
};
</code></pre>
<p>然后来看看官方题解:</p>
<blockquote>
<p>方法 1：暴力<br>
想法<br>
我们可以在平方级的时间里穷举所有情况，来检测每个数是不是众数。<br>
算法<br>
暴力算法遍历整个数组，然后用另一重循环统计每个数字出现的次数。将出现次数比其他数字加起来出现次数还多的元素返回。</p>
</blockquote>
<pre><code>Java
class Solution {
    public int majorityElement(int[] nums) {
        int majorityCount = nums.length/2;

        for (int num : nums) {
            int count = 0;
            for (int elem : nums) {
                if (elem == num) {
                    count += 1;
                }
            }

            if (count &gt; majorityCount) {
                return num;
            }

        }

        return -1;    
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n^2)<br>
暴力算法包含两重嵌套的 for 循环，每一层 n次迭代，所以总的是平方级的时间复杂度。<br>
空间复杂度：O(1)<br>
暴力方法没有分配任何与输入规模成比例的额外的空间</p>
</blockquote>
<p>方法 2：哈希表<br>
想法</p>
<blockquote>
<p>我们知道出现次数最多的元素大于 ⌊ n/2 ⌋  次，所以可以用哈希表来快速统计每个元素出现的次数。<br>
算法<br>
我们使用哈希表来存储每个元素，然后用一个循环在线性时间内遍历 nums ，然后我们只需要返回有最大值的键。</p>
</blockquote>
<pre><code>Java
class Solution {
    private Map&lt;Integer, Integer&gt; countNums(int[] nums) {
        Map&lt;Integer, Integer&gt; counts = new HashMap&lt;Integer, Integer&gt;();
        for (int num : nums) {
            if (!counts.containsKey(num)) {
                counts.put(num, 1);
            }
            else {
                counts.put(num, counts.get(num)+1);
            }
        }
        return counts;
    }

    public int majorityElement(int[] nums) {
        Map&lt;Integer, Integer&gt; counts = countNums(nums);

        Map.E***y&lt;Integer, Integer&gt; majorityE***y = null;
        for (Map.E***y&lt;Integer, Integer&gt; e***y : counts.e***ySet()) {
            if (majorityE***y == null || e***y.getValue() &gt; majorityE***y.getValue()) {
                majorityE***y = e***y;
            }
        }

        return majorityE***y.getKey();
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n)<br>
我们将 nums 迭代一次，哈希表的插入是常数时间的。所以总时间复杂度为 O(n) 时间的。<br>
空间复杂度：O(n)<br>
哈希表最多包含 n -  ⌊ n/2 ⌋  个关系，所以占用的空间为 O(n) 。这是因为任意一个长度为 n 的数组最多只能包含 n 个不同的值，但题中保证 nums 一定有一个众数，会占用（最少） ⌊ n/2 ⌋ +1 个数字。因此最多有 n - ( ⌊ n/2 ⌋ +1) 个不同的其他数字，所以最多有 n -  ⌊ n/2 ⌋  个不同的元素。</p>
</blockquote>
<blockquote>
<p>方法 3：排序<br>
想法<br>
如果所有数字被单调递增或者单调递减的顺序排了序，那么众数的下标为 ⌊ n/2 ⌋ （当 n 是偶数时，下标为  ⌊ n/2 ⌋ +1 ）<br>
算法<br>
对于这种算法，我们先将 nums 数组排序，然后返回上面所说的数字。下面解释了为什么这种策略是有效的。考虑下图（上面的例子是一个可能的奇数的情况，下面的例子是一个可能的偶数的情况）：</p>
</blockquote>
<p><img src="https://lixin-ee.github.io//post-images/1577419466553.png" alt=""></p>
<blockquote>
<p>对于每种情况，数组下面的线表示如果众数是数组中最小值的情况下覆盖的下标。数组上面的线是数组中最大值的情况。其他情况，这条线会在这两种极端情况的中间。但我们看到即使是这两种极端情况，它们也会在下标为  ⌊ n/2 ⌋  的地方有重叠。因此，无论众数是多少，返回  ⌊ n/2 ⌋ 下标对应的值都是正确的。</p>
</blockquote>
<pre><code>Java
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(nlgn)<br>
用 Python 和 Java 将数组排序开销都为 O(nlgn)，它占据了运行的主要时间。<br>
空间复杂度：O(1)或者 O(n)<br>
我们将 nums 就地排序，如果不能就低排序，我们必须使用线性空间将 nums 数组拷贝，然后再排序。</p>
</blockquote>
<blockquote>
<p>方法 4：随机化<br>
想法<br>
因为超过 ⌊ n/2 ⌋ 的数组下标被众数占据了，一个随机的下标很有可能存有众数。<br>
算法<br>
由于一个给定的下标对应的数字很有可能是众数，我们随机挑选一个下标，检查它的值是否是众数，如果是就返回，否则继续随机挑选。</p>
</blockquote>
<pre><code>Java
class Solution {
    private int randRange(Random rand, int min, int max) {
        return rand.nextInt(max - min) + min;
    }

    private int countOccurences(int[] nums, int num) {
        int count = 0;
        for (int i = 0; i &lt; nums.length; i++) {
            if (nums[i] == num) {
                count++;
            }
        }
        return count;
    }

    public int majorityElement(int[] nums) {
        Random rand = new Random();

        int majorityCount = nums.length/2;

        while (true) {
            int candidate = nums[randRange(rand, 0, nums.length)];
            if (countOccurences(nums, candidate) &gt; majorityCount) {
                return candidate;
            }
        }
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(∞)<br>
理论上这个算法有可能跑无穷次（如果我们一直无法随机到众数），所以最坏时间复杂度是没有上限的。然而，运行的期望时间远小于无限次的 - 线性时间即可。为了更简单地分析，先说服你自己：由于众数占据 超过 数组一半的位置，期望的迭代次数会小于众数占据数组恰好一半的情况。因此，我们可以计算迭代的期望次数（下标为 prob 为原问题， mod 为众数恰好占据数组一半数目的问题）：</p>
</blockquote>
<p><img src="https://lixin-ee.github.io//post-images/1577419557632.png" alt=""></p>
<blockquote>
<p>因为级数会收敛，修改后问题的迭代期望次数是个常数。所以修改后问题的运行时间为线性的。因此，原问题期望运行时间也是线性的。<br>
空间复杂度：O(1)<br>
就像暴力解，随机方法只需要常数级别的额外空间。</p>
</blockquote>
<blockquote>
<p>方法 5：分治<br>
想法<br>
如果我们知道数组左边一半和右边一半的众数，我们就可以用线性时间知道全局的众数是哪个。<br>
算法<br>
这里我们使用经典的分治算法递归求解，直到所有的子问题都是长度为 1 的数组。由于传输子数组需要额外的时间和空间，所以我们实际上只传输子区间的左右指针 lo 和 hi 表示相应区间的左右下标。长度为 1 的子数组中唯一的数显然是众数，直接返回即可。如果回溯后某区间的长度大于 1 ，我们必须将左右子区间的值合并。如果它们的众数相同，那么显然这一段区间的众数是它们相同的值。否则，我们需要比较两个众数在整个区间内出现的次数来决定该区间的众数。原问题的答案就是下标为 0 和 n 之间的众数这一子问题。</p>
</blockquote>
<pre><code>class Solution {
    private int countInRange(int[] nums, int num, int lo, int hi) {
        int count = 0;
        for (int i = lo; i &lt;= hi; i++) {
            if (nums[i] == num) {
                count++;
            }
        }
        return count;
    }

    private int majorityEleme***ec(int[] nums, int lo, int hi) {
        // base case; the only element in an array of size 1 is the majority
        // element.
        if (lo == hi) {
            return nums[lo];
        }

        // recurse on left and right halves of this slice.
        int mid = (hi-lo)/2 + lo;
        int left = majorityEleme***ec(nums, lo, mid);
        int right = majorityEleme***ec(nums, mid+1, hi);

        // if the two halves agree on the majority element, return it.
        if (left == right) {
            return left;
        }

        // otherwise, count each element and return the &quot;winner&quot;.
        int leftCount = countInRange(nums, left, lo, hi);
        int rightCount = countInRange(nums, right, lo, hi);

        return leftCount &gt; rightCount ? left : right;
    }

    public int majorityElement(int[] nums) {
        return majorityEleme***ec(nums, 0, nums.length-1);
    }
}
</code></pre>
<p><img src="https://lixin-ee.github.io//post-images/1577419632622.png" alt=""></p>
<blockquote>
<p>方法 6：Boyer-Moore 投票算法<br>
想法<br>
如果我们把众数记为 +1 ，把其他数记为 −1 ，将它们全部加起来，显然和大于 0 ，从结果本身我们可以看出众数比其他数多。<br>
算法<br>
本质上， Boyer-Moore 算法就是找 nums 的一个后缀 suf ，其中 suf[0] 就是后缀中的众数。我们维护一个计数器，如果遇到一个我们目前的候选众数，就将计数器加一，否则减一。只要计数器等于 0 ，我们就将 nums 中之前访问的数字全部 忘记 ，并把下一个数字当做候选的众数。直观上这个算法不是特别明显为何是对的，我们先看下面这个例子（竖线用来划分每次计数器归零的情况）<br>
[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | 7, 7, 7, 7]<br>
首先，下标为 0 的 7 被当做众数的第一个候选。在下标为 5 处，计数器会变回0 。所以下标为 6 的 5 是下一个众数的候选者。由于这个例子中 7 是真正的众数，所以通过忽略掉前面的数字，我们忽略掉了同样多数目的众数和非众数。因此， 7 仍然是剩下数字中的众数。<br>
[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | 5, 5, 5, 5]<br>
现在，众数是 5 （在计数器归零的时候我们把候选从 7 变成了 5）。此时，我们的候选者并不是真正的众数，但是我们在 遗忘 前面的数字的时候，要去掉相同数目的众数和非众数（如果遗忘更多的非众数，会导致计数器变成负数）。<br>
因此，上面的过程说明了我们可以放心地遗忘前面的数字，并继续求解剩下数字中的众数。最后，总有一个后缀满足计数器是大于 0 的，此时这个后缀的众数就是整个数组的众数。</p>
</blockquote>
<pre><code>Java
class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        Integer candidate = null;

        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            count += (num == candidate) ? 1 : -1;
        }

        return candidate;
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n)<br>
Boyer-Moore 算法严格执行了 n 次循环，所以时间复杂度是线性时间的。<br>
空间复杂度：O(1)<br>
Boyer-Moore 只需要常数级别的额外空间。</p>
</blockquote>
<p>投票法真的很6hhh，虽然是简单题，但是考验的就是思路的广阔，有时间全部复现一遍</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于priority的自定义比较]]></title>
        <id>https://lixin-ee.github.io//post/guan-yu-priority-de-zi-ding-yi-bi-jiao</id>
        <link href="https://lixin-ee.github.io//post/guan-yu-priority-de-zi-ding-yi-bi-jiao">
        </link>
        <updated>2019-12-27T03:44:47.000Z</updated>
        <content type="html"><![CDATA[<p>在做<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/submissions/">23. 合并K个排序链表</a>的时候需要使用优先队列priority_queue，但是这题是链表题，没法直接用小于等于，所以必须用自定义的compare</p>
<p>一开始我以为和泛型函数sort一样，只需要传入自定义compare类型即可（就像multimap那样）<br>
于是传入<br>
<code>priority_queue&lt;ListNode*,decltype(compare)*&gt; list_queue(compare)；</code></p>
<p>然后报错了。。。</p>
<p>观察错误才发现是<br>
priority_queue&lt;class Type,class Container,class Compare&gt;<br>
于是回想起<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a>中也用到了priority_queue的自定义比较<br>
所以参考一下<br>
<code>priority_queue&lt;int,vector&lt;int&gt;,great&lt;int&gt;&gt; res; //底层数据结构是大顶堆，注意每次会弹出最大值</code><br>
加上了 vector&lt;ListNode*&gt;</p>
<p>还是报错，看来问题在于class Compare了</p>
<p>果然 看了博客<a href="https://blog.csdn.net/AAMahone/article/details/82787184">C++ priority_queue的自定义比较方式</a><br>
才发现问题所在<br>
这是一个类！！！<br>
和sort等泛型函数不同，compare传入的不是简单的函数类型，而是一个类！并且类中重载了调用运算符<br>
当然其自身有<code>great&lt;T&gt;</code>和<code>less&lt;T&gt;</code>两个定义，默认less</p>
<pre><code>    struct compare
    {
        bool operator()(ListNode* node1,ListNode* node2)
        {
            return node1-&gt;val&gt;=node2-&gt;val;
        }
    };
</code></pre>
<pre><code>而且注意大于小于的返回判断，如果使用 &lt;= ，返回的反而是大顶堆。。。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[哈希表/位运算 136. 只出现一次的数字 ]]></title>
        <id>https://lixin-ee.github.io//post/ha-xi-biao-wei-yun-suan-136-zhi-chu-xian-yi-ci-de-shu-zi</id>
        <link href="https://lixin-ee.github.io//post/ha-xi-biao-wei-yun-suan-136-zhi-chu-xian-yi-ci-de-shu-zi">
        </link>
        <updated>2019-12-26T03:05:05.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br>
说明：<br>
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？<br>
示例 1:<br>
输入: [2,2,1]<br>
输出: 1<br>
示例 2:<br>
输入: [4,1,2,1,2]<br>
输出: 4<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/single-number<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>最简单的肯定就是无序哈希表的增删了 注意无序是unordered而不是unorder<br>
然后就是思考如何不使用额外的空间<br>
想过双指针的解答，但是似乎不是很行<br>
艹，题解就是数学法</p>
<pre><code>class Solution {
public:
    int singleNumber(vector&lt;int&gt;&amp; nums) {
        unordered_set&lt;int&gt; res;
        for(auto i:nums){
            if(res.count(i))
                res.erase(i);
            else
                res.insert(i);
        }
        return *res.begin();
    }
};
</code></pre>
<p>然后来看看官方题解</p>
<blockquote>
<p>方法 1：列表操作<br>
算法<br>
遍历 nums 中的每一个元素<br>
如果某个nums 中的数字是新出现的，则将它添加到列表中<br>
如果某个数字已经在列表中，删除它</p>
</blockquote>
<pre><code>Python
class Solution(object):
    def singleNumber(self, nums):
        &quot;&quot;&quot;
        :type nums: List[int]
        :rtype: int
        &quot;&quot;&quot;
        no_duplicate_list = []
        for i in nums:
            if i not in no_duplicate_list:
                no_duplicate_list.append(i)
            else:
                no_duplicate_list.remove(i)
        return no_duplicate_list.pop()
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n^2) 。我们遍历nums 花费 O(n) 的时间。我们还要在列表中遍历判断是否存在这个数字，花费 O(n) 的时间，所以总循环时间为 O(n^2) 。<br>
空间复杂度：O(n) 。我们需要一个大小为 n 的列表保存所有的 nums 中元素。</p>
</blockquote>
<blockquote>
<p>方法 2：哈希表<br>
算法<br>
我们用哈希表避免每次查找元素是否存在需要的 O(n) 时间。<br>
遍历 nums 中的每一个元素<br>
查找 hash_table 中是否有当前元素的键<br>
如果没有，将当前元素作为键插入 hash_table<br>
最后， hash_table 中仅有一个元素，用 popitem 获得它</p>
</blockquote>
<pre><code>Python
class Solution(object):
    def singleNumber(self, nums):
        &quot;&quot;&quot;
        :type nums: List[int]
        :rtype: int
        &quot;&quot;&quot;
        hash_table = {}
        for i in nums:
            try:
                hash_table.pop(i)
            except:
                hash_table[i] = 1
        return hash_table.popitem()[0]
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度： =O(n) 。for 循环的时间复杂度是 O(n) 的。Python 中哈希表的 pop 操作时间复杂度为O(1) 。<br>
空间复杂度： O(n) 。hash_table 需要的空间与nums 中元素个数相等。</p>
</blockquote>
<p>方法 3：数学<br>
概念<br>
2 * (a + b + c) - (a + a + b + b + c) = c2∗(a+b+c)−(a+a+b+b+c)=c</p>
<pre><code>Python
class Solution(object):
    def singleNumber(self, nums):
        &quot;&quot;&quot;
        :type nums: List[int]
        :rtype: int
        &quot;&quot;&quot;
        return 2 * sum(set(nums)) - sum(nums)
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n+n)=O(n) 。sum 会调用 next 将nums 中的元素遍历一遍。我们可以把上述代码看成 sum(list(i, for i in nums)) ，这意味着时间复杂度为 O(n) ，因为nums 中的元素个数是 nn 个。<br>
空间复杂度：O(n+n)=O(n) 。 set 需要的空间跟 nums 中元素个数相等。</p>
</blockquote>
<blockquote>
<p>方法 4：位操作<br>
概念<br>
如果我们对 0 和二进制位做 XOR 运算，得到的仍然是这个二进制位<br>
a⊕0=a<br>
如果我们对相同的二进制位做 XOR 运算，返回的结果是 0<br>
a⊕a=0<br>
XOR 满足交换律和结合律<br>
a⊕b⊕a=(a⊕a)⊕b=0⊕b=b<br>
所以我们只需要将所有的数进行 XOR 操作，得到那个唯一的数字。</p>
</blockquote>
<pre><code>Python
class Solution(object):
    def singleNumber(self, nums):
        &quot;&quot;&quot;
        :type nums: List[int]
        :rtype: int
        &quot;&quot;&quot;
        a = 0
        for i in nums:
            a ^= i
        return a
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度： O(n) 。我们只需要将nums 中的元素遍历一遍，所以时间复杂度就是nums 中的元素个数。<br>
空间复杂度：O(1) 。</p>
</blockquote>
<p>我对异或的复现</p>
<pre><code>    int singleNumber(vector&lt;int&gt;&amp; nums){
        int res=0;
        for(auto i:nums)
            res^=i;
        return res;
    }      
</code></pre>
<p>对比方法三，异或还是很6的，都不需要考虑溢出的问题</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于非阻塞IO、Reactor和one thread one loop]]></title>
        <id>https://lixin-ee.github.io//post/guan-yu-fei-zu-sai-ioreactor-he-one-thread-one-loop</id>
        <link href="https://lixin-ee.github.io//post/guan-yu-fei-zu-sai-ioreactor-he-one-thread-one-loop">
        </link>
        <updated>2019-12-26T02:11:42.000Z</updated>
        <content type="html"><![CDATA[<p>今天早上在阅读陈硕的高性能多线程服务器第三章时产生了很大的疑惑<br>
那就是Reactor和one thread one loop之间的区别<br>
书中说后者其实就是把前者复制实现了，也就是把reactor在每个线程中复现了并且加上了线程池以处理那些纯计算不IO的工作</p>
<p>然后我就疑惑在于reactor本身或者说非阻塞IO本身不是多线程或者多进程的吗</p>
<p>答案还真不是<br>
先放一篇比较好的博客<br>
<a href="http://gao-xiao-long.github.io/2017/04/20/network-io/">Linux下多线程服务器Reactor模式总结</a><br>
然后结合UNP<br>
我才发现原来非阻塞IO并非是select/poll响应之后不断地fork或者thread的<br>
而是在【单线程里面不断执行】</p>
<p>那为何不会阻塞在执行函数里面呢？比如read和write？<br>
这就是UNP 16章一开始介绍缓冲区的原因<br>
非阻塞IO中必须用缓冲区缓存IO内容，也就是说我管你发不发得出去（阻塞IO一般也是阻塞在不够长度发送或者接收的问题上），发不出去就存起来下次再发，赶紧给我返回到select（接收同理），只能阻塞在select上</p>
<p>这也就是reactor的event loop和select/poll分离、以及其缺点的由来</p>
<p>缺点就是非抢占：由于只有一个线程，因此事件是顺序处理的，一个线程同时只能做一件事情，事件的优先级得不到保证。因为”从select/poll返回后” 到”下一次调用select/poll进入等待之前”这段时间内，线程不会被其他连接上的数据或者事件抢占。所以在使用这种模式时，需要避免业务逻辑阻塞当前IO线程。比如事件a的优先级高于事件b，但是只要事件b早到那么一点，后到的事件a只能等待事件b完成返回到select/poll（注意不是阻塞）</p>
<p>当然Reactor其实有很多版本的，并非必须是单线程的，只是陈硕作者在第三章中引出来所需，Reactor可以有单进程多线程的版本</p>
<p>最后Reactor和基于它的lighttpd、Niginx都是值得阅读的源码</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于读书笔记]]></title>
        <id>https://lixin-ee.github.io//post/guan-yu-du-shu-bi-ji</id>
        <link href="https://lixin-ee.github.io//post/guan-yu-du-shu-bi-ji">
        </link>
        <updated>2019-12-25T12:40:41.000Z</updated>
        <content type="html"><![CDATA[<p>谁能想到这是我为数不多的随心感想之一<br>
起源是某天打开自己的博客和github，发现空空如也<br>
hhh也没有啦 但十一月底之前的博文里除了leetcode和C++ primer之外好像就没有其他的了，看起来我好像什么都没做一样<br>
但是真相是什么呢，其实一直在看书<br>
除去C++ primer，我整理了一下如下<br>
C++：《STL源码剖析》《深度探索C++对象模型》<br>
算法：《大话数据结构》<br>
计算机网络：《计算机网络：自顶向下方法》《TCP/IP详解 卷1》<br>
操作系统：《深入理解计算机系统》<br>
Linux：《鸟哥的 Linux 私房菜 基础篇》《APUE-UNIX 环境高级编程》《UNP-UNIX网络编程》<br>
还算不少吧hhh<br>
然而虽然开了博客，但是自己多多少少还是不太习惯用吧，笔记基本都在iPad里面，然后自己习惯转化成成word笔记方便查阅。<br>
但是一周前看了一位中大师兄的博客，看到他一路以来做的笔记，才发现自己还是不够啊<br>
然后又开始陷入无限懊悔。。。<br>
但是看了一下同时期师兄的博客，其实也是差不多的起点吧<br>
所以种一棵树最好的时机，一个是三年前，一个是今天<br>
毕竟我也用了太多时间来后悔了</p>
<p>所以从今天起尽量写一下读书笔记<br>
对于已经读过的书，除了转化为word，更添加和面试题相关的解答和思考<br>
对于正在读的树，肯定有读不懂的地方，那就把笔记和感想结合起来，感想为主吧。</p>
<p>然后发现一个小技巧，博客上有很多人会手工搬运书中的内容，这样我说不定可以省下很多工作呢hhh</p>
<p>一眨眼已经19.12.25了，学期初完成的计划显然是太难达成了（一个月两本书），未来的路也还很远，刚刚拿到地图（面经），做好了晚点回家的准备，但今天有点懈怠了，还是得继续努力啊！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉树的前中后序遍历+层次遍历 [迭代版]]]></title>
        <id>https://lixin-ee.github.io//post/er-cha-shu-de-qian-zhong-hou-xu-bian-li-ceng-ci-bian-li-die-dai-ban</id>
        <link href="https://lixin-ee.github.io//post/er-cha-shu-de-qian-zhong-hou-xu-bian-li-ceng-ci-bian-li-die-dai-ban">
        </link>
        <updated>2019-12-25T08:00:54.000Z</updated>
        <content type="html"><![CDATA[<p>前序</p>
<pre><code>class Solution {
public:
    //迭代版
    vector&lt;int&gt; preorderTraversal(TreeNode* root) {
        stack&lt;TreeNode*&gt; rNode;
        vector&lt;int&gt; res;
        TreeNode* cur;
        rNode.push(root);
        while(rNode.size()){
            cur=rNode.top();
            rNode.pop();
            if(cur==NULL)
                continue;
            res.push_back(cur-&gt;val);
            rNode.push(cur-&gt;right);
            rNode.push(cur-&gt;left);
        }
        return res;
    }
｝
</code></pre>
<p>需要注意的点<br>
1.先压入root结点<br>
2.对cur进行NULL判断<br>
3.因为栈是先进后出，所以一定要先压入右子树再压入左子树</p>
<p>中序</p>
<pre><code>class Solution {
public:   
    vector&lt;int&gt; inorderTraversal(TreeNode* root){
        stack&lt;TreeNode*&gt; NodeStack;
        TreeNode *cur=root;
        vector&lt;int&gt; res;
        while(cur||NodeStack.size()){
            while(cur){
                NodeStack.push(cur);
                cur=cur-&gt;left;
            }
            cur=NodeStack.top();
            NodeStack.pop();
            res.push_back(cur-&gt;val);
            cur=cur-&gt;right;
            
        }
        return res;
    }
   ｝;
</code></pre>
<pre><code>注意点
1.判断条件和处理和前序遍历不同，先压入所有左子树再返回再压入右子树
</code></pre>
<p>二叉树的后序遍历</p>
<pre><code>class Solution {   
public:
    vector&lt;int&gt; postorderTraversal(TreeNode* root) {
        deque&lt;int&gt; res;
        stack&lt;TreeNode*&gt; nodestack;
        TreeNode *cur;
        nodestack.push(root);
        while(nodestack.size()){
            cur=nodestack.top();
            nodestack.pop();
            if(!cur)
                continue;
            res.push_front(cur-&gt;val);
            nodestack.push(cur-&gt;left);
            nodestack.push(cur-&gt;right);
        }
        return vector&lt;int&gt;(res.begin(),res.end());
    }
	};
</code></pre>
<p>注意点：<br>
1.这个题解时逆序输出，先输出靠后的元素，比如12345的输出顺序是5-45-345-2345-12345，因此我使用了deque，因为需要push_front，用vector的话很费时（当然用deque的话很费空间）<br>
2.注意必须先压入left再压入righjt，原因是因为逆序输出，所以配合stack先进后出的话需要右子树后入栈</p>
<p>层次遍历</p>
<pre><code>class Solution {
public:
    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {
        vector&lt;vector&lt;int&gt;&gt; res;
        vector&lt;TreeNode*&gt; cur,next;
        if(!root) return res;
        cur.push_back(root);
        while(cur.size()||next.size()){
            res.push_back(vector&lt;int&gt;({}));
            for(auto i:cur){
                res.back().push_back(i-&gt;val);
                if(i-&gt;left)
                    next.push_back(i-&gt;left);
                if(i-&gt;right)
                    next.push_back(i-&gt;right);               
            }
            cur=next;
            next.clear();
        }
        return res;
    }
		};
</code></pre>
<p>需要注意的点：<br>
1.其实可以在空间和记录层次之间选择，我选择了前者，因为比较省工<br>
2.res需要先push_back一个空数组<br>
3.注意back()返回的是引用，这也解释了为啥很多函数习惯返回引用，否则的话连续调用就全部木大了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉树的前中后序遍历 [迭代版]]]></title>
        <id>https://lixin-ee.github.io//post/er-cha-shu-de-qian-zhong-hou-xu-bian-li-die-dai-ban</id>
        <link href="https://lixin-ee.github.io//post/er-cha-shu-de-qian-zhong-hou-xu-bian-li-die-dai-ban">
        </link>
        <updated>2019-12-25T08:00:54.000Z</updated>
        <content type="html"><![CDATA[<p>前序</p>
<pre><code>class Solution {
public:
    //迭代版
    vector&lt;int&gt; preorderTraversal(TreeNode* root) {
        stack&lt;TreeNode*&gt; rNode;
        vector&lt;int&gt; res;
        TreeNode* cur;
        rNode.push(root);
        while(rNode.size()){
            cur=rNode.top();
            rNode.pop();
            if(cur==NULL)
                continue;
            res.push_back(cur-&gt;val);
            rNode.push(cur-&gt;right);
            rNode.push(cur-&gt;left);
        }
        return res;
    }
｝
</code></pre>
<p>需要注意的点<br>
1.先压入root结点<br>
2.对cur进行NULL判断<br>
3.因为栈是先进后出，所以一定要先压入右子树再压入左子树</p>
<p>中序</p>
<pre><code>class Solution {
public:   
    vector&lt;int&gt; inorderTraversal(TreeNode* root){
        stack&lt;TreeNode*&gt; NodeStack;
        TreeNode *cur=root;
        vector&lt;int&gt; res;
        while(cur||NodeStack.size()){
            while(cur){
                NodeStack.push(cur);
                cur=cur-&gt;left;
            }
            cur=NodeStack.top();
            NodeStack.pop();
            res.push_back(cur-&gt;val);
            cur=cur-&gt;right;
            
        }
        return res;
    }
   ｝;
</code></pre>
<pre><code>注意点
1.判断条件和处理和前序遍历不同，先压入所有左子树再返回再压入右子树
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串 557. 反转字符串中的单词 III[简单]]]></title>
        <id>https://lixin-ee.github.io//post/zi-fu-chuan-557-fan-zhuan-zi-fu-chuan-zhong-de-dan-ci-iiijian-dan</id>
        <link href="https://lixin-ee.github.io//post/zi-fu-chuan-557-fan-zhuan-zi-fu-chuan-zhong-de-dan-ci-iiijian-dan">
        </link>
        <updated>2019-12-25T01:41:14.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。<br>
示例 1:<br>
输入: &quot;Let's take LeetCode contest&quot;<br>
输出: &quot;s'teL ekat edoCteeL tsetnoc&quot; <br>
注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/reverse-words-in-a-string-iii<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>一开始傻逼了看错题目了以为是翻转整个字符串，原来是翻转单个单词<br>
考虑利用stringstream来试试<br>
注意ostringstream不能直接输出给string的 只能用os.str()返回ostringstream所保存的string的拷贝<br>
然后我为了解决最后一个空格的问题用了eof()这个判断函数<br>
然后实现了自己的reverse，然后看一下stl的reverse，比较有趣，主要是++和--的时机和判断<br>
stl会在一个无限循环中先判断if(first<mark>last||first</mark> --last) return; else iter_swap(first++,last);</p>
<pre><code>class Solution {
public:
    string reverseWords(string s) {
        //string res;
        istringstream is(s);
        ostringstream os;
        if(!s.empty()){
            string temp;
            while(is&gt;&gt;temp){
                swapstring(temp);
                os&lt;&lt;temp;
                if(!is.eof())
                    os&lt;&lt;&quot; &quot;;
            }
        }
        return os.str();
    }
    
    void swapstring(string &amp;s){
        int left=0,right=s.size()-1;
        while(left&lt;right)
            swap(s[left++],s[right--]);
    }
};
</code></pre>
<p>热门题解居然没有用stringstream，就跟别说eof了，而且题解大多数都是java和python的split，意义不大呀<br>
看看官方题解造轮子吧</p>
<blockquote>
<p>方法 1：简单的解法 [Accepted]<br>
第一种方法非常简单，我们将输入字符串中按照空白字符串分开，然后把所有单词放到一个字符串列表中，然后我们逐一遍历每一个字符串并把反转结果连接起来。最后，我们将删除了额外空白字符的字符串返回。</p>
</blockquote>
<pre><code>Java
public class Solution {
    public String reverseWords(String s) {
        String words[] = s.split(&quot; &quot;);
        StringBuilder res=new StringBuilder();
        for (String word: words)
            res.append(new StringBuffer(word).reverse().toString() + &quot; &quot;);
        return res.toString().trim();
    }
}
</code></pre>
<blockquote>
<p>时间复杂度<br>
时间复杂度： O(n) 。其中n 是字符串的长度。<br>
空间复杂度： O(n) 。使用了大小为 n 的 res 。</p>
</blockquote>
<blockquote>
<p>方法 2：不使用自带的 split 和 reverse 函数 [Accepted]<br>
算法<br>
我们可以自己写一个 split 和 reverse 函数。 split 函数将字符串按照 &quot; &quot; （空格）为分隔符将字符串分开并返回单词列表。 reverse 函数返回每个字符串反转后的字符串。</p>
</blockquote>
<pre><code>Java
public class Solution {
    public String reverseWords(String s) {
        String words[] = split(s);
        StringBuilder res=new StringBuilder();
        for (String word: words)
            res.append(reverse(word) + &quot; &quot;);
        return res.toString().trim();
    }
    public String[] split(String s) {
        ArrayList &lt; String &gt; words = new ArrayList &lt; &gt; ();
        StringBuilder word = new StringBuilder();
        for (int i = 0; i &lt; s.length(); i++) {
            if (s.charAt(i) == ' ') {
                words.add(word.toString());
                word = new StringBuilder();
            } else
                word.append( s.charAt(i));
        }
        words.add(word.toString());
        return words.toArray(new String[words.size()]);
    }
    public String reverse(String s) {
      StringBuilder res=new StringBuilder();
        for (int i = 0; i &lt; s.length(); i++)
            res.insert(0,s.charAt(i));
        return res.toString();
    }
}
</code></pre>
<blockquote>
<p>时间复杂度<br>
时间复杂度： O(n) 。其中 nn 是字符串的长度。<br>
空间复杂度： O(n) 。使用了大小为 n 的 res 。</p>
</blockquote>
<blockquote>
<p>方法 3：使用 StringBuilder 和 reverse 方法 [Accepted]<br>
算法<br>
这一方法中，我们不使用 split 方法，我们创建临时字符串 wordword 保存单词，我们在遍历过程中将字符逐一连接在 wordword 后面，直到我们遇到 ' '（空格） 字符。当我们遇到 ' ' 字符时，我们将 wordword 反转后连接在结果字符串 resultresult 后面。在遍历完成以后，我们返回结果字符串 resultresult 。</p>
</blockquote>
<pre><code>Java
public class Solution {
    public String reverseWords(String input) {
        final StringBuilder result = new StringBuilder();
        final StringBuilder word = new StringBuilder();
        for (int i = 0; i &lt; input.length(); i++) {
            if (input.charAt(i) != ' ') {
                word.append(input.charAt(i));
            } else {
                result.append(word.reverse());
                result.append(&quot; &quot;);
                word.setLength(0);
            }
        }
        result.append(word.reverse());
        return result.toString();
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度： O(n) 。单遍循环的上限是 n ，其中 n 是字符串的长度。<br>
空间复杂度： O(n) 。 result 和 word 最多为 n 。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[脑筋急转弯 292. Nim 游戏[简单]]]></title>
        <id>https://lixin-ee.github.io//post/nao-jin-ji-zhuan-wan-292-nim-you-xi-jian-dan</id>
        <link href="https://lixin-ee.github.io//post/nao-jin-ji-zhuan-wan-292-nim-you-xi-jian-dan">
        </link>
        <updated>2019-12-24T02:40:22.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。<br>
你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。<br>
示例:<br>
输入: 4<br>
输出: false<br>
解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；<br>
     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/nim-game<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>通过一波穷举我发现问题所在就是4这个数，如果谁能使得自己拿走石头后剩下的数量为4那对方必输无疑<br>
那么剩下的问题就很简单了，如果我当前的数不为4的倍数，我就拿走1-3个，使得对方成为4的倍数，如此往复最后对方肯定要面对4的情况。<br>
所以这道题之所以简单就是因为直接看是不是4的倍数就完事了。。。</p>
<pre><code>class Solution {
public:
    bool canWinNim(int n) {
     if(n&lt;=0)
         return false;
     if(n%4==0)
         return false;
        else
            return true;
    }
};
</code></pre>
<p>然后来看看网友题解吧，这道题最重要的还是如何推导出这个规律而不是简单地得出结果</p>
<blockquote>
<p>把4看成一个整体，我们都知道4的情况下，后手拿的会赢。那么就是以下这个样子：<br>
1～3--a肯定会拿走，a赢<br>
4--无论a怎么拿，顺序都是ab，都是b赢<br>
5--看作1+[4]，那么拿的顺序就是aba，a赢<br>
6--看作2+[4]，那么拿的顺序就是aba，a赢<br>
7--看作3+[4]，那么拿的顺序就是aba，a赢<br>
8--看作[4]+[4]，无论a怎么拿顺序都是abab，b赢<br>
以此类推<br>
由此我们可以看出，当n被4整除时，后手赢（b），不被整除时，先手赢（a）</p>
</blockquote>
<blockquote>
<p>最开始从递归入手，写出下面代码</p>
</blockquote>
<pre><code>class Solution {
public:
    bool canWinNim(int n) {
        if(n &lt;= 0) {
            return false;
        }
        if(n &lt;= 3) {
            return true;
        }
        return !canWinNim(n-1) || !canWinNim(n-2) || !canWinNim(n-3);
    }
};
</code></pre>
<blockquote>
<p>遇到大n堆栈就溢出了。<br>
然后考虑dp，写出下面代码</p>
</blockquote>
<pre><code>class Solution {
public:
    bool canWinNim(int n) {
        vector&lt;bool&gt; dp(n, true);
        for(int i = 4; i &lt;= n; ++i) {
            dp[i-1] = !dp[i-2] || !dp[i-3] || !dp[i-4];
        }
        return dp[n-1];
    }
};
</code></pre>
<blockquote>
<p>遇到大n时间太长，还是过不了。<br>
观察了以下dp数组里的值的变化规律，发现只要n不是4的倍数，就是true，反之false。原来就是一行代码的事：</p>
</blockquote>
<pre><code>class Solution {
public:
    bool canWinNim(int n) {
        return n%4 != 0;
    }
};
</code></pre>
<blockquote>
<p>提交上去结果居然是速度只打败50%，内存打败30%。<br>
于是，再改进：</p>
</blockquote>
<pre><code>class Solution {
public:
    bool canWinNim(int n) {
        return n &amp; 3;
    }
};
</code></pre>
]]></content>
    </entry>
</feed>