<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lixin-ee.github.io/</id>
    <title>Lixin-ee</title>
    <updated>2019-10-30T02:01:16.681Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lixin-ee.github.io/"/>
    <link rel="self" href="https://lixin-ee.github.io//atom.xml"/>
    <subtitle>好景在望。</subtitle>
    <logo>https://lixin-ee.github.io//images/avatar.png</logo>
    <icon>https://lixin-ee.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Lixin-ee</rights>
    <entry>
        <title type="html"><![CDATA[链表 328. 奇偶链表[中等]]]></title>
        <id>https://lixin-ee.github.io//post/lian-biao-328-qi-ou-lian-biao-zhong-deng</id>
        <link href="https://lixin-ee.github.io//post/lian-biao-328-qi-ou-lian-biao-zhong-deng">
        </link>
        <updated>2019-10-30T01:44:41.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。<br>
请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p>
<p>示例 1:<br>
输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>
输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL<br>
示例 2:<br>
输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL<br>
输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL<br>
说明:<br>
应当保持奇数节点和偶数节点的相对顺序。<br>
链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/odd-even-linked-list<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>我的想法<br>
就是直接新建两个结点，一个存放奇数节点，另外一个存放偶数节点，然后再将两者连接起来。<br>
然后在实现过程中，发现一个问题是必须实现记录好第一个偶数节点（用于与奇数节点相连）<br>
然后最重要的是！！！必须给偶数节点显式接上NULL！！！！否则可能会出现（1-2-3-4-5）最后4的next指向5的情况</p>
<pre><code>class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL||head-&gt;next==NULL)
            return head;
        ListNode* temp=head-&gt;next;
        ListNode* odd=head;
        ListNode* even=head-&gt;next;
        ListNode* curr=head-&gt;next-&gt;next;
        int count=1;
        while(curr!=NULL){
            if(count%2){
                odd-&gt;next=curr;
                curr=curr-&gt;next;
                odd=odd-&gt;next;
            }else
            {
                even-&gt;next=curr;
                curr=curr-&gt;next;
                even=even-&gt;next;
            }
            ++count;             
        }
        odd-&gt;next=temp;
        even-&gt;next=NULL;
        return head;
    }
};
</code></pre>
<p>链表题最爽的就是可以手写撸代码，基本都能一次过<br>
然后来看一下官方题解：</p>
<blockquote>
<p>解法<br>
想法<br>
将奇节点放在一个链表里，偶链表放在另一个链表里。然后把偶链表接在奇链表的尾部。<br>
算法<br>
这个解法非常符合直觉思路也很简单。但是要写一个精确且没有 bug 的代码还是需要进行一番思索的。<br>
一个 LinkedList 需要一个头指针和一个尾指针来支持双端操作。我们用变量 head 和 odd 保存奇链表的头和尾指针。 evenHead 和 even 保存偶链表的头和尾指针。算法会遍历原链表一次并把奇节点放到奇链表里去、偶节点放到偶链表里去。遍历整个链表我们至少需要一个指针作为迭代器。这里 odd 指针和 even 指针不仅仅是尾指针，也可以扮演原链表迭代器的角色。<br>
解决链表问题最好的办法是在脑中或者纸上把链表画出来。比方说<br>
<img src="https://lixin-ee.github.io//post-images/1572400580152.png" alt=""></p>
</blockquote>
<pre><code>public class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null) return null;
        ListNode odd = head, even = head.next, evenHead = even;
        while (even != null &amp;&amp; even.next != null) {
            odd.next = even.next;
            odd = odd.next;
            even.next = odd.next;
            even = even.next;
        }
        odd.next = evenHead;
        return head;
    }
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度： O(n) 。总共有 n 个节点，我们每个遍历一次。<br>
空间复杂度： O(1) 。我们只需要 4 个指针。</p>
</blockquote>
<p>官方题解果然更优雅一点哈哈哈，因为我比较担心出问题所以设置了cur指针，其实这个是非必须的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表 24. 两两交换链表中的节点[中等]]]></title>
        <id>https://lixin-ee.github.io//post/lian-biao-24-liang-liang-jiao-huan-lian-biao-zhong-de-jie-dian-zhong-deng</id>
        <link href="https://lixin-ee.github.io//post/lian-biao-24-liang-liang-jiao-huan-lian-biao-zhong-de-jie-dian-zhong-deng">
        </link>
        <updated>2019-10-29T01:18:49.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。<br>
你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>
<p>示例:<br>
给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/swap-nodes-in-pairs<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>难点：如何保证指针在交换时保证正确。<br>
我的思路：<br>
1-&gt;2-&gt;3-&gt;4-&gt;5，示例交换3和4<br>
将2作为previous，将3作为target<br>
所以有</p>
<pre><code>pre-&gt;next=tar-&gt;next; //2指向4
tar-&gt;next=tar-&gt;next-&gt;next;//3指向5
pre-&gt;next-&gt;next=tar;//4指向3，此时就有2-4-3-5
pre=tar;//将3作为pre
tar=pre-&gt;next;//将5作为tar
</code></pre>
<p>但是1和2交换时没有pre，所以需要加上一个空表头<br>
最终代码如下</p>
<pre><code>class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL)
            return head;
        ListNode* flag = new ListNode(0); //新建一个结点，value为0
        flag-&gt;next = head; //让它next指针指向头结点
        ListNode *pre=flag,*tar=head;
        while(tar!=NULL&amp;&amp;tar-&gt;next!=NULL){
            pre-&gt;next=tar-&gt;next;
            tar-&gt;next=tar-&gt;next-&gt;next;
            pre-&gt;next-&gt;next=tar;
            pre=tar;
            tar=pre-&gt;next;
        }
        return flag-&gt;next;
    }
};
</code></pre>
<p>需要注意的点就是加上空表头的代码<br>
一开始我是直接 <code>ListNode* flag = head</code>结果翻车了，因为这样子是等于和head共享一个地址，正确的应该是new出一个结点，再使用new出来的结点的地址</p>
<pre><code>ListNode* flag = new ListNode(0); //新建一个结点，value为0
flag-&gt;next = head; //让它next指针指向头结点
</code></pre>
<p>然后来看一下网友题解：<br>
首先是和我思路一致的<br>
<img src="https://lixin-ee.github.io//post-images/1572313056432.jpg" alt=""></p>
<pre><code>class Solution:
    def swapPairs(self, head: ListNode) -&gt; ListNode:
        thead = ListNode(-1)
        thead.next = head
        c = thead
        while c.next and c.next.next:
            a, b=c.next, c.next.next
            c.next, a.next = b, b.next
            b.next = a
            c = c.next.next
        return thead.next
</code></pre>
<p>然后是递归做法</p>
<blockquote>
<p>解题方案<br>
思路<br>
标签：链表<br>
本题的递归和非递归解法其实原理类似，都是更新每两个点的链表形态完成整个链表的调整<br>
其中递归解法可以作为典型的递归解决思路进行讲解<br>
递归写法要观察本级递归的解决过程，形成抽象模型，因为递归本质就是不断重复相同的事情。而不是去思考完整的调用栈，一级又一级，无从下手。如图所示，我们应该关注一级调用小单元的情况，也就是单个f(x)。<br>
<img src="https://lixin-ee.github.io//post-images/1572313291404.png" alt=""><br>
其中我们应该关心的主要有三点：<br>
返回值<br>
调用单元做了什么<br>
终止条件</p>
<p>在本题中：<br>
返回值：交换完成的子链表<br>
调用单元：设需要交换的两个点为 head 和 next，head 连接后面交换完成的子链表，next 连接 head，完成交换<br>
终止条件：head 为空指针或者 next 为空指针，也就是当前无节点或者只有一个节点，无法进行交换<br>
代码<br>
递归解法</p>
</blockquote>
<pre><code>class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode next = head.next;
        head.next = swapPairs(next.next);
        next.next = head;
        return next;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表 141. 环形链表 难度：简单]]></title>
        <id>https://lixin-ee.github.io//post/lian-biao-141-huan-xing-lian-biao-nan-du-jian-dan</id>
        <link href="https://lixin-ee.github.io//post/lian-biao-141-huan-xing-lian-biao-nan-du-jian-dan">
        </link>
        <updated>2019-10-28T01:48:27.000Z</updated>
        <content type="html"><![CDATA[<p>给定一个链表，判断链表中是否有环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>
<p>示例 1： 输入：head = [3,2,0,-4], pos = 1 输出：true 解释：链表中有一个环，其尾部连接到第二个节点。<br>
示例 2：输入：head = [1,2], pos = 0 输出：true 解释：链表中有一个环，其尾部连接到第一个节点。<br>
示例 3： 输入：head = [1], pos = -1 输出：false 解释：链表中没有环。<br>
进阶： 你能用 O(1)（即，常量）内存解决此问题吗？</p>
<p>难点：<br>
1.常量内存的解决法<br>
我的思路<br>
其实这道题之前已经碰到过了hhh，然后我还记得呢（其实找了一个早上才找到。。。）<br>
<a href="https://lixin-ee.github.io/post/shu-zu-287-xun-zhao-chong-fu-shu/">数组187.寻找重复数</a></p>
<blockquote>
<p>#此题转换为链表找环的开始位置，前提条件告诉我们是一定有环</p>
<h1 id="根据floyd判圈办法一个快指针一个慢指针二者一定在环上相遇设相遇点为m点">根据floyd判圈办法，一个快指针一个慢指针，二者一定在环上相遇，设相遇点为M点，</h1>
<h1 id="快是慢的速度的2倍时间相同设慢的距离为s那么快的距离为2s">快是慢的速度的2倍，时间相同，设慢的距离为s，那么快的距离为2s</h1>
<h1 id="m为链表头距离环开始位置的距离k为环开始位置到m点的距离-n为环长度">m为链表头距离环开始位置的距离，k为环开始位置到M点的距离, N为环长度</h1>
<h1 id="s-m-an-k-2s-m-bn-k二者相减s-a-bn">s = m + a<em>N +k, 2s = m + b</em>N +k，二者相减，s = (a-b)*N</h1>
<h1 id="由此可见慢指针走过的距离是环长的整数倍即链表头到m点是环长的整数倍">由此可见，慢指针走过的距离是环长的整数倍，即链表头到M点是环长的整数倍</h1>
<h1 id="如果是1倍的话把m截距离旋转到环上跟环融合那么链表头一定落在m点">如果是1倍的话，把m截距离旋转到环上，跟环融合，那么链表头一定落在M点，</h1>
<h1 id="即fast和slow都落在m点那么二者到环开始位置距离相同必然在此处相遇">即fast和slow都落在M点，那么二者到环开始位置距离相同，必然在此处相遇。</h1>
<h1 id="如果是n倍n1时只不过slow指针多转几圈而已后二者仍在此处相遇">如果是N倍（N&gt;1）时，只不过slow指针多转几圈而已，后二者仍在此处相遇</h1>
</blockquote>
<p>最后代码如下</p>
<pre><code>class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(!head)
            return false;
        ListNode *fast=head-&gt;next;
        ListNode *slow=head;
        while(fast!=slow){
            if(fast==NULL||fast-&gt;next==NULL)
                return false;
            fast=fast-&gt;next-&gt;next;
            slow=slow-&gt;next;
        }
        return true;
    }
};
</code></pre>
<p>然后来看一下官方题解：</p>
<blockquote>
<p>方法一：哈希表<br>
思路<br>
我们可以通过检查一个结点此前是否被访问过来判断链表是否为环形链表。常用的方法是使用哈希表。<br>
算法<br>
我们遍历所有结点并在哈希表中存储每个结点的引用（或内存地址）。如果当前结点为空结点 null（即已检测到链表尾部的下一个结点），那么我们已经遍历完整个链表，并且该链表不是环形链表。如果当前结点的引用已经存在于哈希表中，那么返回 true（即该链表为环形链表）。</p>
</blockquote>
<pre><code>public boolean hasCycle(ListNode head) {
    Set&lt;ListNode&gt; nodesSeen = new HashSet&lt;&gt;();
    while (head != null) {
        if (nodesSeen.contains(head)) {
            return true;
        } else {
            nodesSeen.add(head);
        }
        head = head.next;
    }
    return false;
}
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(n)，对于含有 n 个元素的链表，我们访问每个元素最多一次。添加一个结点到哈希表中只需要花费 O(1) 的时间。<br>
空间复杂度：O(n)，空间取决于添加到哈希表中的元素数目，最多可以添加 n 个元素。</p>
<p>方法二：双指针<br>
思路<br>
想象一下，两名运动员以不同的速度在环形赛道上跑步会发生什么？</p>
<p>算法<br>
通过使用具有 不同速度 的快、慢两个指针遍历链表，空间复杂度可以被降低至 O(1)。慢指针每次移动一步，而快指针每次移动两步。<br>
如果列表中不存在环，最终快指针将会最先到达尾部，此时我们可以返回 false。<br>
现在考虑一个环形链表，把慢指针和快指针想象成两个在环形赛道上跑步的运动员（分别称之为慢跑者与快跑者）。而快跑者最终一定会追上慢跑者。这是为什么呢？考虑下面这种情况（记作情况 A）- 假如快跑者只落后慢跑者一步，在下一次迭代中，它们就会分别跑了一步或两步并相遇。<br>
其他情况又会怎样呢？例如，我们没有考虑快跑者在慢跑者之后两步或三步的情况。但其实不难想到，因为在下一次或者下下次迭代后，又会变成上面提到的情况 A。</p>
</blockquote>
<pre><code>public boolean hasCycle(ListNode head) {
    if (head == null || head.next == null) {
        return false;
    }
    ListNode slow = head;
    ListNode fast = head.next;
    while (slow != fast) {
        if (fast == null || fast.next == null) {
            return false;
        }
        slow = slow.next;
        fast = fast.next.next;
    }
    return true;
}
</code></pre>
<blockquote>
<p>复杂度分析</p>
<p>时间复杂度：O(n)，让我们将 nn 设为链表中结点的总数。为了分析时间复杂度，我们分别考虑下面两种情况。</p>
<p>链表中不存在环：<br>
快指针将会首先到达尾部，其时间取决于列表的长度，也就是 O(n)。</p>
<p>链表中存在环：<br>
我们将慢指针的移动过程划分为两个阶段：非环部分与环形部分：</p>
<p>慢指针在走完非环部分阶段后将进入环形部分：此时，快指针已经进入环中<br>
迭代次数=非环部分长度=N</p>
<p>两个指针都在环形区域中：考虑两个在环形赛道上的运动员 - 快跑者每次移动两步而慢跑者每次只移动一步。其速度的差值为 1，因此需要经过 二者之间距离\速度差值 次循环后，快跑者可以追上慢跑者。这个距离几乎就是 环形部分长度 K&quot; 且速度差值为 1，我们得出这样的结论 迭代次数=近似于&quot;环形部分长度 K&quot;.</p>
<p>因此，在最糟糕的情形下，时间复杂度为 O(N+K)，也就是 O(n)。</p>
<p>空间复杂度：O(1)，我们只使用了慢指针和快指针两个结点，所以空间复杂度为 O(1)。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于指针形参的问题]]></title>
        <id>https://lixin-ee.github.io//post/guan-yu-zhi-zhen-xing-can-de-wen-ti</id>
        <link href="https://lixin-ee.github.io//post/guan-yu-zhi-zhen-xing-can-de-wen-ti">
        </link>
        <updated>2019-10-27T13:53:25.000Z</updated>
        <content type="html"><![CDATA[<p>今天做递归的时候发现一个很严重的问题</p>
<pre><code>ListNode* reverse_list(ListNode* head,ListNode* n,ListNode* n_next){
        if(n_next!=NULL){
            reverse_list(head,n_next,n_next-&gt;next);
            n_next-&gt;next=n;
            cout&lt;&lt;head-&gt;val&lt;&lt;endl;
        }    
        else{
            head=n; 
            cout&lt;&lt;head-&gt;val&lt;&lt;endl;
        }
 
       return n;
    }
		
ListNode* reverseList(ListNode* head) {
        if(head==NULL)
            return NULL;
        //ListNode *ln=head-&gt;next;
        ListNode*n=reverse_list(head,head,head-&gt;next);
        n-&gt;next=NULL;
        return head;
    }
    
</code></pre>
<p>为了改变head的值我把head指针传了进去，但是！在递归回来的途中程序却吧head的值改回原值了？WTF？这个问题弄了一个早上也没弄懂，晚上了研究一下发现了问题所在：<br>
head=n;<br>
注意这里我直接使用了指针形参，而不是对指针形参进行解引用再赋值<br>
此时其实和平常我们使用指针形参的情形不太一样，平常我们只会对指针形参进行解引用再赋值，从而达到不需要值传递。但是！指针形参本身就是一个值传递，所以如果像上面直接使用指针形参的值，虽然在函数内是可以改变指针指向的对象，但其实这个指针形参是一个临时变量，一旦离开函数这个临时变量就没了。所以对于指针形参，如果想达到改变值的情况，只能1.对于指针指向的值可以直接改变值2.如果想改变指针的值，形参必须改成指针的引用 也就是*（&amp;head）。</p>
<p>因为所谓的指针形参传递对于指针这个形参本身来说还是值传递！是复制了指针形参过去的！！只有对于指针指向的对象来说才是相当于引用传递，所以head的形参必须改成指针的引用 也就是*（&amp;head）<br>
所以最终代码为</p>
<pre><code>class Solution {

public:
    ListNode* reverse_list(ListNode* (&amp;head),ListNode* n,ListNode* n_next){</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表 206. 反转链表 难度：简单]]></title>
        <id>https://lixin-ee.github.io//post/lian-biao-206-fan-zhuan-lian-biao-nan-du-jian-dan</id>
        <link href="https://lixin-ee.github.io//post/lian-biao-206-fan-zhuan-lian-biao-nan-du-jian-dan">
        </link>
        <updated>2019-10-27T01:44:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>反转一个单链表。<br>
示例:<br>
输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>
输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br>
进阶:<br>
你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>
</blockquote>
<p>难点要点：<br>
1.如何保证指针改变后还能保存指针之前指向的值？比如1-&gt;2-&gt;3 将2指向1后，怎么读3的值？<br>
2.注意链表题<br>
我的思路就是利用三个变量分别保存好这三者，然后进行迭代</p>
<pre><code>/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL)
            return NULL;
        //ListNode *ln=head-&gt;next;
        ListNode *ln=head;
        ListNode *lnn=ln-&gt;next;
        ListNode *temp=NULL;
        while(lnn!=NULL){
            ln-&gt;next=temp;
            temp=ln;
            ln=lnn;
            lnn=lnn-&gt;next;         
        }
        ln-&gt;next=temp;
        head=ln;
        return head;
    }
};
</code></pre>
<p>做递归的时候发现一个很严重的问题</p>
<pre><code>ListNode* reverse_list(ListNode* head,ListNode* n,ListNode* n_next){
        if(n_next!=NULL){
            reverse_list(head,n_next,n_next-&gt;next);
            n_next-&gt;next=n;
            cout&lt;&lt;head-&gt;val&lt;&lt;endl;
        }    
        else{
            head=n; 
            cout&lt;&lt;head-&gt;val&lt;&lt;endl;
        }
 
       return n;
    }


ListNode* reverseList(ListNode* head) {
        if(head==NULL)
            return NULL;
        //ListNode *ln=head-&gt;next;
        ListNode*n=reverse_list(head,head,head-&gt;next);
        n-&gt;next=NULL;
        return head;
    }
    
</code></pre>
<p>为了改变head的值我把head指针传了进去，但是！在递归回来的途中程序却吧head的值改回原值了？WTF？这个问题弄了一个早上也没弄懂，后面再研究一下</p>
<p>10.27晚上更新：因为所谓的指针形参传递对于指针这个形参本身来说还是值传递！是复制了指针形参过去的！！只有对于指针指向的对象来说才是相当于引用传递，所以head的形参必须改成指针的引用 也就是*（&amp;head）<br>
所以最终代码为</p>
<pre><code>class Solution {

public:
    ListNode* reverse_list(ListNode* (&amp;head),ListNode* n,ListNode* n_next){
        
        if(n_next!=NULL){
            reverse_list(head,n_next,n_next-&gt;next);
            n_next-&gt;next=n;
        }    
        else{
            head=n; 
        }
 
       return n;
    }


ListNode* reverseList(ListNode* head) {
        if(head==NULL)
            return NULL;
        //ListNode *ln=head-&gt;next;
        ListNode* n=reverse_list(head,head,head-&gt;next);
        n-&gt;next=NULL;
        return head;
    }
};
</code></pre>
<p>先来看一下题解：</p>
<blockquote>
<p>方法一：迭代<br>
假设存在链表 1 → 2 → 3 → Ø，我们想要把它改成 Ø ← 1 ← 2 ← 3。</p>
<p>在遍历列表时，将当前节点的 next 指针改为指向前一个元素。由于节点没有引用其上一个节点，因此必须事先存储其前一个元素。在更改引用之前，还需要另一个指针来存储下一个节点。不要忘记在最后返回新的头引用！</p>
</blockquote>
<pre><code>public ListNode reverseList(ListNode head) {
    ListNode prev = null;
    ListNode curr = head;
    while (curr != null) {
        ListNode nextTemp = curr.next;
        curr.next = prev;
        prev = curr;
        curr = nextTemp;
    }
    return prev;
}
</code></pre>
<blockquote>
<p>复杂度分析</p>
<p>时间复杂度：O(n)，假设 nn 是列表的长度，时间复杂度是 O(n)。<br>
空间复杂度：O(1)</p>
</blockquote>
<blockquote>
<p>方法二：递归<br>
递归版本稍微复杂一些，其关键在于反向工作。假设列表的其余部分已经被反转，现在我该如何反转它前面的部分？</p>
</blockquote>
<p><img src="https://lixin-ee.github.io//post-images/1572145652208.png" alt=""></p>
<pre><code>public ListNode reverseList(ListNode head) {
    if (head == null || head.next == null) return head;
    ListNode p = reverseList(head.next);
    head.next.next = head;
    head.next = null;
    return p;
}
</code></pre>
<blockquote>
<p>复杂度分析</p>
<p>时间复杂度：O(n)，假设 nn 是列表的长度，那么时间复杂度为O(n)。<br>
空间复杂度：O(n)，由于使用递归，将会使用隐式栈空间。递归深度可能会达到 n 层。</p>
</blockquote>
<p>然后是比较直观的网友题解</p>
<blockquote>
<p>迭代：<br>
<img src="https://lixin-ee.github.io//post-images/1572145715655.png" alt=""></p>
</blockquote>
<pre><code>ListNode* reverseList(ListNode* head) {
        if(!head){
            return nullptr;
        }
        ListNode* first = head;//始终指向原链表的首位元素
        ListNode* target = head-&gt;next;//始终指向即将要放到当前链表首元素之前的目标元素
        while(target != nullptr){
            first-&gt;next = target-&gt;next;
            ListNode* temp = target-&gt;next;
            target-&gt;next = head;
            head = target;
            target = temp;
        }
        return head;
    }
</code></pre>
<p>递归：</p>
<pre><code>ListNode* reverseList(ListNode* head) {
        if(!head){
            return nullptr;
        }
        return reverse(head, head, head-&gt;next);        
    }
    
    ListNode* reverse(ListNode* head, ListNode* first, ListNode* target){
        if(!target){
            return head;
        }
        first-&gt;next = target-&gt;next;
        ListNode* temp = target-&gt;next;
        target-&gt;next = head;
        return reverse(target, first, temp);
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 204. 计数质数 难度：简单]]></title>
        <id>https://lixin-ee.github.io//post/math-204-ji-shu-zhi-shu</id>
        <link href="https://lixin-ee.github.io//post/math-204-ji-shu-zhi-shu">
        </link>
        <updated>2019-10-26T01:37:24.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>统计所有小于非负整数 n 的质数的数量。</p>
<p>示例:<br>
输入: 10<br>
输出: 4<br>
解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</p>
</blockquote>
<p>没什么想法，这几天状态很低落，直接看一下题解吧<br>
解决方案:</p>
<blockquote>
<p>一、暴力法（计算超时）：<br>
验证一个数是否为质数（素数）有很多方法。但最容易想到的莫非用暴力计算的方式一步步碾压过去的方法。虽然这种方法不是最优的，但是其对于我们了解素数仍是有所帮助的。<br>
思路：验证某个数是否为质数时，将其对每一个比其小的数进行取余运算，并对取余为零的情况进行计数。由于质数是指在大于 1 的自然数中，除了 1 和它本身以外不再有其他因数的自然数。所以，当计数结果为 1 时，该数为质数。<br>
在实际操作中，由于 1 和任意一个数必然取余为零，所以可以直接排除。并当没有取余为零的情况时，其才为质数。<br>
得代码如下：</p>
</blockquote>
<pre><code>int countPrimes(int n) {
    int count = 0;
    for (int i = 2; i &lt; n; i++){
        bool sign = true;
        for (int j = 2; j &lt; i; j++){
            if (i % j == 0)
            {
                sign = false;
                break;
            }
        }
        if (sign)
            count++; ;
    }
    return count;
}
</code></pre>
<blockquote>
<p>二、优化暴力算法：<br>
细究暴力计算的方法，我们可以发现，假如一个数为 9 ，那么其二分之一（4.5）后的数都可以不用进行计算，因为肯定是有余的 。事实上情况会比这更好一些：对正整数 n ，如果用 2 到 √n 之间(包含边界)的所有整数去除，均无法整除，则 n 为质数。<br>
并且，我们可以发现，一切非 2 偶数一定不可能为质数。所以，我们可以在此处进行另一步的优化。<br>
有个这些令人庆幸的发现，我们的代码也将如虎添翼：</p>
</blockquote>
<pre><code>int countPrimes(int n) {
    if(n &lt; 3)
        return 0;;
    //从3开始验算，所以初始值为1（2为质数）。
    int count = 1;
    for (int i = 3; i &lt; n; i++){
        //当某个数为 2 的 n 次方时（n为自然数），其 &amp; (n - 1) 所得值将等价于取余运算所得值
        //*如果 x = 2^n ，则 x &amp; (n - 1) == x % n
        //if(i % 2 == 0)
        if ((i &amp; 1) == 0)
            continue; ;
        bool sign = true;
        //用 j * j &lt;= i 代替 j &lt;= √i 会更好。
        //因为我们已经排除了所有偶数，所以每次循环加二将规避偶数会减少循环次数
        for (int j = 3; j * j &lt;=i; j+=2){
            if (i % j == 0){
                sign = false;
                break;
            }
        }
        if (sign)
            count++; ;
    }
    return count;
}
</code></pre>
<blockquote>
<p>(暴力法系列的 C# 和 C++ 的代码几乎相同。)<br>
经过对暴力算法的此番优化，我们的代码初步达到了应用的最低门槛，但显然还是不大理想，好似总感觉存在不必要的操作。但我们经过以上的研究（可以早一步排除偶数），再结合质数的性质，可以推想出：如果我们在进行顺序遍历时，每取得一个数（排除0、1），如果将它所有的倍数（排除0、1、本身）都清除，那么，剩下的数是不是必为素数？<br>
没错，这个有趣且实用的方法便是著名的厄拉多塞筛法！</p>
<p>三、厄拉多塞筛法：<br>
使用厄拉多塞筛法进行 1 到 64 的质数查找的过程如下：</p>
</blockquote>
<pre><code>int countPrimes(int n) {
    int count = 0;
    //初始默认所有数为质数
    vector&lt;bool&gt; signs(n, true);
    for (int i = 2; i &lt; n; i++) {
        if (signs[i]) {
            count++;
            for (int j = i + i; j &lt; n; j += i) {
                //排除不是质数的数
                signs[j] = false;
            }
        }
    }
    return count;
}
</code></pre>
<p>四、运用比特表（Bitmap）算法对筛法进行内存优化：</p>
<p>上面运用厄拉多塞筛法求一定范围内的质数已经十分高效了。然而，我们使用布尔数组标记一个数是否为质数时，每个值都占用了一个字节（Byte）。但是，我们仅需要两个不同的值来表示是否为质数即可。即一个比特（bit）来表示即可（0、1）。如果这样的话，我们便最优可节省八分之七的空间（然而，还得结合代码和实际情况，并不是用了就一定有效果）。</p>
<p>关于比特表算法在此便简要概述以下（可略过）：<br>
假如有从 1 至 8 总共八个数。现有一个字节大小的内存空间可供使用（仅供参考，不考虑实际用途及比特算法的最佳用处）。如何将每个数登记下来，并可以随时检查一个数是否存在呢？</p>
<p>如果用一个数组表示，即使不考虑数组的内存开销，哪怕用一个 byte 类型的变量记录每一数也将超出内存可使用范围。但是由于每个字节共有八个比特位，则可以用每个比特位来表示每个数字则恰好可以登记完所有的数字。</p>
<p>示例：</p>
<p>登记数字 1 ：0 0 0 0 0 0 0 1<br>
登记数字 1、3：0 0 0 0 0 1 0 1<br>
登记数字 1、2、3、4、5 ：0 0 0 1 1 1 1 1<br>
得代码如下：</p>
<pre><code>int countPrimes(int n) {
    int count = 0;
    //一个 int 变量不知道占多少字节（但请注意，这里采用了常量）
    const int size = sizeof(int) * 8;
    vector&lt;int&gt; signs(n / size + 1,0);
    for (int i = 2; i &lt; n; i++){
        //将元素和需确定得数字经行按位或运算，如果值改变，说明不存在该数字（未登记该数字），则其为质数。
        //在C++中，其提供了 bitset 来操作位，在此便不做介绍了。如果用了，可读性肯定会更好。
        //(当某个数为 2 的 n 次方时（n为自然数），其 &amp; (n - 1) 所得值将等价于取余运算所得值)
        //*如果 x = 2^n ，则 x &amp; (n - 1) == x % n
        //下面判断可以写成
        //if ((signs[i / size] &amp; (1 &lt;&lt; (i % 32))) == 0)
        if ((signs[i / size] &amp; (1 &lt;&lt; (i &amp; (size - 1)))) == 0){
            count++;
            for (int j = i + i; j &lt; n; j += i){
                //登记该数字
            	signs[j / size] |= 1 &lt;&lt; (j &amp; (size - 1));
            }
        }
    }
    return count;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 365. 水壶问题 难度：中等]]></title>
        <id>https://lixin-ee.github.io//post/math-365-shui-hu-wen-ti-nan-du-zhong-deng</id>
        <link href="https://lixin-ee.github.io//post/math-365-shui-hu-wen-ti-nan-du-zhong-deng">
        </link>
        <updated>2019-10-25T02:00:12.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？<br>
如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。<br>
你允许：<br>
装满任意一个水壶<br>
清空任意一个水壶<br>
从一个水壶向另外一个水壶倒水，直到装满或者倒空<br>
示例 1: (From the famous &quot;Die Hard&quot; example)<br>
输入: x = 3, y = 5, z = 4<br>
输出: True<br>
示例 2:<br>
输入: x = 2, y = 6, z = 5<br>
输出: False</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/water-and-jug-problem<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>难点要点：<br>
1.需要考虑所有情况，比如再x往y里面不断倒水，y装满后x剩下的水可以作为基础，继续重复。然后还需要考虑一个桶里有水，同时另一个桶可以有空桶和装满两种情况。</p>
<p>我没有找到其中的规律， 只能暴力找所有的解了，所以还是看一下网友题解吧</p>
<blockquote>
<p>ax + by = z 求是否有合理的解 ，如果反过来将x ，y视 为系数 ，并且x= t1 * k ，y= t2 * k<br>
化简 a * t1 * k + b * t2 * k == z;<br>
然后 k * (a * t1 + b * t2) = z;<br>
也就是说z为 a 和 b 的最大公约数k的倍数<br>
特判为 0 的时候 以及 使得等式成立的基本条件 x + y &gt;= z</p>
</blockquote>
<pre><code>class Solution {
public:
bool canMeasureWater(int x, int y, int z) {           
    return z == 0 || ( x + y &gt;= z &amp;&amp; z % __gcd( x , y ) == 0);
}
};
</code></pre>
<blockquote>
<p>若a,b是整数,且gcd(a,b)=d，那么对于任意的整数x,y,ax+by都一定是d的倍数，特别地，一定存在整数x,y，使ax+by=d成立。</p>
<p>本题先判断所需要的水量是否大于两个桶的容量之和，如果不大于，判断所需要的水量是否是两个桶容量的最大公约数的倍数，根据裴蜀定理可以证明：</p>
<p>如果所需要的水量是两个水壶容量的最大公约数的倍数，且水量不大于两个水壶的容量之和，那么必然可以用这两个水壶操作得到所需要的水量。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 367. 有效的完全平方数 难度：简单]]></title>
        <id>https://lixin-ee.github.io//post/math-367-you-xiao-de-wan-quan-ping-fang-shu-nan-du</id>
        <link href="https://lixin-ee.github.io//post/math-367-you-xiao-de-wan-quan-ping-fang-shu-nan-du">
        </link>
        <updated>2019-10-24T01:08:58.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回 False。<br>
说明：不要使用任何内置的库函数，如  sqrt。</p>
<p>示例 1：<br>
输入：16<br>
输出：True<br>
示例 2：<br>
输入：14<br>
输出：False</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/valid-perfect-square<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>思路：<br>
其实这道题和之前的求开方值非常像，所以我直接用了牛顿迭代法来做了（二分法也是可以的）只是最后需要加上判断条件。</p>
<pre><code>class Solution {
public:
    bool isPerfectSquare(int num) {
        if(num==0||num==1)
            return true;
        int res=sqrts(double(num),num);
        if(res*res==num)
            return true;
        return false;
        
    }
    
    double sqrts(double x,int num){
        double res=(x+num/x)/2;
        if(res==x)
            return x;
        else
            return sqrts(res,num);
    }
};
</code></pre>
<p>对于判断条件，一开始我是想利用res平方是否等于原值来判断的，但是注意！就算double有精度限制，但是就好像计算器一样，如果将其平方是会等于原值的！所以最后我直接讲res强制转换为int，只取整数部分再相乘判断。</p>
<p>下面是网友题解：</p>
<blockquote>
<p>解法：二分法</p>
</blockquote>
<pre><code>class Solution {
public:
    bool isPerfectSquare(int num) {
        int start=1;
        int end=num;
        int mid=start+(end-start)/2;
        while(start&lt;=end)
        {
            if(pow(mid,2)&gt;num)
            {
                end=mid-1;
            }
            else if(pow(mid,2)&lt;num)
            {
                start=mid+1;
            }
            else return true;
            mid=(end-start)/2+start;
        }
        return false;
    }
};
</code></pre>
<blockquote>
<p>解法：公式法<br>
利用 1+3+5+7+9+…+(2n-1)=n^2，即完全平方数肯定是前n个连续奇数的和</p>
</blockquote>
<pre><code>class Solution {
public:
    bool isPerfectSquare(int num) {
        int i=1;
        while(num&gt;0)
        {
            num-=i;
            i+=2;
        }
        return num==0;
    }
};
</code></pre>
<p>解法：牛顿迭代法</p>
<pre><code>if(1 == num) return true;
        int i = num / 2;
        while((double)i * i &gt; num){
            i = (i + num / i) / 2;
        }
        return i * i == num;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Math 50. Pow(x, n) 难度：中等]]></title>
        <id>https://lixin-ee.github.io//post/math-50-powx-n-nan-du-zhong-deng</id>
        <link href="https://lixin-ee.github.io//post/math-50-powx-n-nan-du-zhong-deng">
        </link>
        <updated>2019-10-23T02:48:00.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>实现 pow(x, n) ，即计算 x 的 n 次幂函数。</p>
<p>示例 1:<br>
输入: 2.00000, 10<br>
输出: 1024.00000<br>
示例 2:<br>
输入: 2.10000, 3<br>
输出: 9.26100<br>
示例 3:<br>
输入: 2.00000, -2<br>
输出: 0.25000<br>
解释: 2-2 = 1/22 = 1/4 = 0.25<br>
说明:<br>
-100.0 &lt; x &lt; 100.0<br>
n 是 32 位有符号整数，其数值范围是 [−2^31, 2^31 − 1] 。</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/powx-n<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<p>要点难点：<br>
1.如果逐个相乘的暴力法肯定会超时<br>
2.n取INT_MIN的时候需要额外的处理<br>
3.需要将负号转化为导数<br>
我的思路<br>
1.既然不能逐个相乘，就利用这几题中都利用到的（逆向）二分法，每次递增一倍，比如 1 2 4 8...如果下一步翻倍的时候会大于n的话，就从1开始重新翻倍<br>
2.针对x为0，1的特例进行优化，同时在对n的负值进行处理的时候单独对INT_MIN进行预处理（先乘一次）<br>
3.优化点：如果有空间的话，可以用一个vector把之前计算的值存起来<br>
最后代码如下：</p>
<pre><code>class Solution {
public:
    double myPow(double x, int n) {
        if(x==0||x==1)
            return x;
        if(n==0)
            return 1;
        if(n&lt;0){
            x=1/x;
            if(n==INT_MIN)
                n=-(n+1),x*=x;
            else
                n=-n;
        }

        int i=1,j=1;
        double res=x,temp=x;
        while(j!=n){
        do{
            res*=temp;
            temp*=temp;
            j+=i;
            i=2*i;  
            }while(j&lt;=n-i);          
        i=1;
        temp=x;
        }
        cout&lt;&lt;res&lt;&lt;endl;
        return res;    
    }
};
</code></pre>
<p>最后来看官方题解和网友题解：</p>
<blockquote>
<p>方法：快速幂算法（递归）<br>
直观想法<br>
假定我们已经得到了 x ^ n的结果，我们如何得到 x ^ {2 * n}的结果？很明显，我们不需要将 x 再乘 n 次。使用公式 (x ^ n) ^ 2 = x ^ {2 * n}，我们可以在一次计算内得到 x ^ {2 * n} 的值。使用该优化方法，我们可以降低算法的时间复杂度。<br>
算法假定我们已经得到了 x ^ {n / 2}的结果，并且我们现在想得到 x ^ n的结果。我们令 A 是 x ^ {n / 2}的结果，我们可以根据 n 的奇偶性来分别讨论 x ^ n的值。如果 n 为偶数，我们可以用公式 (x ^ n) ^ 2 = x ^ {2 * n}来得到 x ^ n = A * A。如果 n 为奇数，那么 A * A = x ^ {n - 1} 。直观上看，我们需要再乘一次 xx ，即 x ^ n = A * A * x。该方法可以很方便的使用递归实现。我们称这种方法为 &quot;快速幂&quot;，因为我们只需最多 O(\log n)O(logn) 次运算来得到 x ^ n 。</p>
</blockquote>
<pre><code>class Solution {
public:
    double fastPow(double x, long long n) {
        if (n == 0) {
            return 1.0;
        }
        double half = fastPow(x, n / 2);
        if (n % 2 == 0) {
            return half * half;
        } else {
            return half * half * x;
        }
    }
    double myPow(double x, int n) {
        long long N = n;
        if (N &lt; 0) {
            x = 1 / x;
            N = -N;
        }
        return fastPow(x, N);
    }
};
</code></pre>
<blockquote>
<p>复杂度分析<br>
时间复杂度：O(logn). 每一次我们使用公式 (x ^ n) ^ 2 = x ^ {2 * n}<br>
, n 都变为原来的一半。因此我们需要至多 O(logn) 次操作来得到结果。<br>
空间复杂度：O(logn). 每一次计算，我们需要存储 x ^ {n / 2} 的结果。 我们需要计算O(logn) 次，所以空间复杂度为 O(logn) 。</p>
<p>同时网友提供的另一种二分思想递归：</p>
</blockquote>
<pre><code>class Solution {
public:
    double myPow(double x, int n) {
        if (n == 0) { return 1; }
        if (n == 1) { return x; }
        if (n == -1) { return 1 / x; }
        double half = myPow(x, n / 2);
        double rest = myPow(x, n % 2);
        double total = rest * half * half;
        return total;
    }
};
</code></pre>
<blockquote>
<p>另外一种移位的解法：<br>
先介绍快速幂：<br>
众所周知，如果我们要求a的n次方，最朴素的想法一定是把它们乘起来，这样的复杂度是O(n),显然太差了。<br>
然后我们想到一种优化，如果我们能求得 2的k次方=n的话，我们只需要将a的平方相乘k次，这样的复杂度是O(log2n)，但是我们很难找到这样的k。<br>
于是我们将这一想法再一次优化，我们只要能找到 2的k1次方+2的k2次方+...=n就好了，这样的复杂度还是O(log2n)<br>
这一想法可以通过数的二进制位运算轻易解决，比如9的二进制是1001，也就是从右往左数第i位，我们的答案就乘上a的2的i次方<br>
于是就有了一下算法</p>
</blockquote>
<pre><code>class Solution {
public:
    
    double qpow(double a, long long b){
        double res = 1;
        while(b){
            if(b&amp;1) res = res*a;
            b &gt;&gt;= 1;
            a *= a;
        }
        return res;
    }
    
  
    double myPow(double x, long long n) {
        if(n == 0) return 1;
        if(n &gt; 0) return qpow(x,n);
        if(n &lt; 0) return 1/qpow(x,-n);
        return 1.0;
    }
};
</code></pre>
<p>另一种不需要移位的方法：</p>
<pre><code>class Solution {
public:
    double myPow(double x, int n) {
        long long N = n;
        if (N &lt; 0) {
            x = 1 / x;
            N = -N;
        }
        double ans = 1;
        double current_product = x;
        for (long long i = N; i ; i /= 2) {
            if ((i % 2) == 1) {
                ans = ans * current_product;
            }
            current_product = current_product * current_product;
        }
        return ans;
    }
};
</code></pre>
<p>复杂度分析<br>
时间复杂度：O(logn). 对每一个 n 的二进制位表示，我们都至多需要累乘 1 次，所以总的时间复杂度为 O(logn) 。<br>
空间复杂的：O(1). 我们只需要用到 2 个变量来保存当前的乘积和最终的结果 x 。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ C++ primer 第十三章 笔记+习题 13.3-13.5]]></title>
        <id>https://lixin-ee.github.io//post/c-primer-di-shi-san-zhang-bi-ji-xi-ti-133-135</id>
        <link href="https://lixin-ee.github.io//post/c-primer-di-shi-san-zhang-bi-ji-xi-ti-133-135">
        </link>
        <updated>2019-10-23T01:00:08.000Z</updated>
        <content type="html"><![CDATA[<p>13.3交换操作<br>
为了<strong>交换两个对象我们需要进行一次拷贝和两次赋值</strong>，但理论上这些内存分配都是不必要的，我们更希望使用swap交换指针，而不是分配对象的新副本<br>
与拷贝控制成员不同，<strong>swap不是必要的</strong>，但是对于分配了资源的类，定义swap可能是一种很重要的优化手段<br>
swap有其内置版本，标准库的std::swap，但是如果一个类的成员有自己类型特定的swap函数，调用std::swap就是错误的了。<br>
所以应该使用swap而不是std::swap，swap函数会自动匹配最优版本，如果不存在类型特定的版本，程序也会自动使用std中的版本<br>
<strong>定义了swap的类通常会使用swap来定义它们的赋值运算符</strong>，称为拷贝并交换技术，这种技术将左侧运算对象和右侧对象的一个副本进行交换<strong>注意此时形参必须是值传递，但是swap依然是引用传递</strong><br>
在上述版本的赋值运算符中，参数并不是一个引用，所以<strong>右侧运算对象是以传值方式传递</strong>给了赋值运算符。因此rhs是右侧运算对象的一个副本<br>
在函数体中，rhs获得了*this原来保存的指针，并将rhs 的指针存入了*this。但结束时析构函数会被执行，rhs会被销毁，delete了rhs现在指向的内存，即左侧对象原来指向的内存</p>
<p>习题13.29<br>
因为在函数内部声明了std名字域的swap，所以调用的是标准库的swap而不是递归调用自身<br>
习题13.30<br>
void swap(HasPtr &amp;lhs, HasPtr &amp;rhs) {<br>
std::swap(lhs.ps, rhs.ps);<br>
std::swap(lhs.i, rhs.i);<br>
cout &lt;&lt; &quot;now we swap!&quot; &lt;&lt; endl;<br>
}<br>
习题13.31</p>
<pre><code>class HasPtr
{
	friend void swap(HasPtr &amp;lhs, HasPtr &amp;rhs);
public:
	HasPtr(const HasPtr &amp;hs) : ps(new string(*hs.ps)), i(hs.i) {};
	~HasPtr() { delete ps; }
	HasPtr(const string &amp;s = string(), int si = 0) :ps(new string(s)), i(si) {}
	HasPtr &amp;operator=(const HasPtr &amp;hp) {
		string *s = new string(*hp.ps);
		delete ps;
		*ps = *s;
		delete s;
		i = hp.i;
		return *this;
	}
	bool operator&lt;(const HasPtr &amp;rhs) const{ return i &lt; rhs.i; };
private:
	string *ps;
	int i;
};

void swap(HasPtr &amp;lhs, HasPtr &amp;rhs) {
	std::swap(lhs.ps, rhs.ps);
	std::swap(lhs.i, rhs.i);
	cout &lt;&lt; &quot;now we swap!&quot; &lt;&lt; endl;
}


int main()
{
	vector&lt;HasPtr&gt; hp;
	for (int i = 5; i &gt; 0; --i)
		hp.push_back(HasPtr(&quot;123&quot;, i));
//	for (auto h : hp)
//		cout &lt;&lt; h.i &lt;&lt; endl;
//	sort(hp.begin(), hp.end());
	swap(hp[0], hp[1]);
}
</code></pre>
<p>这题离奇地报错，似乎是sort内部无法调用自定义的swap<br>
习题13.32<br>
不需要，因为类指针的时候需要对左侧计数进行递增，交换的话两边的计数值应该都是不变的。</p>
<p>13.4拷贝控制示例<br>
拷贝赋值运算符通常执行拷贝构造函数和析构函数中也要完成的工作，这种情况下，公共的工作应该放在private的工具函数中完成。</p>
<p>习题13.33<br>
Folder的话会拷贝副本，同时需要改变f的内容，不能使用const<br>
习题13.34</p>
<pre><code>class Message
{
	friend class Folder; 
	friend void swap(Message &amp;, Message &amp;);
public:
	explicit Message(const string &amp;str = &quot;&quot;) :contents(str) {};
	Message(const Message &amp;m) :contents(m.contents), folders(m.folders) { add_to_Folders(m); };
	Message&amp; operator=(const Message &amp;m);
	~Message() { remove_from_Folders(); };
	void save(Folder&amp;);
	void remove(Folder&amp;);
private:
	string contents;
	set&lt;Folder*&gt; folders;
	void add_to_Folders(const Message&amp;);
	void remove_from_Folders();
};

void Message::save(Folder &amp;f) {
	folders.insert(&amp;f);
	f.addMsg(this);
}
void Message::remove(Folder &amp;f) {
	folders.erase(&amp;f);
	f.remMsg(this);
}

void Message::add_to_Folders(const Message &amp;m) {
	for (auto f : m.folders)
		f-&gt;addMsg(this);
}
void Message::remove_from_Folders() {
	for (auto f : folders)
		f-&gt;remMsg(this);
}

Message&amp; Message::operator=(const Message &amp;m){
	remove_from_Folders();
	contents = m.contents;
	folders = m.folders;
	add_to_Folders(m);
	return *this;

}

void swap(Message &amp;lhs, Message &amp;rhs) {
	using std::swap;
	for (auto f : lhs.folders)
		f-&gt;remMsg(&amp;lhs);
	for (auto f : rhs.folders)
		f-&gt;remMsg(&amp;rhs);
	swap(lhs.folders, rhs.folders);
	swap(lhs.contents, rhs.contents);
	for (auto f : lhs.folders)
		f-&gt;addMsg(&amp;lhs);
	for (auto f : rhs.folders)
		f-&gt;addMsg(&amp;rhs);
}
</code></pre>
<p>习题13.35<br>
会直接拷贝contents和folders，但是却没有将其添加进相应的folders对象里面，所以如果进行删除的话会导致变成空悬指针。<br>
习题13.36</p>
<pre><code>class Folder {
public:
	void addMsg(Message *m) { message.insert(m); }
	void remMsg(Message*) { message.erase(m); };
private:
	set&lt;Message*&gt; message;
};
</code></pre>
<p>习题13.37</p>
<pre><code>void Message::addFolders(Folder &amp;f) {
	folders.insert(&amp;f);
	f.addMsg(this);
}

void Message::remFolders(Folder &amp;f) {
	folders.erase(&amp;f);
	f.remMsg(this);
}
</code></pre>
<p>习题13.38<br>
因为swap后面需要为folders加上lhs，但是赋值运算符中并不需要拷贝左值<br>
当涉及到动态分配内存或指针时,拷贝并交换是一个完成该功能的精简的方式. ，但是在Message类中,并未涉及到动态分配内存和指针,这种方法并不会产生任何益处，同时还会因为很多指针操作让程序变得更复杂难难以实现</p>
<p>13.5动态内存管理类<br>
某些类需要在运行时分配可变大小的内存空间，这种类通常使用标准库容器来保存它们的数据，比如vector。但某些类<strong>需要自己进行内存分配</strong>，这些类一般来说<strong>必须定义自己的拷贝控制成员来管理所分配的内存</strong><br>
在StrVec类中，我们将使用一个allocator来获得原始内存。由于<strong>allocator分配的内存是未构造的</strong>，我们将在需要添加新元素时使用allocator的construct成员在原始内存中创建对象。类似的，当我们需要删除一个元素时，我们将使用destroy成员来销毁元素</p>
<p>用allocator分配内存时，必须记住内存是未构造的，为了使用此原始内存，我们必须调用construct，construct的<strong>第一个参数必须是一个指针</strong>，指向调用allocate所分配的未构造的内存空间，剩余参数确定用哪个构造函数来构造对象<br>
construct会使用后置递增来使得first_free在当前地址构造一个对象后递增指向下一个未构造的元素<br>
<strong>不能传递给deallocate一个空指针</strong></p>
<p>新标准中避免string拷贝的两种机制1.部分标准库类定义了所谓的“移动构造函数”，通常将资源从给定对象“移动”而不是拷贝到正在创建的对象，具体实现细节尚未公开，但可以假定string的移动构造函数进行了指针的拷贝，而不是为字符分配内存空间然后拷贝字符；2.定义在utility头文件中的标准库函数move，当reallocate在新内存中构造string时，它必须调用move来表示希望使用string的移动构造函数，如果漏掉了move调用，将会使用string的拷贝构造函数，其次我们<strong>通常不为move提供一个using声明</strong>，当我们使用move时，<strong>直接调用std:move而不是move</strong></p>
<p>习题13.39</p>
]]></content>
    </entry>
</feed>